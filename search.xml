<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线段树基础模板</title>
      <link href="2018/11/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2018/11/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>重温了一遍线段树</p><p><a href="https://blog.csdn.net/zearot/article/details/48299459">https://blog.csdn.net/zearot/article/details/48299459</a></p><p>luogu板子题https://www.luogu.org/problemnew/show/P3372</p><h3 id="查询区间和"><a class="markdownIt-Anchor" href="#查询区间和"></a> 查询区间和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>],add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">sum[rt]=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[rt])&#123;</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>]+=add[rt];</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt];</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>]+=add[rt]*ln;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt]*rn;</span><br><span class="line">add[rt]=<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//range change</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line">sum[rt]+=C*(r-l+<span class="number">1</span>);</span><br><span class="line">add[rt]+=C;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">update(L,R,C,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line">update(L,R,C,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">ans+=query(L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line">ans+=query(L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i);</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">ll t,x,y,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class="line">update(x,y,k,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(x,y,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改区间查询最值"><a class="markdownIt-Anchor" href="#修改区间查询最值"></a> 修改区间查询最值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll mx;</span><br><span class="line">ll mi;</span><br><span class="line">&#125; s[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">s[rt].mx=max(s[rt&lt;&lt;<span class="number">1</span>].mx,s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx);</span><br><span class="line">s[rt].mi=min(s[rt&lt;&lt;<span class="number">1</span>].mi,s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">s[rt].mx=a[l];</span><br><span class="line">s[rt].mi=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[rt]) &#123;</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>]+=add[rt],add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>].mx+=add[rt],s[rt&lt;&lt;<span class="number">1</span>].mi+=add[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx+=add[rt],s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi+=add[rt];</span><br><span class="line">add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) &#123;</span><br><span class="line">s[rt].mx+=C,s[rt].mi+=C;</span><br><span class="line">add[rt]+=C;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) &#123;</span><br><span class="line">update(L,R,C,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) &#123;</span><br><span class="line">update(L,R,C,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;S :&quot;</span>&lt;&lt;s[<span class="number">1</span>].mx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[<span class="number">1</span>].mi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">update(l,r,<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; :&quot;</span>&lt;&lt;s[<span class="number">1</span>].mx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[<span class="number">1</span>].mi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路算法桶（Dijkstra，Floyd，Bellman-Ford，Spfa）</title>
      <link href="2018/11/14/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95%E6%A1%B6/"/>
      <url>2018/11/14/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<p><em><strong>自己对最短路的简单总结并不涉及详解</strong></em></p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h2 id="1dijkstra"><a class="markdownIt-Anchor" href="#1dijkstra"></a> 1.Dijkstra</h2><p><em><strong>算法思想</strong></em>：（求单源最短路，朴素算法复杂度O(n^2)，堆优化O(nlogn)</p><p>将点分为两类，一类为已被更新最短距离的点为“标记点”，另一类为还没有被更新最短距离的点为“未标记点”。初始dist[i]=INF</p><p>一开始将起点到起点的距离标记为0，加入优先队列（dist从小到大排序）；每次取dist最小的点（即与起始点距离最小的点）设为“标记点”，然后枚举和该点相连的点，更新他们的最短路dist[i]，更新的原则就是以该点为中转点，更新方程为dist[i]=min(dist[j]+nw,dist[i]) [ j为中转点，i为更新点，w为j到i的权值 ] 然后将与该点相关联的点都加入队列，循环往复，直到队列为空。最后全部的点都访问完毕时，dist都被更新，即起点到到该点的最短路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,ss,ee;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点 </span></span><br><span class="line">ll dis; <span class="comment">//起始点到该点的最短距离 </span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id; </span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll dist[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[start]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(start,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nid=ne.id;</span><br><span class="line"><span class="keyword">if</span>(dist[nto]&gt;dist[np]+nw) &#123;</span><br><span class="line">dist[nto]=dist[np]+nw;</span><br><span class="line">q.push(node(nto,dist[nto])); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;ss,&amp;ee);</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//无向图建图 </span></span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">e[y].push_back(edge(i,x,w));</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(ss);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[ee]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>例题：<a href="https://www.luogu.org/problemnew/show/P2384">https://www.luogu.org/problemnew/show/P2384</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">9987</span>;</span><br><span class="line">ll n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点 </span></span><br><span class="line">ll dis; <span class="comment">//起始点到该点的最短距离 </span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id; </span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll dist[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nid=ne.id;</span><br><span class="line"><span class="keyword">if</span>(dist[np]==<span class="number">0</span>)&#123;</span><br><span class="line">dist[nto]=(dist[np]+nw)%mod;</span><br><span class="line">q.push(node(nto,dist[nto]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dist[nto]&gt;dist[np]*nw) &#123;</span><br><span class="line">dist[nto]=(dist[np]*nw)%mod;</span><br><span class="line">q.push(node(nto,dist[nto])); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//有向图建图 </span></span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[n]%mod&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="2floyd"><a class="markdownIt-Anchor" href="#2floyd"></a> 2.Floyd</h2><p><em><strong>算法思想</strong></em>：(求多源最短路，算法复杂度O(n^3)</p><p>3层循环，第一层枚举中间点k(以k为中转点)，第二层与第三层枚举两个端点i，j。若有dis[i][j] &gt; dis[i][k] + dis[k][j] 则把dis[i][j]更新成dis[i][k] + dis[k][j]。不断去更新dis[i][j],就是一种dp的思想，因为算法复杂度高，一般只有数据量小的时候才用得上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=INT_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=INT_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll e[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>e[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//有向图建图</span></span><br><span class="line">e[x][y]=w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++) &#123; <span class="comment">//经过k点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; <span class="comment">//枚举起点终点，看路径能不能减少</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">if</span>(e[i][j]&gt;e[i][k]+e[k][j])</span><br><span class="line">e[i][j]=e[i][k]+e[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;<span class="comment">//从i到j的最短距离 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：<a href="https://www.luogu.org/problemnew/show/P2888">https://www.luogu.org/problemnew/show/P2888</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=INT_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=INT_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,k;</span><br><span class="line">ll e[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>e[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">e[x][y]=w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">e[i][j]=min(max(e[i][k],e[k][j]),e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(e[x][y]==INF)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;e[x][y]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3bellman-ford"><a class="markdownIt-Anchor" href="#3bellman-ford"></a> 3.Bellman-Ford</h2><p>***算法思想：**<em>Bellman-Ford也是来算单源最短路的，但是复杂度是O(v</em>e),是高于Dijkstra的，但是它可以用来检测负权回路，和带负值的最短路。</p><p>就是经过v-1次松弛（初始点固定了，最差的情况也是每一次松弛只松弛一个点，有v-1个），每次去尝试所有的边能否去松弛各个点。松弛过后，如果再进行一次松弛还能被松弛的话，则说明存在负权回路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line"><span class="keyword">int</span> v,e;</span><br><span class="line"><span class="comment">//顶点和边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; tt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bellmanFord</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">dist[src]=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;v; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;e; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> s=tt[j].s;</span><br><span class="line"><span class="keyword">int</span> e=tt[j].e;</span><br><span class="line"><span class="keyword">int</span> w=tt[j].w;</span><br><span class="line"><span class="keyword">if</span>(dist[s]!=INF &amp;&amp; dist[e]&gt;dist[s]+w) &#123;</span><br><span class="line">dist[e]=dist[s]+w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测负权回路</span></span><br><span class="line"><span class="keyword">bool</span> isBack=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;e; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> s=tt[j].s;</span><br><span class="line"><span class="keyword">int</span> e=tt[j].e;</span><br><span class="line"><span class="keyword">int</span> w=tt[j].w;</span><br><span class="line"><span class="keyword">if</span>(dist[s]!=INF &amp;&amp; dist[e]&gt;dist[s]+w) &#123;</span><br><span class="line">isBack=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isBack;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;e;</span><br><span class="line"><span class="keyword">int</span> ns,ne,nw;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ns&gt;&gt;ne&gt;&gt;nw;</span><br><span class="line">tt.push_back(edge &#123;ns,ne,nw&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> res=bellmanFord(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(res) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;有负权回路&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;无负权回路&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=v; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4spfa"><a class="markdownIt-Anchor" href="#4spfa"></a> 4.Spfa</h2><p>***算法思想：***SPFA 算法是 Bellman-Ford算法 的队列优化算法的别称，通常用于求含负权边的单源最短路径，以及判负权环。</p><p>用一个先进先出的队列来维护，每次取出队首结点p,然后用该点去松弛和它相连的点to，如果到dist[to]被减小，并且此时队列中没有这个点，那就将其加入队列（因为，队列只是维护的点，假设t已经在队列中，相同的点t存储的dist信息是一样的，这里dist[t]被减小，再将t点加入队列毫无意义），直到队列为空。</p><ul><li><strong>判断负权环</strong>：如果一个点被加入队列次数超过顶点数V，则存在负权环。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn];<span class="comment">//距离</span></span><br><span class="line"><span class="keyword">int</span> pushnum[maxn];<span class="comment">//入队次数</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];<span class="comment">//是否入队中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; tt[maxn];</span><br><span class="line"><span class="keyword">int</span> N,M,S;</span><br><span class="line"><span class="comment">//点数，边数，起点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(pushnum,<span class="number">0</span>,<span class="keyword">sizeof</span>(pushnum));</span><br><span class="line">dist[start]=<span class="number">0</span>;</span><br><span class="line">vis[start]=<span class="literal">true</span>;</span><br><span class="line">pushnum[start]++;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(start);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> p=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[p]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)tt[p].size(); ++i) &#123;</span><br><span class="line">edge tmp=tt[p][i];</span><br><span class="line"><span class="keyword">if</span>(dist[tmp.to]&gt;dist[p]+tmp.w) &#123;</span><br><span class="line">dist[tmp.to]=dist[p]+tmp.w;</span><br><span class="line"><span class="keyword">if</span>(vis[tmp.to]==<span class="literal">false</span>) &#123;</span><br><span class="line">q.push(tmp.to);</span><br><span class="line">vis[tmp.to]=<span class="literal">true</span>;</span><br><span class="line">pushnum[tmp.to]++;</span><br><span class="line"><span class="keyword">if</span>(pushnum[tmp.to]&gt;N) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; ++i) &#123;<span class="comment">//有向图建图</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">tt[x].push_back(edge &#123;y,z&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(spfa(S)) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;有负环&quot;</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D. Edge Deletion</title>
      <link href="2018/11/13/Edge%20Deletion/"/>
      <url>2018/11/13/Edge%20Deletion/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1076/problem/D">传送门</a></p><p>学习来自于：<a href="http://www.cnblogs.com/Lubixiaosi-Zhaocao/p/9951711.html">http://www.cnblogs.com/Lubixiaosi-Zhaocao/p/9951711.html</a></p><p>题目大意：</p><p>一个无向图，各点到点1的最短距离为di，保证满足条件删除m-k条边之后使得到点1的距离仍为di的点数量最多的情况下，输出剩余的k条边的编号（输入顺序即编号）</p><p>思路：<br />因为都是和1的最短距离，是单源最短路，所以应该会用到Dijkstra算法，但是他要输出剩余的k条边，这里可以用一个bfs，贪心从1号开始取和以1号为前驱为最短距离的边，然后再将这条边的另一个节点加入队列。所以在跑Dijkstra时，要保存到点i最短路的前驱father[i], 最后就是在这一颗由最短路构成的树上bfs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点 </span></span><br><span class="line">ll dis; <span class="comment">//到改点的距离 </span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id; </span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll father[maxn],faedge[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll dist[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">father[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nid=ne.id;</span><br><span class="line"><span class="keyword">if</span>(dist[nto]&gt;dist[np]+nw) &#123;</span><br><span class="line">dist[nto]=dist[np]+nw;</span><br><span class="line">father[nto]=np; <span class="comment">//记录nto的前驱 （相当于父亲 </span></span><br><span class="line">faedge[nto]=nid; <span class="comment">//并记录nto的前驱边 </span></span><br><span class="line">q.push(node(nto,dist[nto])); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()&amp;&amp;k&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;son[tmp].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v=son[tmp][i];</span><br><span class="line"><span class="keyword">if</span>(k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">ans.push_back(faedge[v]);</span><br><span class="line">q.push(v);</span><br><span class="line">k--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">e[y].push_back(edge(i,x,w));</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">son[father[i]].push_back(i); <span class="comment">//将父亲关系转化成儿子关系 </span></span><br><span class="line">&#125;</span><br><span class="line">bfs();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.size(); ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><s>不写这个我都快把最短路给忘了</s></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1356 The Balance &amp;&amp; POJ2142</title>
      <link href="2018/11/11/HDU%201356%20The%20Balance%20&amp;&amp;%20POJ2142/"/>
      <url>2018/11/11/HDU%201356%20The%20Balance%20&amp;&amp;%20POJ2142/</url>
      
        <content type="html"><![CDATA[<p>重新复习了一遍扩展欧几里德（一开始学的都忘了，丧</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1356">http://acm.hdu.edu.cn/showproblem.php?pid=1356</a></p><p>这道题一眼就可以看出来是扩展欧几里德，但是将答案解出来了之后，还要找到符合他条件的答案，这样算出来的答案已经是符合条件1了，条件2是（x+y）最小，条件3是（ax+by）最小</p><p>算出来的x，y有正有负，正即放在天平左边，负即和物品放在天平右边</p><p>因为a|x|=b|y|+c,要求a|x|+b|y|最小，如果a|x|减小，（即|x|减小），因为天平两边一样重，所以|y|也要减小，当a|x|+b|y|最小时，就是|x|+|y|最小时（可能不是很严谨，这也是我脑糊的</p><p>于是题意就变成了求|x|+|y|的最小值了。x 和 y 是不定式 ax+by=c 的解。可由扩展欧几里德算出通式</p><p>x=x1+b/d*t ；</p><p>y=y1-a/d*t ；</p><p>|x|+|y|=|x0+b/d<em>t|+|y0-a/d</em>t|，我们规定 a&gt;b（不行就交换），从这个式子中，我们可以发现：|x0+b/d<em>t|是单调递增的，|y0-a/d</em>t|是单调递减的，而由于我们规定了 a&gt;b，那么减的速度是要大于增的速度，于是整个函数减少的要比增加的快，但是由于绝对值的符号的作用，最终函数还是递增的。也就是说，函数是凹的，先减小，再增大。那么什么时候最小呢？很显然是 y0-a/d<em>t==0 的时候，于是我们的最小值|x|+|y|也一定是在 t=y0</em>d/a附近了，只要在附近枚举几个值就能找到最优解了（我枚举了5个，应该判断一下2个就行了，但是我懒，不想想了。。。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line">ll a1,b1,d1,x,y,r;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">exgcd(b,a%b);</span><br><span class="line">ll k=x;</span><br><span class="line">x=y;</span><br><span class="line">y=k-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r=a;</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;a1,&amp;b1,&amp;d1)&amp;&amp;a1||b1||d1)&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a1&lt;b1)&#123;</span><br><span class="line">swap(a1,b1);</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">exgcd(a1,b1);</span><br><span class="line"><span class="keyword">if</span>(d1%r!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no solution&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ll x1=x*(d1/r),y1=y*(d1/r);</span><br><span class="line"><span class="comment">//通解 x=x1+b1/r*t , y=y1-a1/r*t ，其中 t 为整数</span></span><br><span class="line">ll resx=x1,resy=y1;</span><br><span class="line">ll mid=y1*r/a1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=mid<span class="number">-2</span>;i&lt;=mid+<span class="number">2</span>;++i)&#123;</span><br><span class="line">ll xx=x1+b1/r*i;</span><br><span class="line">ll yy=y1-a1/r*i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(xx)+<span class="built_in">abs</span>(yy)&lt;<span class="built_in">abs</span>(resx)+<span class="built_in">abs</span>(resy))&#123;</span><br><span class="line">resx=xx,resy=yy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(resx)&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="built_in">abs</span>(resy)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(resy)&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="built_in">abs</span>(resx)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上我学习扩展欧几里德的网址https://www.cnblogs.com/hadilo/p/5914302.html</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展欧几里得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lyft Level 5 Challenge 2018 - Final Round (Open Div. 2)A,B,C</title>
      <link href="2018/11/11/Lyft%20Level%205%20Challenge%202018%20-%20Final%20Round%20(Open%20Div.%202)A,B,C/"/>
      <url>2018/11/11/Lyft%20Level%205%20Challenge%202018%20-%20Final%20Round%20(Open%20Div.%202)A,B,C/</url>
      
        <content type="html"><![CDATA[<p>感觉这场的题面都好长，看的脑壳子疼（英语不好，啊我挂了</p><p><a href="http://codeforces.com/contest/1075">http://codeforces.com/contest/1075</a></p><h1 id="a-the-kings-race"><a class="markdownIt-Anchor" href="#a-the-kings-race"></a> A. The King’s Race</h1><p>考虑对角线为分界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>((x+y)&lt;=n+<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;White&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Black&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="b-taxi-drivers-and-lyft"><a class="markdownIt-Anchor" href="#b-taxi-drivers-and-lyft"></a> B. Taxi drivers and Lyft</h1><p>每个0都会选择离他近的1，预处理一下每个0的前后最近的1的位置，然后跑一边就能算出每个0应该会归属哪个1了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll res[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">ll pre;</span><br><span class="line">ll last;</span><br><span class="line">&#125;tt[maxn];</span><br><span class="line">ll x[maxn];</span><br><span class="line">ll type[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,x+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,type+i);</span><br><span class="line">&#125;</span><br><span class="line">ll pp=<span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;<span class="comment">//更新前驱 </span></span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">0</span>)&#123;</span><br><span class="line">tt[i].pre=pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pp=i;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">ll la=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n+m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;<span class="comment">//更新后继 </span></span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">0</span>)&#123;</span><br><span class="line">tt[i].last=la;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">la=i;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m+n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(tt[i].last==<span class="number">1e9</span>+<span class="number">5</span>)&#123;</span><br><span class="line">res[tt[i].pre]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tt[i].pre==(<span class="number">-1e9</span>))&#123;</span><br><span class="line">res[tt[i].last]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ll xx=x[i]-x[tt[i].pre];</span><br><span class="line">ll yy=x[tt[i].last]-x[i];</span><br><span class="line"><span class="keyword">if</span>(xx&lt;=yy)&#123;</span><br><span class="line">res[tt[i].pre]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res[tt[i].last]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c-the-tower-is-going-home"><a class="markdownIt-Anchor" href="#c-the-tower-is-going-home"></a> C. The Tower is Going Home</h1><p><a href="http://codeforces.com/contest/1075/problem/C">http://codeforces.com/contest/1075/problem/C</a></p><p>去除最少的线使得可以从（1，1）到（x，1e9）由于数据比较大，模拟是不可能的。简单分析这是一道思维题，必须要化繁为简</p><p>（做这种思维题，就脑糊；我不喜欢思维题，不，我喜欢</p><p>竖置的线是贯通的都需要考虑，而横置的线如果不是从1开始，那就不需要考虑（大不了走到最左端穿过</p><p>竖置的线（x轴上的坐标）和有效的横置的线（右端点）都从小到大排序</p><p>竖置的线将整个棋盘分成了n+1个区域，考虑从每个区域到达（x，1e9）的花费，取最少的即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line">ll n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,x+i);</span><br><span class="line">&#125;</span><br><span class="line">sort(x,x+n);</span><br><span class="line"><span class="keyword">int</span> x1,x2,y1,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x1,&amp;x2,&amp;y1);</span><br><span class="line"><span class="keyword">if</span>(x1==<span class="number">1</span>)&#123;</span><br><span class="line">h[num++]=x2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x2==INF)ans++;</span><br><span class="line">&#125;</span><br><span class="line">sort(h,h+num);</span><br><span class="line">ans+=n;<span class="comment">//走到最最右端再向上的情况</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,cnt=num;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;num&amp;&amp;h[j]&lt;x[i])&#123;</span><br><span class="line">cnt--;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">ans=min(ans,cnt+i); </span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人赛 Codeforces Round 411 (Div. 2)A，B，C，D，E，hdu1356</title>
      <link href="2018/11/10/%E4%B8%AA%E4%BA%BA%E8%B5%9B1/"/>
      <url>2018/11/10/%E4%B8%AA%E4%BA%BA%E8%B5%9B1/</url>
      
        <content type="html"><![CDATA[<p>可以说打的非常失败，咕了</p><h1 id="a-a-fake-np"><a class="markdownIt-Anchor" href="#a-a-fake-np"></a> A A. Fake NP</h1><p><a href="http://codeforces.com/problemset/problem/805/A">http://codeforces.com/problemset/problem/805/A</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line">ll le,ri;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri);</span><br><span class="line"><span class="keyword">if</span>(le==ri) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,le);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交了6法不谈了</p><h1 id="b-b-3-palindrome"><a class="markdownIt-Anchor" href="#b-b-3-palindrome"></a> B B. 3-palindrome</h1><p><a href="http://codeforces.com/problemset/problem/805/B">http://codeforces.com/problemset/problem/805/B</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> flaga = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> flagb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line"><span class="keyword">if</span> (flaga) &#123;</span><br><span class="line">arr[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n) arr[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">flaga = <span class="number">0</span>;</span><br><span class="line">flagb = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">arr[i] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n) arr[i] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">flaga = <span class="number">1</span>;</span><br><span class="line">flagb = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始一直re，真的已经心态蹦了</p><h1 id="c-c-find-amir"><a class="markdownIt-Anchor" href="#c-c-find-amir"></a> C C. Find Amir</h1><p><a href="http://codeforces.com/problemset/problem/805/C">http://codeforces.com/problemset/problem/805/C</a></p><p>虽然放在C题，但还是很简单的，随便推一下就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(n/<span class="number">2</span><span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d"><a class="markdownIt-Anchor" href="#d"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1356">D</a></h1><p>初步看了一下是扩展欧几里德，但没有做出来，待补</p><p>撸完了题解感觉比E难多了，<a href="https://blog.csdn.net/TDD_Master/article/details/83958544">https://blog.csdn.net/TDD_Master/article/details/83958544</a></p><h1 id="e-d-minimum-number-of-steps"><a class="markdownIt-Anchor" href="#e-d-minimum-number-of-steps"></a> E D. Minimum number of steps</h1><p><a href="http://codeforces.com/problemset/problem/805/D">http://codeforces.com/problemset/problem/805/D</a></p><p>推到出来，但因为没有取模，而wa 确实了，太心急</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">ll mmod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span> </span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">res=res*x%mod;</span><br><span class="line">x=x*x%mod;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">ll numa=<span class="number">0</span>,numb=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.size();) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;b&#x27;</span>&amp;&amp;numa!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i; j&lt;s.size(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]==<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll numb=j-i;</span><br><span class="line">i=j;</span><br><span class="line">ll tmp=(numb*(mod_pow(<span class="number">2</span>,numa,mmod)<span class="number">-1</span>));</span><br><span class="line">res=(res+tmp) %mmod;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">numa++;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res%mmod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e"><a class="markdownIt-Anchor" href="#e"></a> <a href="http://codeforces.com/problemset/problem/805/E">E</a></h1><p>题都没看，待补</p><p>果然没补 💤</p><p>待更新——————————————————总结，个人赛太紧张了，要多打比赛才行，哎</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 44 (Rated for Div. 2) D. Sand Fortress</title>
      <link href="2018/11/07/Educational%20Codeforces%20Round%2044%20(Rated%20for%20Div.%202)%20D.%20Sand%20Fortress/"/>
      <url>2018/11/07/Educational%20Codeforces%20Round%2044%20(Rated%20for%20Div.%202)%20D.%20Sand%20Fortress/</url>
      
        <content type="html"><![CDATA[<p>传送 <a href="http://codeforces.com/contest/985/problem/D">http://codeforces.com/contest/985/problem/D</a></p><p>n堆沙子，最左边的沙子的最大高度不能超过H，让你在一个从1到正无穷的一维平面内放沙子，且要满足相邻两个坐标的沙子的高度不能超过1。问所需要的最小长度。</p><p>题目要求相邻两个坐标的沙子的高度不能超过1，那么左右边的那堆沙子高度肯定是1，所以沙子的摆放方式有两种，一种是从高度为H递减（每次-1），另一种是先增后减，像一个山的形状。可以发现每个部分都是一个d=1的等差数列。分析之后，就可以二分长度了。但要注意的是等差数列求和是x*(x+1)/2，因为数据n最大为1e18，所以右边界必须自己设置一个比如2e9，不然右边界直接用n是肯定会爆long long的。</p><ul><li><p>当枚举长度 x&lt;=H 时：最优的摆放是一个递减的等差数列，这样放的沙包最多（不理解可以画图看看</p></li><li><p>当枚举长度 x&gt;H 时:最优的摆放肯定就是一个山的形状了，但要当心当x-H为奇数的情况，最高点有两个并列的</p></li></ul><p>当H为3时，x=6：H 3 4 4 3 2 1 ，x=7 ：H 3 4 5 4 3 2 1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll cnt=<span class="number">2e9</span>;</span><br><span class="line">ll n,H;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=H) &#123;</span><br><span class="line"><span class="keyword">return</span> x*(x+<span class="number">1</span>)/<span class="number">2</span>&gt;=n;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ll a=(x+H)/<span class="number">2</span>;<span class="comment">//最高点</span></span><br><span class="line"><span class="keyword">if</span>((x-H)%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a*(a+<span class="number">1</span>)/<span class="number">2</span>+(a+H)*(a+<span class="number">1</span>-H)/<span class="number">2</span>&gt;=n;<span class="comment">//奇数</span></span><br><span class="line"><span class="keyword">return</span> a*(a+<span class="number">1</span>)/<span class="number">2</span>+(a<span class="number">-1</span>+H)*(a-H)/<span class="number">2</span>&gt;=n;<span class="comment">//偶数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;H);</span><br><span class="line">ll le=<span class="number">0</span>,ri=min(n+<span class="number">1</span>,cnt);</span><br><span class="line"><span class="keyword">while</span>(ri&gt;le) &#123; <span class="comment">//二分长度</span></span><br><span class="line">ll mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))</span><br><span class="line">ri=mid;</span><br><span class="line"><span class="keyword">else</span> le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;le&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1659 Frogs&#39; Neighborhood</title>
      <link href="2018/11/06/POJ%201659%20Frogs&#39;%20Neighborhood/"/>
      <url>2018/11/06/POJ%201659%20Frogs&#39;%20Neighborhood/</url>
      
        <content type="html"><![CDATA[<p>老师说是阿基米定律的题，根据每个点的度数判断这些点能不能构成图。</p><p>实则用起来我认为是一种贪心的思想，举个栗子：（首先不可能有点的度数为负</p><ul><li>（1）各个点的度数 4 3 1 5 4 2 1 （每次都从大到小排序）</li></ul><p>5 4 4 3 2 1 1，先解决度数最多的点他有5个邻居（是邻居，那度数-1），当然是优先考虑他后面的5个，因为是相较而言邻居（度数）比较多的，如果先考虑度数少的，那它的度数很快为负，显然不合理</p><p>3 3 2 1 1 0 -&gt; 2 1 1 0 0 -&gt; 0 0 0 0  最后变成了一个全是0的序列，说明各个点的度数恰好匹配，能构成一个所给序列度数的图。</p><ul><li>（2）各个点的度数 4 3 1 4 2 0</li></ul><p>4 4 3 2 1 0 -&gt; 3 2 1 0 0 -&gt;1 0 -1 0 出现一个点a的度数为负数了，说明这个图肯定构成不了了，因为是从大到小排序的，所以最大的点选择和a或a后面的点当邻居，都会使其度数为负</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;f[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> tt[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(S a,S b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num&gt;b.num; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">sort(f+i,f+<span class="number">1</span>+N,cmp);<span class="comment">//每次去掉一个最大的排序</span></span><br><span class="line"><span class="keyword">int</span> num=f[i].num;<span class="comment">//最大的那个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=i+num;++j)&#123;<span class="comment">//在这个数后面的num位都-1，减去一个度</span></span><br><span class="line">tt[f[i].id][f[j].id]=<span class="number">1</span>;<span class="comment">//标记一下他们是联通的</span></span><br><span class="line">tt[f[j].id][f[i].id]=<span class="number">1</span>;</span><br><span class="line">f[j].num--;<span class="comment">//度数-1</span></span><br><span class="line"><span class="keyword">if</span>(f[j].num&lt;<span class="number">0</span>)&#123;<span class="comment">//如果度数&lt;0了，则说明这个图不能联通了，因为度数不可能为负数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(tt,<span class="number">0</span>,<span class="keyword">sizeof</span>(tt));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;f[i].num;</span><br><span class="line">f[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(solve())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tt[i][j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1434 [SHOI2002]滑雪</title>
      <link href="2018/11/06/(Luogu)%20P1434%20%5BSHOI2002%5D%E6%BB%91%E9%9B%AA/"/>
      <url>2018/11/06/(Luogu)%20P1434%20%5BSHOI2002%5D%E6%BB%91%E9%9B%AA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1434#sub">https://www.luogu.org/problemnew/show/P1434#sub</a></p><p>这个题如果直接bfs或者dfs，因为每个点都要搜，所以必定会T，可以用个数组，类似记忆化搜索，去减少搜索时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> R,C,ans;</span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> Len[maxn][maxn];<span class="comment">//记录(i,j)点的最大深度，即从(i,j)点的为始下滑最长长度 </span></span><br><span class="line"><span class="keyword">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]= &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Len[i][j])<span class="keyword">return</span> Len[i][j];</span><br><span class="line">Len[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">4</span>; ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = i + dx[k];</span><br><span class="line"><span class="keyword">int</span> ny = j + dy[k];</span><br><span class="line"><span class="keyword">if</span> (nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=R&amp;&amp;ny&gt;=<span class="number">1</span>&amp;&amp;ny&lt;=C&amp;&amp;Map[i][j]&gt;Map[nx][ny])</span><br><span class="line">Len[i][j]=max(Len[i][j],<span class="number">1</span>+dfs(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Len[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;R,&amp;C);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Map[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(Len,<span class="number">0</span>,<span class="keyword">sizeof</span>(Len));</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j) &#123;</span><br><span class="line">ans=max(dfs(i,j),ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我一开始是每个点都去bfs一下，bfs的过程去不断更新起始点到到该点的最大长度，居然只T了两个点，其他的点跑的还挺快的</p><p>丧~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> R,C,ans;</span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> Len[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]= &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt; q;</span><br><span class="line">Len[i][j]=<span class="number">1</span>;</span><br><span class="line">T tmp;</span><br><span class="line">tmp.x=i,tmp.y=j;</span><br><span class="line">q.push(tmp);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">T tmp=q.front(),t;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> lle=Len[tmp.x][tmp.y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nx=tmp.x+dx[i];</span><br><span class="line"><span class="keyword">int</span> ny=tmp.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=R&amp;&amp;ny&gt;=<span class="number">1</span>&amp;&amp;ny&lt;=C&amp;&amp;Map[tmp.x][tmp.y]&gt;Map[nx][ny]) &#123;</span><br><span class="line">t.x=nx,t.y=ny;</span><br><span class="line"><span class="keyword">if</span>(Len[nx][ny]==<span class="number">0</span>)&#123;</span><br><span class="line">Len[nx][ny]=max(Len[nx][ny],lle+<span class="number">1</span>);</span><br><span class="line">q.push(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Len[nx][ny]&lt;lle+<span class="number">1</span>)&#123;</span><br><span class="line">Len[nx][ny]=max(Len[nx][ny],lle+<span class="number">1</span>);</span><br><span class="line">q.push(t);</span><br><span class="line">&#125;</span><br><span class="line">ans=max(ans,Len[nx][ny]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;R,&amp;C);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Map[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=C;++j)&#123;</span><br><span class="line"><span class="built_in">memset</span>(Len,<span class="number">0</span>,<span class="keyword">sizeof</span>(Len));</span><br><span class="line">bfs(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 2018 Best Cow Fences</title>
      <link href="2018/11/05/POJ%202018%20Best%20Cow%20Fences/"/>
      <url>2018/11/05/POJ%202018%20Best%20Cow%20Fences/</url>
      
        <content type="html"><![CDATA[<p>是一道经典的二分题（可我一开始并不会做 <a href="http://poj.org/problem?id=2018">http://poj.org/problem?id=2018</a></p><p>从题意来看很快就能分析出这是一道二分题，而且应该是二分答案，但难点就是如何在O（n）的复杂度内判断它是否满足条件，具体的解释我已经注释上了，还是不太清楚的，可以结合画图来看。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> N,F;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">double</span> tmp[maxn],ssum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> mid)</span></span>&#123;<span class="comment">//核心 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">tmp[i]=(<span class="keyword">double</span>)f[i]-mid;<span class="comment">//每个剪掉平均值，即去找有没有一段和&gt;=0且长度&gt;=F </span></span><br><span class="line">ssum[i]=ssum[i<span class="number">-1</span>]+tmp[i];<span class="comment">//前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">-1</span>,mmin=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=F;i&lt;=N;++i)&#123; <span class="comment">//以i为右端点，可取长度&gt;=F的，即左端点可以在1~i-F+1里取 </span></span><br><span class="line"><span class="comment">//不断跟新小于平均值的那一部分(前缀和越小，小于0，说明他达不到mid平均值</span></span><br><span class="line">mmin=min(mmin,ssum[i-F]); <span class="comment">//只会拉低平均值 </span></span><br><span class="line">ans=max(ans,ssum[i]-mmin);<span class="comment">//剪掉拉低平均值的，即得到以i为右端点最大的平均值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;F);</span><br><span class="line"><span class="keyword">int</span> mmax=<span class="number">-1</span>,mmin=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,f+i);</span><br><span class="line">mmax=max(mmax,f[i]);</span><br><span class="line">mmin=min(mmin,f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> le=<span class="keyword">double</span>(mmin),ri=<span class="keyword">double</span>(mmax);</span><br><span class="line"><span class="keyword">while</span>(ri-le&gt;(<span class="keyword">double</span>)<span class="number">1e-6</span>)&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(le+ri)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(cmp(mid))</span><br><span class="line">le=mid;</span><br><span class="line"><span class="keyword">else</span>ri=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)(ri*<span class="number">1000</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Div.2) C. Vasya and Robot</title>
      <link href="2018/11/05/Vasya%20and%20Robot/"/>
      <url>2018/11/05/Vasya%20and%20Robot/</url>
      
        <content type="html"><![CDATA[<p>这个题目第一眼看并不是一个二分，仔细思考一下，要枚举长度，然后又要枚举起点，这里已经是O(n^2)的复杂度了，还要判断是否满足条件，如果预处理了，是能在O(1)的复杂度解决的。所以枚举长度这边可以用一个二分，这样复杂度就是O(nlogn)了，可以解决这个题目。</p><p>如何在O(n)的复杂度判断这个长度满不满足要求呢？</p><p>枚举起点就要O(n)了，接下来就是O(1)判断O不OK；预处理到第i个字母时往右往上偏移了几位，那么枚举到一段区间的时候，我们可以将那一段区间的操作全部撤销（反正全改，长度也是len），那么此时的位置移到目标点最少的操作num 就是现在的位置和终点在X轴上的偏移量+Y轴上的偏移量，如果len&gt;num,那么len-num一定要是偶数，这样上下左右才可以抵消。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,ex,ey;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></span><br><span class="line">ll r,u;</span><br><span class="line">&#125;f[maxn]; </span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;++i)&#123;</span><br><span class="line">ll rr=f[i+len<span class="number">-1</span>].r-f[i<span class="number">-1</span>].r,uu=f[i+len<span class="number">-1</span>].u-f[i<span class="number">-1</span>].u;<span class="comment">//区间r和u的偏移量</span></span><br><span class="line">ll num=<span class="built_in">abs</span>(ex-(f[n].r-rr))+<span class="built_in">abs</span>(ey-(f[n].u-uu));<span class="comment">//所需要的最小操作数</span></span><br><span class="line"><span class="keyword">if</span>(len&gt;=num&amp;&amp;(len-num)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="comment">//说明可以走到终点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line">f[<span class="number">0</span>].r=<span class="number">0</span>,f[<span class="number">0</span>].u=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);<span class="comment">//预处理</span></span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;R&#x27;</span>)f[i].r=f[i<span class="number">-1</span>].r+<span class="number">1</span>,f[i].u=f[i<span class="number">-1</span>].u;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;L&#x27;</span>)f[i].r=f[i<span class="number">-1</span>].r<span class="number">-1</span>,f[i].u=f[i<span class="number">-1</span>].u;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;U&#x27;</span>)f[i].u=f[i<span class="number">-1</span>].u+<span class="number">1</span>,f[i].r=f[i<span class="number">-1</span>].r;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;D&#x27;</span>)f[i].u=f[i<span class="number">-1</span>].u<span class="number">-1</span>,f[i].r=f[i<span class="number">-1</span>].r;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;ex,&amp;ey);</span><br><span class="line"><span class="keyword">if</span>(f[n].r==ex&amp;&amp;f[n].u==ey)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> le=<span class="number">0</span>,ri=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ri&gt;le)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(le+ri)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(pd(mid))ri=mid;</span><br><span class="line"><span class="keyword">else</span>le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;le&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) E 诡异数字（数位dp）</title>
      <link href="2018/10/21/(Nowcoder)%20E%20%E8%AF%A1%E5%BC%82%E6%95%B0%E5%AD%97/"/>
      <url>2018/10/21/(Nowcoder)%20E%20%E8%AF%A1%E5%BC%82%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>牛客小白月赛8真的打的自闭了，感觉一点都不小白 T_T (肯定是我太菜了，没错就是这样的)</p><p>题目链接https://www.nowcoder.com/acm/contest/214/E</p><p>题解说这是一个非常简单的数位dp，没接触过，感觉挺难的（大概这就是菜吧）</p><p>先稍微了解了一下数位dp，附上写的非常好的数位dp详解https://blog.csdn.net/wust_zzwh/article/details/52100392</p><p>然后看懂了大佬的代码，敲了一下再附上了我的理解.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">20020219</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll lim[<span class="number">20</span>],len[<span class="number">20</span>];<span class="comment">//lim分别记录每个数的最大重复次数，没有就置大 </span></span><br><span class="line">ll a[<span class="number">100</span>][<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//len将数存入数组，每个位置也代表着上限 </span></span><br><span class="line"><span class="comment">//  pos   pre   num</span></span><br><span class="line"><span class="comment">// 记录着位数为pos(包括前导0，0012也算4位数)，前驱是pre，前驱重复数为num的满足条件的个数</span></span><br><span class="line"><span class="comment">// pos位的每一个位置的范围都是0-9，(就是代表完整的pos位数) </span></span><br><span class="line">ll le,ri,n; </span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">bool</span> limit,<span class="keyword">int</span> pre,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;lim[pre])<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//超过pre允许出现的最大次数，返回0 </span></span><br><span class="line"><span class="keyword">if</span>(pos==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 0位返回1 </span></span><br><span class="line"><span class="keyword">if</span>(!limit &amp;&amp; a[pos][pre][num]!=<span class="number">-1</span>) <span class="keyword">return</span> a[pos][pre][num];<span class="comment">//前驱不是上限，而且被更新过直接用 </span></span><br><span class="line"><span class="comment">//如果前驱是上限，则后面上限也受到限制，不是一个完整的pos位，故不可用 </span></span><br><span class="line"><span class="keyword">int</span> up=limit?len[pos]:<span class="number">9</span>; <span class="comment">//如果前驱达到上限，则这个位置的上限为解决数的上限</span></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;++i) &#123;</span><br><span class="line">sum=(sum+dfs(pos<span class="number">-1</span>,limit&amp;&amp;i==len[pos],i,i==pre?num+<span class="number">1</span>:<span class="number">1</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> limit?sum:a[pos][pre][num]=sum;<span class="comment">//前驱不是上限就更新，否则直接return </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll xx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xx==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ll cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(xx)&#123;</span><br><span class="line">len[++cnt]=xx%<span class="number">10</span>;<span class="comment">//每一位放入数组，cnt代表位数 </span></span><br><span class="line">xx/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len[cnt];++i)&#123;<span class="comment">//最高位从0-len[cnt]枚举 </span></span><br><span class="line">ans=(ans+dfs(cnt<span class="number">-1</span>,i==len[cnt],i,<span class="number">1</span>))%mod;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">fill(lim,lim+<span class="number">11</span>,<span class="number">0xffffffff</span>);</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;le,&amp;ri,&amp;n);</span><br><span class="line">ll xx,max_num;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;xx,&amp;max_num);</span><br><span class="line">lim[xx]=min(lim[xx],max_num);<span class="comment">//更新 xx最大能出现lim[xx]次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(solve(ri)-solve(le<span class="number">-1</span>)+mod)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round</title>
      <link href="2018/10/06/Codeforces%20Round%20#514/"/>
      <url>2018/10/06/Codeforces%20Round%20#514/</url>
      
        <content type="html"><![CDATA[<h2 id="a-cashier"><a class="markdownIt-Anchor" href="#a-cashier"></a> A. Cashier</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,L,a; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;L,&amp;a);</span><br><span class="line"><span class="keyword">int</span> le=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s,h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;h);</span><br><span class="line">num+=(s-le)/a;</span><br><span class="line">le=s+h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L&gt;le)&#123;</span><br><span class="line">num+=(L-le)/a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="b-forgery"><a class="markdownIt-Anchor" href="#b-forgery"></a> B. Forgery</h2><p>我是先记录了要填的地方和不能填的地方，然后去把能填的地方全都填起来，最后检查一下 如果还是有的要填的地方还没被填好，那就NO，否则YES</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> M[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> xx[]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> yy[]=&#123;<span class="number">1</span> ,<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">look</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(M[x+xx[i]][y+yy[i]]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">flag2=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(M[x+xx[i]][y+yy[i]]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">flag1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag1&amp;&amp;flag2)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line">M[x+xx[i]][y+yy[i]]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">char</span> tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tt;</span><br><span class="line"><span class="keyword">if</span>(tt==<span class="string">&#x27;#&#x27;</span>)M[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span>M[i][j]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">3</span>||m&lt;<span class="number">3</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m<span class="number">-1</span>;++j)&#123;</span><br><span class="line">look(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(M[i][j]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-sequence-transformation"><a class="markdownIt-Anchor" href="#c-sequence-transformation"></a> C. Sequence Transformation</h2><p>一段连续数的最大公约数是1，所以第一步肯定是要把1先删除，要不然最大公约数不可能超过1，接下来最想让他出现的最大公约数是2（因为是字典序），所有偶数都可以被2整除，而一串奇数的最大公约数就是1了（除了n==3这种情况，特判一下），很明显接下来的就是将奇数全部删除，而剩下的偶数每次将间隔的删去，公约数就会乘2（比如2 4 6 8 10，删除2 6 10）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="comment">//const ll maxn=1e5+5;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,res=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>,res,res,res*<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>+n%<span class="number">2</span>;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,res);</span><br><span class="line">n/=<span class="number">2</span>;</span><br><span class="line">res*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018徐州网络赛F,H,I</title>
      <link href="2018/09/11/2018%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
      <url>2018/09/11/2018%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>只能来划水，只做了3题。</p><p>F：队友切的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> line,k,T,ans,x,y,len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;line);</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=line;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(!mp[<span class="built_in">make_pair</span>(x,y)].empty()&amp;&amp;mp[<span class="built_in">make_pair</span>(x,y)].back() ==i ) <span class="keyword">continue</span>;</span><br><span class="line">mp[<span class="built_in">make_pair</span>(x,y)].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v=it-&gt;second; </span><br><span class="line"><span class="keyword">if</span>(!v.size()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.size(); ++i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (v[i]-v[i - <span class="number">1</span>]==<span class="number">1</span>)len++;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">ans = max(ans, len);</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>H：所求的答案就是从l开始的前缀和，用线段树维护前缀和就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100007  <span class="comment">//元素总个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls l,m,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs m+1,r,rt&lt;&lt;1|1</span></span><br><span class="line">ll Sum[maxn&lt;&lt;<span class="number">2</span>],Add[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//Sum求和，Add为懒惰标记 </span></span><br><span class="line">ll A[maxn];<span class="comment">//存原数组数据下标[1,n] </span></span><br><span class="line">ll X[maxn];</span><br><span class="line">ll n,q;</span><br><span class="line"><span class="comment">//PushUp函数更新节点信息 ，这里是求和</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(ll rt)</span></span>&#123;Sum[rt]=Sum[rt&lt;&lt;<span class="number">1</span>]+Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(ll rt,ll ln,ll rn)</span></span>&#123;</span><br><span class="line"><span class="comment">//ln,rn为左子树，右子树的数字数量。 </span></span><br><span class="line"><span class="keyword">if</span>(Add[rt])&#123;</span><br><span class="line"><span class="comment">//下推标记 </span></span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>]+=Add[rt];</span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt];</span><br><span class="line"><span class="comment">//修改子节点的Sum使之与对应的Add相对应 </span></span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>]+=Add[rt]*ln;</span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt]*rn;</span><br><span class="line"><span class="comment">//清除本节点标记 </span></span><br><span class="line">Add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Build函数建树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(ll l,ll r,ll rt)</span></span>&#123; <span class="comment">//l,r表示当前节点区间，rt表示当前节点编号</span></span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;<span class="comment">//若到达叶节点 </span></span><br><span class="line">Sum[rt]=A[l];<span class="comment">//储存数组值 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//左右递归 </span></span><br><span class="line">Build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="comment">//更新信息 </span></span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(ll L,ll R,ll C,ll l,ll r,ll rt)</span></span>&#123;<span class="comment">//L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;<span class="comment">//如果本区间完全在操作区间[L,R]以内 </span></span><br><span class="line">Sum[rt]+=C*(r-l+<span class="number">1</span>);<span class="comment">//更新数字和，向上保持正确</span></span><br><span class="line">Add[rt]+=C;<span class="comment">//增加Add标记，表示本区间的Sum正确，子区间的Sum仍需要根据Add的值来调整</span></span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m);<span class="comment">//下推标记</span></span><br><span class="line"><span class="comment">//这里判断左右子树跟[L,R]有无交集，有交集才递归 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,R,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) Update(L,R,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">PushUp(rt);<span class="comment">//更新本节点信息 </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">Query</span><span class="params">(ll L,ll R,ll l,ll r,ll rt)</span></span>&#123;<span class="comment">//L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="comment">//在区间内，直接返回 </span></span><br><span class="line"><span class="keyword">return</span> Sum[rt];</span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//下推标记，否则Sum可能不正确</span></span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m); </span><br><span class="line"></span><br><span class="line"><span class="comment">//累计答案</span></span><br><span class="line">ll ANS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) ANS+=Query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) ANS+=Query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ANS;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">ll temp;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,X+i);</span><br><span class="line">A[i]=A[i<span class="number">-1</span>]+X[i];</span><br><span class="line">&#125;</span><br><span class="line">Build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ll x,y,z;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;q;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123;<span class="comment">//查询 </span></span><br><span class="line">ll count=z-y+<span class="number">1</span>;</span><br><span class="line">ll ans=Query(y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=ans-count*(Query(y<span class="number">-1</span>,y<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//修改 </span></span><br><span class="line">ll ago=X[y];</span><br><span class="line">X[y]=z;</span><br><span class="line">ll change=z-ago;</span><br><span class="line">Update(y,n,change,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I:ans是0的时候结果是1，结果导致Wa了12发。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>,&amp;N,&amp;ch);</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>((<span class="keyword">int</span>)(ch-s[i]))!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = (N-i)*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>((<span class="keyword">int</span>)(ch-s[i]))&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans==<span class="number">0</span>?<span class="number">1</span>:ans);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ string字符串截取</title>
      <link href="2018/09/05/C++%20string%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/"/>
      <url>2018/09/05/C++%20string%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>很久没写题连string字符串的截取都忘了；</p><p>附上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;abaacd&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> res=s.substr(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//从第一个位置截取4个字符串</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//输出 baac </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>再附上一题http://codeforces.com/contest/1029/problem/A感觉自己写的挺麻烦的饿。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="keyword">int</span> k,t;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;k&gt;&gt;t&gt;&gt;s)&#123;</span><br><span class="line"><span class="built_in">string</span> res=s;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;s.size();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[<span class="number">0</span>])&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;i: &quot;&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;s.size();++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[num]!=s[j])&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=s.size())&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=s.size())&#123;</span><br><span class="line">temp=s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t<span class="number">-1</span>;++k)&#123;</span><br><span class="line">res+=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">temp=s.substr(num,s.size()-num);</span><br><span class="line"><span class="comment">//cout&lt;&lt;temp&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t<span class="number">-1</span>;++k)&#123;</span><br><span class="line">res+=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">res.clear();</span><br><span class="line">temp.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树prim&amp;&amp;kruscal 和 模板题</title>
      <link href="2018/09/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91&amp;%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
      <url>2018/09/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91&amp;%E6%A8%A1%E6%9D%BF%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这是我原来的prim太不优美了，今天重打一发</p><p>最小生成树两种算法的原理可以看https://www.cnblogs.com/adforce/p/3247437.html写的很好很清楚，我就不班门弄斧了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=INT_MAX;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="keyword">int</span> dir[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;<span class="comment">//存取路径 </span></span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn]=&#123; &#123;INF,<span class="number">7</span>,<span class="number">4</span>,INF,INF,INF&#125;,  <span class="comment">//INF代表两点之间不可达</span></span><br><span class="line">&#123;<span class="number">7</span>,INF,<span class="number">6</span>,<span class="number">2</span>,INF,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">6</span>,INF,INF,<span class="number">9</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;INF,<span class="number">2</span>,INF,INF,INF,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;INF,INF,<span class="number">9</span>,INF,INF,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;INF,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">1</span>,INF&#125;</span><br><span class="line">&#125;;<span class="comment">//连通情况</span></span><br><span class="line"><span class="function">ll <span class="title">prim</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;<span class="comment">//返回最小生成树的路径和 </span></span><br><span class="line">path.clear();</span><br><span class="line">path.push_back(cur);</span><br><span class="line"><span class="comment">//cout&lt;&lt;cur&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> root=cur;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit)); </span><br><span class="line">visit[cur]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">dir[i]=Map[root][i];<span class="comment">//初始化各个点到树的长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;maxn;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=INF;</span><br><span class="line"><span class="keyword">int</span> aid;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;maxn;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visit[j]&amp;&amp;dir[j]&lt;temp)&#123;<span class="comment">//找到到这棵树距离最小奥德点</span></span><br><span class="line">aid=j;</span><br><span class="line">temp=dir[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res+=temp;</span><br><span class="line">visit[aid]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;aid&lt;&lt;endl;</span></span><br><span class="line">path.push_back(aid);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;maxn;++j)&#123;<span class="comment">//更新各个点到这棵树的路径</span></span><br><span class="line"><span class="keyword">if</span>(!visit[j]&amp;&amp;dir[j]&gt;Map[aid][j])&#123;</span><br><span class="line">dir[j]=Map[aid][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;path.size()<span class="number">-1</span>;++i)<span class="comment">//打印路径，或者直接上面的cout就行了 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;path[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;path[path.size()<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//填充Map</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;prim(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> prim</h1><p>瞟了一手基友的代码，用优先队列优化了，所以比原来的prime效率更高。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">7</span>; </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;a.val;<span class="comment">//优先队列默认从大到小 </span></span><br><span class="line">&#125;<span class="comment">//所以反一下让他从小到大排序 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">1</span>].size();++i)&#123;</span><br><span class="line">q.push(G[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[tmp.to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[tmp.to]=<span class="number">1</span>;</span><br><span class="line">ans+=tmp.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[tmp.to].size();++i)&#123;</span><br><span class="line">q.push(G[tmp.to][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//填邻接表 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;prim()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="kruscal"><a class="markdownIt-Anchor" href="#kruscal"></a> kruscal</h1><p>感觉并查集加不加入按秩合并，对效率的影响并不是很高（欢迎指正</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,father[size],rankk[size]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//边 </span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">node(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)</span></span>&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;edge[size*size/<span class="number">2</span>];<span class="comment">//如果给了边的数量，则用给的，否则会爆 </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">father[i]=i;</span><br><span class="line">rankk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//查找父亲节点顺便路径压缩 </span></span><br><span class="line"><span class="keyword">if</span>(x!=father[x])&#123;</span><br><span class="line">father[x]=find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//合并x,y所在的两个集合：利用Find_Set找到其中两个</span></span><br><span class="line"><span class="comment">//集合的祖先，将一个集合的祖先指向另一个集合的祖先。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//按秩合并</span></span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//不用按秩合并</span></span><br><span class="line">father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">if(rankk[x]&lt;rankk[y])&#123;</span></span><br><span class="line"><span class="comment">father[x]=find(y);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else&#123;</span></span><br><span class="line"><span class="comment">if(rankk[x]==rankk[y])&#123;</span></span><br><span class="line"><span class="comment">rankk[x]++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">father[y]=find(x);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为边的数量 </span></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">make_set();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(find(edge[i].s)!=find(edge[i].e))&#123;</span><br><span class="line">Union(edge[i].s,edge[i].e);</span><br><span class="line">sum+=edge[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//边的数量 </span></span><br><span class="line"><span class="comment">//建边 </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">sort(edge,edge+cnt,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruskal(cnt)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>大佬的总结：</p><p>方法上：Kruskal在所有边中不断寻找最小的边，Prim在U和V两个集合之间寻找权值最小的连接，共同点是构造过程都不能形成环。</p><p>时间上：Prim适合稠密图，复杂度为O(n * n)，因此通常使用邻接矩阵储存，复杂度为O(e * loge)，而Kruskal多用邻接表，稠密图 Prim &gt; Kruskal，稀疏图 Kruskal &gt; Prim。</p><p>空间上： Prim适合点少边多，Kruskal适合边多点少。</p><p>附上几到板子题，供君测试练习</p><p><a href="http://hihocoder.com/problemset/problem/1097">http://hihocoder.com/problemset/problem/1097</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">7</span>; </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> t,<span class="keyword">int</span> v)&#123;</span><br><span class="line">to=t,val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">to=t,val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;a.val;<span class="comment">//优先队列默认从大到小 </span></span><br><span class="line">&#125;<span class="comment">//所以反一下让他从小到大排序 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">1</span>].size();++i)&#123;</span><br><span class="line">q.push(G[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[tmp.to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[tmp.to]=<span class="number">1</span>;</span><br><span class="line">ans+=tmp.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[tmp.to].size();++i)&#123;</span><br><span class="line">q.push(G[tmp.to][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">G[i].push_back(node(j,v));</span><br><span class="line">G[j].push_back(node(i,v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;prim()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://hihocoder.com/problemset/problem/1098">http://hihocoder.com/problemset/problem/1098</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> father[size],rankk[size]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//边 </span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">node(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)</span></span>&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;edge[<span class="number">1000005</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">father[i]=i;</span><br><span class="line">rankk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//查找父亲节点顺便路径压缩 </span></span><br><span class="line"><span class="keyword">if</span>(x!=father[x])&#123;</span><br><span class="line">father[x]=find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//合并x,y所在的两个集合：利用Find_Set找到其中两个</span></span><br><span class="line"><span class="comment">//集合的祖先，将一个集合的祖先指向另一个集合的祖先。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//按秩合并</span></span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//不用按秩合并</span></span><br><span class="line">father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(rankk[x]&lt;rankk[y])&#123;</span></span><br><span class="line"><span class="comment">//father[x]=find(y);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//if(rankk[x]==rankk[y])&#123;</span></span><br><span class="line"><span class="comment">//rankk[x]++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//father[y]=find(x);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为边的数量 </span></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(find(edge[i].s)!=find(edge[i].e))&#123;</span><br><span class="line">Union(edge[i].s,edge[i].e);</span><br><span class="line">sum+=edge[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//边的数量 </span></span><br><span class="line"><span class="comment">//建边 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">make_set(N+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ss,ee,val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;ss,&amp;ee,&amp;val);</span><br><span class="line">edge[i].setall(val,ss,ee);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge,edge+cnt,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruskal(cnt)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>HDU 1232畅通工程http://acm.hdu.edu.cn/showproblem.php?pid=1232</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">node()&#123;</span><br><span class="line">&#125;</span><br><span class="line">node(<span class="keyword">int</span> t,<span class="keyword">int</span> v)&#123;</span><br><span class="line">to=t;</span><br><span class="line">val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">to=t;</span><br><span class="line">val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;a.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">1</span>].size();++i)&#123;</span><br><span class="line">q.push(G[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node t=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[t.to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[t.to]=<span class="number">1</span>;</span><br><span class="line">res+=t.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[t.to].size() ;++i)&#123;</span><br><span class="line">q.push(G[t.to][i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;d);</span><br><span class="line">G[x].push_back(node(y,d));</span><br><span class="line">G[y].push_back(node(x,d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;?&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=prim();</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;m)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;?&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>HDU 1879继续畅通工程http://acm.hdu.edu.cn/showproblem.php?pid=1879</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">106</span>;</span><br><span class="line"><span class="keyword">int</span> father[maxn],rankk[maxn];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">node() &#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> ns,<span class="keyword">int</span> ne,<span class="keyword">int</span> v) &#123;</span><br><span class="line">s=ns,e=ne,val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> ns,<span class="keyword">int</span> ne,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">s=ns,e=ne,val=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125; edge[maxn*maxn&gt;&gt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">father[i]=i;</span><br><span class="line">rankk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=father[x]) &#123;</span><br><span class="line">father[x]=find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(rankk[x]&lt;rankk[y])&#123;</span><br><span class="line">father[x]=find(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rankk[x]==rankk[y])&#123;</span><br><span class="line">rankk[x]++;</span><br><span class="line">&#125;</span><br><span class="line">father[y]=find(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(find(edge[i].s)!=find(edge[i].e)) &#123;</span><br><span class="line">Union(edge[i].s,edge[i].e);</span><br><span class="line">ans+=edge[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N)!=EOF&amp;&amp;N) &#123;</span><br><span class="line">make_set(<span class="number">105</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N*(N<span class="number">-1</span>)/<span class="number">2</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x,y,v,p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v,&amp;p);</span><br><span class="line">edge[i].setall(x,y,v);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span>) &#123;</span><br><span class="line">father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge,edge+N*(N<span class="number">-1</span>)/<span class="number">2</span>,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruskal(N*(N<span class="number">-1</span>)/<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 高效位运算函数 之 __builtin_</title>
      <link href="2018/08/09/builtin%E5%87%BD%E6%95%B0/"/>
      <url>2018/08/09/builtin%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>1.int ffs(ui x){//该函数判断n的二进制末尾最后一个1的位置，从一开始<br />return __builtin_ffs(x);<br />}</p><p>2.int popcount(ui x){//该函数时判断n的二进制中有多少个1<br />return __builtin_popcount(x);<br />}</p><p>3.int ctz(ui x){//该函数判断n的二进制末尾后面0的个数，当x为0时，和x的类型有关<br />return __builtin_ctz(x);<br />}</p><p>4.int clz(ui x){//x前导0的个数。x=0时和x的类型有关<br />return __builtin_clz(x);<br />}</p><p>5.int parity(ui x){//该函数是判断n的二进制中1的个数的奇偶性<br />return __builtin_parity(x);<br />}</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffs</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数判断n的二进制末尾最后一个1的位置，从一开始</span></span><br><span class="line"><span class="keyword">return</span> __builtin_ffs(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popcount</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数时判断n的二进制中有多少个1</span></span><br><span class="line"><span class="keyword">return</span> __builtin_popcount(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ctz</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数判断n的二进制末尾后面0的个数，当n为0时，和n的类型有关</span></span><br><span class="line"><span class="keyword">return</span> __builtin_ctz(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clz</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//x前导0的个数。x=0时结果未定义。</span></span><br><span class="line"><span class="keyword">return</span> __builtin_clz(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parity</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数是判断n的二进制中1的个数的奇偶性</span></span><br><span class="line"><span class="keyword">return</span> __builtin_parity(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_ffs : &quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ffs(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1二进制1   /输出1 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ffs(<span class="number">8</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//8二进制1000   /输出4 </span></span><br><span class="line"><span class="comment">//要是要输出最后一个一的位置应当-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_popcount : &quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;popcount(<span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1111  /输出4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_ctz :&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ctz(<span class="number">8</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1000 /输出3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_clz :&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;clz(<span class="number">8</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//...1000 /输出28 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_parity :&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;parity(<span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1111 /偶数个，输出0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;parity(<span class="number">7</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//111 /奇数个，输出1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 2018牛课多校第三场A.C.H</title>
      <link href="2018/07/26/(Nowcoder)%E7%89%9B%E8%AF%BE%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
      <url>2018/07/26/(Nowcoder)%E7%89%9B%E8%AF%BE%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>又一次成功的签到了（大哭~~~~~~）只做了2题然后就一直挂机了，会的慢慢补吧。</p><h2 id="a-pacm-team"><a class="markdownIt-Anchor" href="#a-pacm-team"></a> A PACM Team</h2><p>好吧，从一开始就看错了题目，这是一个四维背包问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, P, A, C, M, p[N], a[N], c[N], m[N], g[N], f[N][N][N][N];</span><br><span class="line"><span class="comment">//f数组记录p,a,c,m人数有N，N，N，N人时的最大取值 </span></span><br><span class="line"><span class="keyword">bool</span> h[N][N][N][N][N];<span class="comment">//记录路径 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; a[i] &gt;&gt; c[i] &gt;&gt; m[i] &gt;&gt; g[i];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; P &gt;&gt; A &gt;&gt; C &gt;&gt; M;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> jp = P; jp &gt;= p[i]; jp --)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ja = A; ja &gt;= a[i]; ja --)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> jc = C; jc &gt;= c[i]; jc --)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> jm = M; jm &gt;= m[i]; jm --)</span><br><span class="line">                        <span class="keyword">if</span> (f[jp - p[i]][ja - a[i]][jc - c[i]][jm - m[i]] + g[i] &gt; f[jp][ja][jc][jm])</span><br><span class="line">                        &#123;</span><br><span class="line">                            f[jp][ja][jc][jm] = f[jp - p[i]][ja - a[i]][jc - c[i]][jm - m[i]] + g[i];</span><br><span class="line">                            h[i][jp][ja][jc][jm] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">    <span class="keyword">int</span> ans[N];</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --)<span class="comment">//恢复路径 即取的队伍 </span></span><br><span class="line">        <span class="keyword">if</span> (h[i][P][A][C][M])</span><br><span class="line">        &#123;</span><br><span class="line">            ans[++ ans[<span class="number">0</span>]] = i - <span class="number">1</span>;</span><br><span class="line">            P -= p[i];</span><br><span class="line">            A -= a[i];</span><br><span class="line">            C -= c[i];</span><br><span class="line">            M -= m[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i ++) <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-shuffle-cards"><a class="markdownIt-Anchor" href="#c-shuffle-cards"></a> C Shuffle Cards</h2><p>rope大法好啊，stl大法好啊，不过还是得去学习一下splay啊</p><p>贴一个rope 不了解的可以戳一下https://blog.csdn.net/iamzky/article/details/38348653</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">rope&lt;<span class="keyword">int</span>&gt; R;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) R.push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        R = R.substr(a<span class="number">-1</span>, b) + R.substr(<span class="number">0</span>, a<span class="number">-1</span>) + R.substr(a+b<span class="number">-1</span>, n-a-b+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, R[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>splay代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, root, ch[maxn][<span class="number">2</span>], s[maxn], v[maxn];</span><br><span class="line"><span class="keyword">bool</span> rev[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ch[o][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ch[o][1]</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; </span><br><span class="line">s[o] = s[lc] + s[rc] + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>&amp; o, <span class="keyword">int</span> d)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> k = ch[o][d^<span class="number">1</span>]; ch[o][d^<span class="number">1</span>] = ch[k][d]; ch[k][d] = o; </span><br><span class="line">maintain(o); maintain(k); o = k;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">rev[o] ^= <span class="number">1</span>; </span><br><span class="line">rev[lc] ^= <span class="number">1</span>; </span><br><span class="line">rev[rc] ^= <span class="number">1</span>; </span><br><span class="line">swap(lc, rc); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(s[lc] + <span class="number">1</span> == k) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"><span class="keyword">return</span> k &lt; s[lc] + <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span>&amp; o, <span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[o]) pushdown(o); <span class="comment">//notice</span></span><br><span class="line"><span class="keyword">int</span> d = cmp(o, k);</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">1</span>) k -= s[lc] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p = ch[o][d];</span><br><span class="line"><span class="keyword">if</span>(rev[p]) pushdown(p); <span class="comment">//notice</span></span><br><span class="line"><span class="keyword">int</span> d2 = cmp(p, k);</span><br><span class="line"><span class="keyword">int</span> k2 = (d2 == <span class="number">0</span>) ? k : k-s[ch[p][<span class="number">0</span>]]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(d2 != <span class="number">-1</span>) &#123;</span><br><span class="line">splay(ch[p][d2], k2);</span><br><span class="line"><span class="keyword">if</span>(d == d2) rotate(o, d^<span class="number">1</span>); <span class="keyword">else</span> rotate(ch[o][d], d);</span><br><span class="line">&#125;</span><br><span class="line">rotate(o, d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span>&amp; o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">splay(o, L); </span><br><span class="line">splay(rc, R - s[lc] + <span class="number">1</span>); <span class="comment">//R+2 - (s[lc]+1)</span></span><br><span class="line">rev[ch[rc][<span class="number">0</span>]] ^= <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line"><span class="keyword">if</span>(L == R) cur = L;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cur = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= cur - <span class="number">1</span>) build(L, cur - <span class="number">1</span>, cur, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">if</span>(cur + <span class="number">1</span> &lt;= R) build(cur + <span class="number">1</span>, R, cur, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">maintain(cur);</span><br><span class="line">ch[p][d] = cur;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> o)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[o]) pushdown(o);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lc) print(lc);</span><br><span class="line"><span class="keyword">if</span>(v[o] != INF) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v[o]);</span><br><span class="line"><span class="keyword">if</span>(rc) print(rc);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">v[<span class="number">1</span>] = v[n + <span class="number">2</span>] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) v[i + <span class="number">1</span>] = i;</span><br><span class="line"></span><br><span class="line">build(<span class="number">1</span>, n + <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">root = (n + <span class="number">3</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l, len;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;len);</span><br><span class="line">rever(root, <span class="number">1</span>,l+len<span class="number">-1</span>);</span><br><span class="line">rever(root,<span class="number">1</span>,len);</span><br><span class="line">rever(root,len+<span class="number">1</span>,l+len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用三次区间翻转，解决平移，不懂得画个图，举个栗子就行了。</p><h2 id="h-diff-prime-pairs"><a class="markdownIt-Anchor" href="#h-diff-prime-pairs"></a> H Diff-prime Pairs</h2><p><img src="https://uploadfiles.nowcoder.com/files/20180717/305345_1531803986831_equation?tex=%5Cfrac%7Bi%7D%7Bgcd%28i%2C%20j%29%7D" alt="img" /> =k1(素数)        <img src="https://uploadfiles.nowcoder.com/files/20180717/305345_1531803986872_equation?tex=%5Cfrac%7Bj%7D%7Bgcd%28i%2Cj%29%7D" alt="img" />=k2(素数）</p><p>相除得到 i/j=k1/k2   当i和j同时乘以一个数t时也是满足这个等式，可知ti 与 tj也是满足条件的一个数对</p><p>所以当我们找到两个在1~n 范围内的素数a,b时，他们的倍数也是满足条件的，那么有几对呢，对数的个数当然是由数值较大的决定，就是n/max（a,b)；</p><p>思路：先求出所给1~n的所有素数 存入数组（2，3，5，7…）</p><p>第一个素数2前面时没有和他配对的，那就从3开始。当算到第i个素数temp时，计算出1~n是temp倍数的个数，然后再乘以temp前面素数的个数（比temp小的素数肯定可以找到和temp相同倍数的数的）。最后不要忘记*2，此题就ok了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000005</span></span><br><span class="line"><span class="keyword">int</span> prime[MAX];<span class="comment">//存放素数 </span></span><br><span class="line"><span class="keyword">bool</span> check[MAX];<span class="comment">//判断是不是素数 0为不是素数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check[i])</span><br><span class="line">                prime[count++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i*prime[j] &gt; MAX)</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 过大的时候跳出</span></span><br><span class="line">                check[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> ((i%prime[j]) == <span class="number">0</span>) <span class="comment">// 如果i是一个合数，而且i % prime[j] == 0</span></span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> all=solve(n);<span class="comment">//素数的个数 </span></span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;all;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=n/prime[i];<span class="comment">//计算出1~n是prime[i]倍数的个数 </span></span><br><span class="line">res+=temp*i;<span class="comment">//乘以出现在prime[i]前面素数的个数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res*<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//(x,y)和(y,x)算两种 所以乘以2 </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(一维&amp;二维&amp;三维)树状数组及其模板 整理</title>
      <link href="2018/07/23/(%E4%B8%80%E7%BB%B4&amp;%E4%BA%8C%E7%BB%B4&amp;%E4%B8%89%E7%BB%B4)%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8F%8A%E5%85%B6%E6%A8%A1%E6%9D%BF/"/>
      <url>2018/07/23/(%E4%B8%80%E7%BB%B4&amp;%E4%BA%8C%E7%BB%B4&amp;%E4%B8%89%E7%BB%B4)%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8F%8A%E5%85%B6%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="一维树状数组"><a class="markdownIt-Anchor" href="#一维树状数组"></a> 一维树状数组</h1><blockquote><p>学习来自https://www.bilibili.com/video/av18735440?from=search&amp;seid=12510069409139918776电子科技大学算法讲堂</p></blockquote><blockquote><p><a href="https://www.cnblogs.com/RabbitHu/p/BIT.html%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BE%B5%E5%88%A0%EF%BC%8C%E6%9C%AC%E6%96%87%E6%8E%A8%E7%90%86%E9%83%BD%E6%9D%A5%E8%87%AA%E8%AF%A5%E6%96%87%E3%80%82">https://www.cnblogs.com/RabbitHu/p/BIT.html大佬的文章，侵删，本文推理都来自该文。</a></p></blockquote><p>这里d数组是我的树状数组,a数组就是初始数组了，让你修改查询的。</p><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=760882210,3135546395&amp;fm=26&amp;gp=0.jpg" alt="img0" /></p><p>​      这就是树状数组的存储方式，不难看出它的存储是和二进制有关的（滑稽，好看出个鬼）举个栗子d[6]=a[5]+a[6]; （6的二进制数是110，末尾一个0，那d[6]就是存储2^1个元素的和） 同理我们也可以验证d[8]=a[1]+…a[8] (因为8的二进制数是1000，有3个零，就是存储2^3个) ； 而查询前缀和，就需要用到lowbit这个函数，非常巧妙，视频说的非常清楚。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125; </span><br><span class="line">x-=lowbit(x);</span><br><span class="line"><span class="keyword">or</span> x+=lowbit(x);</span><br></pre></td></tr></table></figure><p>也可以直接使用 x+=x&amp;(-x) or x-=x&amp;(-x)</p><p>比如查询13这个位置的前缀和 13的二进制数为1101，我们将其拆分为（lowbit就是在此起着至关重要的作用，取得最后一个1）</p><p>1101          d[13]        a[13]         //从后往前以1为末尾，后面全是0</p><p>1100          d[12]        a[9]+a[12]</p><p>1000          d[8]         a[1]+…a[8]</p><p>所以前13的前缀和就是 d[13] +d[12] +d[8]</p><p>而修改和查询的顺序是反的。</p><p><em>这里我搬运了大佬的代码</em></p><h2 id="单点修改区间查询"><a class="markdownIt-Anchor" href="#单点修改区间查询"></a> 单点修改+区间查询</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单点修改+区间查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line">ll sum[maxn],n;<span class="comment">//数组从1开始到n </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//给位置p增加x</span></span><br><span class="line">    <span class="keyword">while</span>(p &lt;= n) sum[p] += x, p += p &amp; -p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123; <span class="comment">//求位置p的前缀和</span></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) res += sum[p], p -= p &amp; -p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123; <span class="comment">//区间求和</span></span><br><span class="line">    <span class="keyword">return</span> ask(r) - ask(l - <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而区间修改的话，其实就是用了一个差分的思想了；</p><p>比如 a数组     1 1 1 1 1</p><p>​    b数组     1 0 0 0 0    b[n]=a[n]-a[n-1]</p><p>我想要再a数组的2~3都加上2；</p><p>​    a数组     1 3 3 3 1</p><p>​    b数组     1 2 0 0 -2  我们发现只要修改b数组两个元素就可以来维护a数组了</p><p>a数组就是b数组的前缀和</p><p>所以区间修改 只要修改俩个元素就行了（舒舒服服）。</p><h2 id="区间修改单点查询"><a class="markdownIt-Anchor" href="#区间修改单点查询"></a> 区间修改+单点查询</h2><p>（这里都搬运的大佬的详解）</p><p><img src="https://img-blog.csdn.net/20180723170043290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img1" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间修改+单点查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e7</span>+<span class="number">5</span>;<span class="comment">//这里可以理解成 原数组是sum数组的前缀和 </span></span><br><span class="line">ll sum[maxn],n;<span class="comment">//数组从1开始到n </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//这个函数用来在树状数组中直接修改</span></span><br><span class="line">    <span class="keyword">while</span>(p &lt;= n) sum[p] += x, p += p &amp; -p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//给区间[l, r]加上x</span></span><br><span class="line">    add(l, x), add(r + <span class="number">1</span>, -x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123; <span class="comment">//单点查询</span></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) res += sum[p], p -= p &amp; -p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="区间修改区间查询"><a class="markdownIt-Anchor" href="#区间修改区间查询"></a> 区间修改+区间查询</h2><p><img src="https://img-blog.csdn.net/20180723170056229?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img2" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间修改+区间查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line">ll d[maxn];<span class="comment">//记录原数组的前缀和 </span></span><br><span class="line">ll sum1[maxn];</span><br><span class="line">ll sum2[maxn];</span><br><span class="line">ll n,M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll p, ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p; i &lt;= n; i += i &amp; -i)</span><br><span class="line">        sum1[i] += x, sum2[i] += x * p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(ll l, ll r, ll x)</span></span>&#123;</span><br><span class="line">    add(l, x), add(r + <span class="number">1</span>, -x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p; i; i -= i &amp; -i)</span><br><span class="line">        res += (p + <span class="number">1</span>) * sum1[i] - sum2[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">range_ask</span><span class="params">(ll l, ll r)</span></span>&#123;<span class="comment">//l到r的区间和 </span></span><br><span class="line">    <span class="keyword">return</span> ask(r) - ask(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先不考虑原数组的影响，直接区间修改修改sum1和sum2</span></span><br><span class="line">    <span class="comment">//最后要求[l,r]的区间和的话 </span></span><br><span class="line"><span class="comment">//结果就是range_ask(l,r)+d[r]-d[l-1]</span></span><br><span class="line"><span class="comment">// d[r]-d[l-1]考虑原数组的前缀和</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="二维树状数组"><a class="markdownIt-Anchor" href="#二维树状数组"></a> 二维树状数组</h1><p>如果不是做题，<s>谁会搞二维数组呢</s>。</p><p>在一维树状数组中，tree[x]（树状数组中的那个“数组”）记录的是右端点为x、长度为lowbit(x)的区间的区间和。<br />那么在二维树状数组中，可以类似地定义tree[x] [y]记录的是右下角为(x, y)，高为lowbit(x), 宽为 lowbit(y)的区间的区间和。</p><p>这个还是比较好理解的。</p><h2 id="单点修改-区间查询"><a class="markdownIt-Anchor" href="#单点修改-区间查询"></a> 单点修改 + 区间查询</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;<span class="comment">//将(x,y) +x</span></span><br><span class="line"><span class="keyword">int</span> py=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n+<span class="number">3</span>)sum[x][y]+=z,y+=y&amp;-y;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//求左上(1,1)右下(x,y)的矩阵和</span></span><br><span class="line">ll res=<span class="number">0</span>,py=y;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y)res+=sum[x][y],y-=y&amp;-y;</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间修改-单点查询"><a class="markdownIt-Anchor" href="#区间修改-单点查询"></a> 区间修改 + 单点查询</h2><p><img src="https://img-blog.csdnimg.cn/20190515150934156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img3" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> py=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n+<span class="number">3</span>)sum[x][y]+=z,y+=y&amp;-y;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">int</span> z)</span></span>&#123;<span class="comment">//给左上(xa,ya)右下(xb,yb)矩阵+z </span></span><br><span class="line">add(xa,ya,z),add(xa,yb+<span class="number">1</span>,-z),add(xb+<span class="number">1</span>,ya,-z),add(xb+<span class="number">1</span>,yb+z,z);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//查询(x,y)这点的值</span></span><br><span class="line">ll res=<span class="number">0</span>,py=y;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y)res+=sum[x][y],y-=y&amp;-y;</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="区间修改-区间查询"><a class="markdownIt-Anchor" href="#区间修改-区间查询"></a> 区间修改 + 区间查询</h2><p><img src="https://img-blog.csdnimg.cn/20190515151116992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img4" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line">ll t1[maxn][maxn],t2[maxn][maxn],t3[maxn][maxn],t4[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> py=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">t1[x][y]+=z,t2[x][y]+=z*x,t3[x][y]+=z*y,t4[x][y]+=z*x*y;</span><br><span class="line">y+=y&amp;-y;</span><br><span class="line">&#125;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">add(xa,ya,z),add(xa,yb+<span class="number">1</span>,-z),add(xb+<span class="number">1</span>,ya,-z),add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>,py=y;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line">res+=(x+<span class="number">1</span>)*(y+<span class="number">1</span>)*t1[x][y]-(y+<span class="number">1</span>)*t2[x][y];</span><br><span class="line">res+=-(x+<span class="number">1</span>)*t3[x][y]+t4[x][y];</span><br><span class="line">y-=y&amp;-y;</span><br><span class="line">&#125;</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">r_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ask(xb,yb)-ask(xb,ya<span class="number">-1</span>)-ask(xa<span class="number">-1</span>,yb)+ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="三维树状数组"><a class="markdownIt-Anchor" href="#三维树状数组"></a> 三维树状数组</h1><h2 id="区间修改-单点修改"><a class="markdownIt-Anchor" href="#区间修改-单点修改"></a> 区间修改 + 单点修改</h2><p>原理和二维一样不过就是再多加了一维。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间修改+单点查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn][maxn],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=n+<span class="number">2</span>; i+=i&amp;-i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;=n+<span class="number">2</span>; j+=j&amp;-j) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=z; k&lt;=n+<span class="number">2</span>; k+=k&amp;-k)</span><br><span class="line">sum[i][j][k]+=w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_add</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> z1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> z2,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">add(x1,y1,z1,w);</span><br><span class="line">add(x1,y2+<span class="number">1</span>,z1,-w);</span><br><span class="line">add(x2+<span class="number">1</span>,y1,z1,-w);</span><br><span class="line">add(x2+<span class="number">1</span>,y2+<span class="number">1</span>,z1,w);</span><br><span class="line"> </span><br><span class="line">add(x1,y1,z2+<span class="number">1</span>,-w);</span><br><span class="line">add(x1,y2+<span class="number">1</span>,z2+<span class="number">1</span>,w);</span><br><span class="line">add(x2+<span class="number">1</span>,y1,z2+<span class="number">1</span>,w);</span><br><span class="line">add(x2+<span class="number">1</span>,y2+<span class="number">1</span>,z2+<span class="number">1</span>,-w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;-i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j;j-=j&amp;-j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=z;k;k-=k&amp;-k)</span><br><span class="line">res+=sum[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的还没遇到//</p><p>最后膜巨佬！Orz</p><p>完结撒花！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树初体会</title>
      <link href="2018/07/23/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%88%9D%E4%BD%93%E4%BC%9A/"/>
      <url>2018/07/23/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%88%9D%E4%BD%93%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p><strong>花了差不多一天的时间，先大致了解了主席树这个黑科技</strong></p><p>给上一个链接，我觉得是我看的最容易理解的主席树了https://www.cnblogs.com/zyf0163/p/4749042.html</p><p>为了更方便你们理解，我对他的代码增加了我的理解这是一道hdu的题目，一道板子题建议做一下http://acm.hdu.edu.cn/showproblem.php?pid=2665</p><p>这里附上代码详解（不对之处望指正）</p><h1 id="hdu2665"><a class="markdownIt-Anchor" href="#hdu2665"></a> HDU2665</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N], b[N], rt[N * <span class="number">20</span>], ls[N * <span class="number">20</span>], rs[N * <span class="number">20</span>], sum[N * <span class="number">20</span>];</span><br><span class="line"><span class="comment">//rt[]是记录着第几个父节点</span></span><br><span class="line"><span class="comment">//ls[]是左分支 存着对应节点的左分支 </span></span><br><span class="line"><span class="comment">//rs[]是右分支 存着对应节点的右分支</span></span><br><span class="line"><span class="comment">//sum[]是出现的次数 </span></span><br><span class="line"><span class="keyword">int</span> n, k, tot, sz, ql, qr, x, q, T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    o = ++ tot;<span class="comment">//tot是解决存储在sum中的位置 </span></span><br><span class="line">    sum[o] = <span class="number">0</span>;<span class="comment">//初值都是0 </span></span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    Build(ls[o], l, m);<span class="comment">//完善左支 </span></span><br><span class="line">    Build(rs[o], m + <span class="number">1</span>, r);<span class="comment">//再完善右支 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> last, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    o = ++ tot;<span class="comment">//last就是前面的一棵树 </span></span><br><span class="line">    ls[o] = ls[last];</span><br><span class="line">    rs[o] = rs[last];</span><br><span class="line">    sum[o] = sum[last] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= m)  update(ls[o], l, m, ls[last], p);<span class="comment">//根据p出现的位置只更新掉一条路 ,ls[o]被tot更新重新分配了在sum中的位置 </span></span><br><span class="line">    <span class="keyword">else</span> update(rs[o], m + <span class="number">1</span>, r, rs[last], p);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ss, <span class="keyword">int</span> tt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;<span class="comment">//最后返回的是他在b数组里出现的位置 </span></span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = sum[ls[tt]] - sum[ls[ss]];<span class="comment">//在所给的范围中，出现在b数组中l~m位置的个数 </span></span><br><span class="line">    <span class="keyword">if</span>(k &lt;= cnt) <span class="keyword">return</span> query(ls[ss], ls[tt], l, m, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rs[ss], rs[tt], m + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ql, &amp;qr, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> ans = query(rt[ql - <span class="number">1</span>], rt[qr], <span class="number">1</span>, sz, x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[ans]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i), b[i] = a[i];</span><br><span class="line">        sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);<span class="comment">//b数组排序 </span></span><br><span class="line">        sz = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);<span class="comment">//不重复的有多少个 </span></span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        Build(rt[<span class="number">0</span>],<span class="number">1</span>, sz);<span class="comment">//总共有sz个不重复的数，所以最下面一层有1~sz个</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt;= 4 * n; i ++)printf(&quot;%d,rt =  %d,ls =  %d, rs = %d, sum = %d\n&quot;, i, rt[i], ls[i], rs[i], sum[i]);</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)a[i] = lower_bound(b + <span class="number">1</span>, b + sz + <span class="number">1</span>, a[i]) - b;<span class="comment">//a[i]变成记录a[i]元素在b数组中的位置 </span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)update(rt[i], <span class="number">1</span>, sz, rt[i - <span class="number">1</span>], a[i]);<span class="comment">//从1更新到n,主席树完成 </span></span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt;= 5 * n; i ++)printf(&quot;%d,rt =  %d,ls =  %d, rs = %d, sum = %d\n&quot;, i, rt[i], ls[i], rs[i], sum[i]);</span></span><br><span class="line">        <span class="keyword">while</span>(q --)work();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="p3919-模板可持久化数组可持久化线段树平衡树"><a class="markdownIt-Anchor" href="#p3919-模板可持久化数组可持久化线段树平衡树"></a> <a href="https://www.luogu.org/problemnew/show/P3919">P3919 【模板】可持久化数组（可持久化线段树/平衡树）</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],rt[N*<span class="number">20</span>],ls[N*<span class="number">20</span>],rs[N*<span class="number">20</span>];</span><br><span class="line">ll sum[N*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tot,sz; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> &amp;o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">o=++ tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[o]=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(ls[o],l,m);</span><br><span class="line">Build(rs[o],m+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> last,<span class="keyword">int</span> p,<span class="keyword">int</span> c,<span class="keyword">bool</span> fg)</span> </span>&#123;</span><br><span class="line">o=++tot;</span><br><span class="line">ls[o]=ls[last];</span><br><span class="line">rs[o]=rs[last];</span><br><span class="line"><span class="keyword">if</span>(fg) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[o]=c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=m)  update(ls[o],l,m,ls[last],p,c,fg);</span><br><span class="line"><span class="keyword">else</span> update(rs[o],m+<span class="number">1</span>,r,rs[last],p,c,fg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)<span class="keyword">return</span> sum[id];</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=m) <span class="keyword">return</span> query(ls[id],l,m,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(rs[id],m+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,c,d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SC(n,m);</span><br><span class="line">rep(i,<span class="number">1</span>,n) sc(a[i]);</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line">Build(rt[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">sc(x),sc(y),sc(c);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span>)&#123;</span><br><span class="line">sc(d);</span><br><span class="line">update(rt[i],<span class="number">1</span>,n,rt[x],c,d,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(rt[x],<span class="number">1</span>,n,c)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">update(rt[i],<span class="number">1</span>,n,rt[x],<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有什么动态主席树，等变化还需一步步学习（来自菜鸡的叹息）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 2018牛客多校第二场A，D，I</title>
      <link href="2018/07/22/(Nowcoder)%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/"/>
      <url>2018/07/22/(Nowcoder)%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>只会3道签到题 （哭唧唧） A run ，D money ，I car。<s>（发了3次了还保存不了，不发题解就可以保存了，😇）</s></strong></p><h1 id="1a-run"><a class="markdownIt-Anchor" href="#1a-run"></a> 1.A run</h1><p>题解是用dp，我们是联想到了走楼梯问题，将起看成一次走1米或者走k+1米，这样用个记忆化搜索加前缀和就可以解决这个问题了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">20</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> q,k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ssum[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res[i]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;k)&#123;</span><br><span class="line">res[i]=<span class="number">1</span>;</span><br><span class="line">ssum[i]=i;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==k)&#123;</span><br><span class="line">res[i]=<span class="number">2</span>;</span><br><span class="line">ssum[i]=i+<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==k+<span class="number">1</span>)&#123;</span><br><span class="line">res[i]=<span class="number">3</span>;</span><br><span class="line">ssum[i]=i+<span class="number">3</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line">res[i]=func(i<span class="number">-1</span>)+func(i-k<span class="number">-1</span>);</span><br><span class="line">ssum[i]=ssum[i<span class="number">-1</span>]+res[i];</span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;q,&amp;k)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(res,<span class="number">0</span>,<span class="keyword">sizeof</span>(res));</span><br><span class="line"><span class="built_in">memset</span>(ssum,<span class="number">0</span>,<span class="keyword">sizeof</span>(ssum));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L,R;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;L,&amp;R);</span><br><span class="line"><span class="keyword">if</span>(ssum[R]!=<span class="number">0</span>&amp;&amp;ssum[L<span class="number">-1</span>]!=<span class="number">0</span>&amp;&amp;ssum[R]-ssum[L<span class="number">-1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ssum[R]-ssum[L<span class="number">-1</span>])%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=L;j&lt;=R;j++)</span><br><span class="line">&#123;</span><br><span class="line">ans+=func(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2money"><a class="markdownIt-Anchor" href="#2money"></a> 2.money</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> value=<span class="number">0</span>,count=<span class="number">0</span>,temp=a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>]&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">value+=a[i<span class="number">-1</span>]-temp;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]-temp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">count+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[n<span class="number">-1</span>]&gt;temp)&#123;</span><br><span class="line">value+=a[n<span class="number">-1</span>]-temp;</span><br><span class="line">count+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;value&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3car"><a class="markdownIt-Anchor" href="#3car"></a> 3.car</h1><p>先考虑当方格没有破坏的时候，可以很容易得出n为偶有2<em>n辆，n为奇数时2</em>（n-1）+1辆（可以证明出来，或者找规律），接下来就是考虑被破坏的地方，然后减去相应的车辆，这个是有规律的。要小心的就是奇数时，中心十字架的位置。我写的比较繁琐，求个大佬的简单思路。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line"><span class="keyword">bool</span> h[n+<span class="number">1</span>];<span class="comment">//记录行 </span></span><br><span class="line"><span class="keyword">bool</span> l[n+<span class="number">1</span>];<span class="comment">//记录列 </span></span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> st=<span class="number">2</span>*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">2</span>;</span><br><span class="line">h[x]=<span class="number">1</span>,l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]!=<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]!=<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">h[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> st=<span class="number">2</span>*(n<span class="number">-1</span>);<span class="comment">//先不考虑中间十字线上可能出现的汽车 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(x==(n+<span class="number">1</span>)/<span class="number">2</span>||y==(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(x==(n+<span class="number">1</span>)/<span class="number">2</span>&amp;&amp;y!=(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y==(n+<span class="number">1</span>)/<span class="number">2</span>&amp;&amp;x!=(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h[x]=<span class="number">1</span>,l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">2</span>;</span><br><span class="line">h[x]=<span class="number">1</span>,l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]!=<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]!=<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">h[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l[(n+<span class="number">1</span>)/<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;h[(n+<span class="number">1</span>)/<span class="number">2</span>]==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;st+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>完结，撒花！！！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
