<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SEDANSPOT Detecting Anomalies in Edge Streams阅读记录</title>
      <link href="2021/03/07/SEDANSPOT%20Detecting%20Anomalies%20in%20Edge%20Streams/"/>
      <url>2021/03/07/SEDANSPOT%20Detecting%20Anomalies%20in%20Edge%20Streams/</url>
      
        <content type="html"><![CDATA[<h1 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why：</h1><p>先前的工作表明，在许多应用程序中，欺诈或重要事件的确确实发生了尖峰或活动爆发。（比如网络安全问题，诈骗，重大节日（节日产生比平常更长的通话时间））。尽管异常活动倾向于突发，但突发性不一定表示异常：在诸如网络流量之类的动态情况下，正常活动也可能是突发性的。因此，为了进行可靠的检测，我们需要结合时间和结构信息。</p><p>同时蓄水池采样和随机游走重新启动(RWR)算法对现在这个突发问题的局限。</p><h1 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h1><p>我们考虑在这种边缘流中实时实时检测异常的问题，其目的是在当边来时候，检测它是否异常。尽管在线图形异常检测是一个经过充分研究的研究领域，但大多数方法都假设边已被汇总到图形快照中。相比之下，该文章提出算法可将边缘流几乎实时地直接处理边异常，这对于减少恶意活动的影响并及时启动恢复过程至关重要。此外，鉴于顶点的数目是先验未知的，并且可以随着流的进行而增长，因此该算法应在图大小下的存储亚线性中进行操作。</p><img src="https://img-blog.csdnimg.cn/20210307151139784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;"  ><p>由于异常的定义可能取决于上下文，因此我们专注于检测连接图的稀疏连接部分的边（桥边）。</p><img src="https://img-blog.csdnimg.cn/20210307151205368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><p>这些“红色”边缘的同时发生不是偶然。 先前的工作表明，在许多应用程序中，欺诈或重要事件的确确实发生了尖峰或活动爆发。（比如网络安全问题，诈骗，重大节日（节日产生比平常更长的通话时间））。尽管异常活动倾向于突发，但突发性不一定表示异常：在诸如网络流量之类的动态情况下，正常活动也可能是突发性的。因此，为了进行可靠的检测，我们需要结合时间和结构信息。</p><h1 id="background"><a class="markdownIt-Anchor" href="#background"></a> Background</h1><p><strong>蓄水池采样</strong>是一种经典算法，用于维护流中元素的固定大小的统一样本。但是不能对突发周期的边缘进行降采样。</p><p><strong>随机游走重新启动(RWR)</strong> v的相关性得分，关于u是点从u出发，重启概率是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，最后在v的稳态概率。直接使用RWR是代价（时间的空间）昂贵的，（该文使用的是近似的方法，局部随机游走），边缘流的RWR相关性分数计算的现有工作要么假设一个提前知道的起始顶点，要么维持所有对相关性分数。 因此不适用于我们的环境。</p><img src="https://img-blog.csdnimg.cn/20210307151236585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><h1 id="problem-framework"><a class="markdownIt-Anchor" href="#problem-framework"></a> Problem Framework</h1><p>目的是通过时间和空间找到异常的边，它们趋向于（i）发生活动爆发，并且（ii）连接图的稀疏连接部分。(<strong>上文提到说正常活动也可能是突发的，节假日的通话时间更长，可以理解虽满足第一个活动爆发的条件，但是不满足第二点</strong>)为了使用有限内存快速进行此操作，我们对到目前为止看到的边缘保持固定大小的样本，并使用它对任何新边缘的异常情况进行评分。 因此，问题1可以细分为两个子问题，每个子问题都包含上述异常信号之一，如下所示：</p><img src="https://img-blog.csdnimg.cn/20210307151258759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom: 50%;" /><h1 id="proposed-method"><a class="markdownIt-Anchor" href="#proposed-method"></a> Proposed Method</h1><p>SEDANSPOT(Alg. 1)  通过  SEDANSCORER(Alg. 3) 对每一条边与当前的边采样比较得到一个异常分数。</p><p>采样基于边来更新，使用SEDANSAMPLER(Alg. 2)。</p><img src="https://img-blog.csdnimg.cn/20210307151317657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210307151333661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∝</mo></mrow><annotation encoding="application/x-tex">\propto</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mrel">∝</span></span></span></span> ：正比于，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(.)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord">.</span><span class="mclose">)</span></span></span></span>是边变化率的度量，因此较大的值表示边缘的爆发更剧烈。直观来讲，加权蓄水池采样可以确保如果因为活动爆发期间发生的攻击导致<strong>基础图G</strong>的某个区域单独稠密连接。在<strong>采样图</strong>的相关区域中仍然有些稀疏连接。（<strong>可以认为采样图是一直保持一个相对正常连接的图形状态</strong>），这为检测属于同一攻击的后续边缘奠定了基础，攻击出现在相同的区域。（因为采样图还是正常状态，在采样的图上算异常得分还是会高，而且是因为同一个区域导致的得分高）</p><p>边变化率定义如下： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><msub><mi>ε</mi><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>t</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(e) = |\varepsilon_{t(e)}|/(t(e)-t_{bef}(e))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">e</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>    <strong>（2）</strong></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span>是e这条边来的时间戳，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ε</mi><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">\varepsilon_{t(e)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7857599999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">e</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span>时间戳（包含e）来的边的集合。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{bef}(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span>是在e之前来的边中最近的时间戳。这个时间戳间距内来的变越多或者时间戳间距变小都会导致变化率的增大，边的爆炸越强烈。</p><p>现在定义了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mo separator="true">⋅</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(·)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">)</span></span></span></span>，可以使用<a href="https://tddtang.top/2021/03/06/Weighted_Random_Sampling_with_A_Reservoir/">加权蓄水池采样算法</a>轻松维护速率调整的样本。算法2使用MinHeapPriorityQueue数据结构进行有效的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi mathvariant="normal">（</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>S</mi><mi mathvariant="normal">）</mi></mrow><annotation encoding="application/x-tex">O（logS）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">）</span></span></span></span>更新。</p><img src="https://img-blog.csdnimg.cn/20210307151400789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><p><strong>MPI</strong> :边缘临近度增加</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>v</mi><mi mathvariant="normal">∣</mi><mi>u</mi><mo separator="true">;</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s(v|u;S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">∣</span><span class="mord mathdefault">u</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span>是在边集<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>的基础上对源点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和终点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的有向顶点接近度。最短路的数量越多，在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>上从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>路径的权重越大，这个值越大。为此可以使用等式（1）中的RWR相关得分，由于其原理（包括直接路径和间接路径），不对称，有界于 [0,1]，可以使用局部随机游走快速估算。</p><p><strong>VISIT_FRACTION()</strong> 通过N次局部随机游走，输出估计值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>s</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>v</mi><mi mathvariant="normal">∣</mi><mi>u</mi><mo separator="true">;</mo><mi>S</mi><mo>∪</mo><mo stretchy="false">{</mo><mi>e</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{s}(v|u;S\cup\{e\})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">∣</span><span class="mord mathdefault">u</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">e</span><span class="mclose">}</span><span class="mclose">)</span></span></span></span>。每一次，游走过程中访问v的次数与步行总长度的比率即为估计值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>s</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span></span></span></span>。</p><p><img src="https://img-blog.csdnimg.cn/20210307151425967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" alt="" /></p><p>Alg 3 line 11：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>←</mo><mi>w</mi><mo>+</mo><mi>o</mi><mi>u</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><msub><mi>u</mi><mo>∗</mo></msub></mrow><annotation encoding="application/x-tex">W \leftarrow w+ out\_weight\ of\ u_{*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  W是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mo>∗</mo></msub></mrow><annotation encoding="application/x-tex">u_{*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的出边权值之和，根据权值概率选择出边</p><p>SEDANSAMPLER确保属于给定时间间隔的采样边的数量仅取决于其持续时间，而不取决于其间发生的边的数量。</p><p>因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><msub><mi>ε</mi><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>t</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(e) = |\varepsilon_{t(e)}|/(t(e)-t_{bef}(e))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">e</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>  ，该集合边的优先权为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>r</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1/r(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span>即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>t</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∣</mi><msub><mi>ε</mi><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">(t(e)-t_{bef}(e))/|\varepsilon_{t(e)}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">e</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span>,若优先权和为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>a</mi><mi>l</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W_{all}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,在这个时间区间采样的数量期望为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>t</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∣</mi><msub><mi>ε</mi><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">∣</mi><mo>∗</mo><msub><mi>W</mi><mrow><mi>a</mi><mi>l</mi><mi>l</mi></mrow></msub></mrow></mfrac></mstyle><mo>∗</mo><mi mathvariant="normal">∣</mi><msub><mi>ε</mi><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">∣</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>t</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>t</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><msub><mi>W</mi><mrow><mi>a</mi><mi>l</mi><mi>l</mi></mrow></msub></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{t(e)-t_{bef}(e)}{|\varepsilon_{t(e)}|*W_{all}}*|\varepsilon_{t(e)}| = \dfrac{t(e)-t_{bef}(e)}{W_{all}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4682em;vertical-align:-1.0412em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">e</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0412em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">e</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.263em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anomaly detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weighted Random Sampling with A Reservoir</title>
      <link href="2021/03/06/Weighted_Random_Sampling_with_A_Reservoir/"/>
      <url>2021/03/06/Weighted_Random_Sampling_with_A_Reservoir/</url>
      
        <content type="html"><![CDATA[<p><strong>简介转自<a href="http://live.aulddays.com/tech/17/weighted-random-sampling-reservoir-algorithm.htm">旧日重来</a></strong></p><p><strong>朋友对这篇论文的解读<a href="https://mciscai.github.io/posts/42517.html">智商为零的小白</a></strong></p><hr /><p>最近，<a href="http://live.aulddays.com/">Aulddays</a> 遇到一个随机抽样任务。有一个对象集合，由于整个集合非常大，希望考虑每个对象的热门程度抽样出一部分对象来进行分析。把这个任务抽象出来，其实就对应了一个带概率加权的随机抽样 (<a href="http://live.aulddays.com/tech/17/weighted-random-sampling-reservoir-algorithm.htm">Weighted Random Sampling</a>) 问题。对应到不同的应用场景，可以对应解决搜索query抽样、商品抽样、网页抽样等任务。对于不加权的普通随机抽样，其实并不难解决，在样本集合非常大的情况下，还可以使用经典的蓄水池算法 (<a href="https://en.wikipedia.org/wiki/Reservoir_sampling">Reservoir Sampling</a>) 来高效实现的抽样。但对于带概率加权的情况，就不太容易了，特别的，在 Aulddays 的任务中，结果集合中每个对象只有1次，对应了无放回的情况，则更困难一些。在内存足够的情况下，似乎还能想到接近于 O(<em>m</em>log<em>n</em>) 的思路，但大数据上就没什么好的思路了。Survey 了一番之后，发现这个问题其实已经被研究了很久，但直到 2006 年才得到较好的解决：<a href="http://www.sciencedirect.com/science/article/pii/S002001900500298X">Pavlos S. Efraimidis and Paul G. Spirakis, 2006, Weighted random sampling with a reservoir</a>。这里介绍一下他们提出的 <a href="http://live.aulddays.com/tech/17/weighted-random-sampling-reservoir-algorithm.htm">A-Res 算法</a>。</p><h2 id="问题定义"><a class="markdownIt-Anchor" href="#问题定义"></a> 问题定义</h2><h3 id="简单随机抽样"><a class="markdownIt-Anchor" href="#简单随机抽样"></a> (简单)随机抽样</h3><p>给定 <em>n</em> 个样本（样本集合），从中随机抽出 <em>m</em> 个样本（抽样集合），样本集合中每个样本出现在抽样集合的概率相等（=<em>m</em>/<em>n</em>）。</p><h3 id="加权随机抽样"><a class="markdownIt-Anchor" href="#加权随机抽样"></a> 加权随机抽样</h3><p>样本集合中每个样本附加一个权重 <em>wi</em> &gt;0，每个样本被抽中的概率由 <em>wi</em> 确定。<em>wi</em> 有两种指定方法：</p><ol><li>概率值，即所有样本的权重 <em>wi</em> 加和为 1</li><li>相对权重，<em>wi</em> 只表明样本之间被抽中概率的相对关系，但事先并不知道每个样本具体的概率是多少。在大数据的场景下，这个是更常见的情况</li></ol><p>显然，概率值是相对权重的一个特例，解决了相对权重的情况，拿概率值作为输入也是直接可运行的。</p><h3 id="有放回无放回-withwithout-replacement"><a class="markdownIt-Anchor" href="#有放回无放回-withwithout-replacement"></a> 有放回/无放回 (with/without replacement)</h3><p>顾名思义，无放回就是被抽中之后就不会被再次加入候选，也就是一个样本在最终的抽样结果中最多只出现1次。有放回则可能在结果中出现多次。更一般的，还可以定义 <em>k</em>-1-放回，即一个样本最多被抽中 <em>k</em> 次（被放回 <em>k</em>-1 次）。不难看出，无放回对应 <em>k</em>=1，而有放回对应 <em>k</em>=<em>m</em> (<em>m</em>是抽样集合的大小)<br />这里首先重点研究无放回的情况。对于<a href="http://live.aulddays.com/tech/17/weighted-random-sampling-reservoir-algorithm.htm#replacement">有放回的情况</a>，可以在无放回算法的基础上做简单扩展来解决。</p><h2 id="a-res-算法"><a class="markdownIt-Anchor" href="#a-res-算法"></a> A-Res 算法</h2><p>A-Res 算法也利用了蓄水池 (reservoir) 的思想来解决大数据的问题，也就是说，事先不用知道样本集合的大小 <em>n</em> 和样本权重的情况（i.e. 权重之和），只需要依次遍历一次样本集合即可以得到结果，空间复杂度是 O(<em>m</em>)，正比于结果集合的大小。<br />出人意料的，A-Res 算法相当简洁，只需要计算和记录一个参数即可。具体算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Algorithm: A-Res</span><br><span class="line">Input: 样本序列 V，长度未知，第 i 个样本 vi 的权重为 wi</span><br><span class="line">Output: 长度为 m 的结果集合 R</span><br><span class="line"> </span><br><span class="line">foreach vi in V (i &#x3D; 1, 2, ...):</span><br><span class="line">   ki &#x3D; rand(0, 1) ^ (1 &#x2F; wi)</span><br><span class="line">   if i &lt;&#x3D; m:</span><br><span class="line">      (vi, ki) 加入 R</span><br><span class="line">   else:</span><br><span class="line">      (vt, kt) &#x3D; min k ∈ R &#x2F;&#x2F; Aulddays: 选出 R 中 k 最小的那个样本</span><br><span class="line">      if ki &gt; kt:</span><br><span class="line">         (vi, ki) 替换 (vt, kt)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：当 <em>wi</em> 值为一般权重而非概率值时，可能会是一个很大的数值，从而使得 <em>ki</em> 的指数操作可能会丢失精度。这种情况下可以对 <em>ki</em> 取 log() 而变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i = log(rand(0, 1)) / w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，因为后续在各个 <em>ki</em> 之间只涉及比较相对大小而不是绝对值，所以可以保证精度的同时不影响结果。</p></blockquote><p>循环中的每一轮需要查找/更新蓄水池中 <code>ki</code> 特征值的最小值，显然这里用一个<a href="http://en.wikipedia.org/wiki/Heap_(data_structure)">最小堆</a>来维护是一个较优化的选择。于是整个算法的时间复杂度就是 <code>O(m*log(n))</code></p><p>显然，整个算法的核心在于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mrow><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">k_i = (rand(0, 1)) ^ {(1 / w_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> 这个特征值，这里做一个简单证明：</p><ul><li>令 <code>U1</code>, <code>U2</code> 为两个相互独立的随机变量且均服从 [0, 1] 区间上的均匀分布</li><li>令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><mi>U</mi><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>w</mi><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k1 = (U1)^{1/w1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mn>2</mn><mo>=</mo><mo stretchy="false">(</mo><mi>U</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>w</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k2 = (U2)^{1/w2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>, 其中 <code>w1, w2 &gt; 0</code> （在算法中 <code>w1</code>, <code>w2</code> 就是对应目标样本的权重）</li><li>可以推出概率关系：<code>P(k1≤k2) = w2/(w1+w2)</code></li><li>因此比较 <code>ki</code> 特征值确实实现了按 <code>wi</code> 的概率加权随机抽样</li></ul><h2 id="扩展分布式-有放回"><a class="markdownIt-Anchor" href="#扩展分布式-有放回"></a> 扩展（分布式、有放回）</h2><p>因为所有数据只需过一轮，A-Res 可以比较容易的扩展到并行或分布式的情况。</p><p>对于有放回的情况，只需要这样进行修改：创建 <em>m</em> 个大小为 1 的蓄水池，对于每个样本 <em>vi</em>，分别在每个蓄水池上独立的运行 A-Res 算法。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置Clion环境和安装boost记录</title>
      <link href="2021/03/03/Ubuntu%E9%85%8D%E7%BD%AEClion%E7%8E%AF%E5%A2%83%E5%92%8C%E5%AE%89%E8%A3%85boost%E8%AE%B0%E5%BD%95/"/>
      <url>2021/03/03/Ubuntu%E9%85%8D%E7%BD%AEClion%E7%8E%AF%E5%A2%83%E5%92%8C%E5%AE%89%E8%A3%85boost%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机环境"><a class="markdownIt-Anchor" href="#虚拟机环境"></a> 虚拟机环境</h1><img src="https://img-blog.csdnimg.cn/20210303134512130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><h1 id="换源"><a class="markdownIt-Anchor" href="#换源"></a> 换源</h1><p>原来的源下载东西很慢，在软件和更新中即可换源，更换为阿里的源。</p><img src="https://img-blog.csdnimg.cn/20210303134712130.png#pic_center" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210303135155725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /><h1 id="配置clion环境和安装"><a class="markdownIt-Anchor" href="#配置clion环境和安装"></a> 配置Clion环境和安装：</h1><h2 id="一环境"><a class="markdownIt-Anchor" href="#一环境"></a> 一，环境</h2><p>Ubuntu中用到的编译工具是gcc©，g++（C++），make(连接)。因此只需安装对应的工具包即可。Ubuntu下使用命令安装这些包：</p><ol><li>安装gcc</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><ol start="2"><li>安装g++</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install g++</span><br></pre></td></tr></table></figure><ol start="3"><li>安装make</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><p>我就安装了这三个，此时Clion已成功检测，并能编译成功。</p><ol start="4"><li>同时可以将git安装一下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>网上也看见更完整的环境：</p><blockquote><p>在安装之前，请执行下面的命令，把环境搭建一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;sudo apt-get update</span><br><span class="line">&gt;sudo apt-get install build-essential</span><br><span class="line">&gt;sudo apt-get install cmake</span><br><span class="line">&gt;sudo apt-get install bison</span><br><span class="line">&gt;sudo apt-get install library*</span><br><span class="line">&gt;sudo apt-get install libncurses5-dev</span><br><span class="line">&gt;sudo apt-get install g++</span><br><span class="line">&gt;sudo apt-get install kdelibs5-dev</span><br><span class="line">&gt;sudo apt-get install make</span><br></pre></td></tr></table></figure><p>执行完成后，环境就搭建好了</p></blockquote><h2 id="二安装"><a class="markdownIt-Anchor" href="#二安装"></a> 二，安装</h2><p>Clion从官网下载解压包之后，解压进入bin目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;clion.sh</span><br></pre></td></tr></table></figure><p>没有桌面图标入口的话</p><p>Clion内 <strong>Tools-&gt;Create Desktop Entry</strong>即可</p><h1 id="boost安装"><a class="markdownIt-Anchor" href="#boost安装"></a> boost安装</h1><h2 id="一安装"><a class="markdownIt-Anchor" href="#一安装"></a> 一，安装</h2><p>根据这<a href="https://www.cnblogs.com/taolusi/p/9244554.html">文章 </a>完成了boost的安装，可以使用wget或者官网下载后解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 来自上述文章</span><br><span class="line"># 首先删除本地原有的 boost 库</span><br><span class="line">rm -f &#x2F;usr&#x2F;lib&#x2F;libboost*</span><br><span class="line">rm -fr &#39;find &#x2F; -name libboost*&#39;</span><br><span class="line"># 移除boost头文件</span><br><span class="line">mv &#x2F;usr&#x2F;include&#x2F;boost &#x2F;usr&#x2F;include&#x2F;boost-bak</span><br><span class="line"># 下载 wget</span><br><span class="line">apt-get install wget</span><br><span class="line"># 下载Boost库</span><br><span class="line">wget https:&#x2F;&#x2F;dl.bintray.com&#x2F;boostorg&#x2F;release&#x2F;1.57.0&#x2F;source&#x2F;boost_1_57_0.tar.gz</span><br><span class="line">tar -zxvf boost_1_57_0.tar.gz</span><br><span class="line">cd boost_1_57_0</span><br><span class="line"># 安装必要的库</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential g++ python-dev autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev</span><br><span class="line"># 构建符合环境的脚本</span><br><span class="line">.&#x2F;bootstrap.sh</span><br><span class="line"># 编译一下</span><br><span class="line">.&#x2F;b2</span><br><span class="line"># 最终安装</span><br><span class="line">sudo .&#x2F;b2 install</span><br></pre></td></tr></table></figure><p><strong>如果编译好程序后，在运行时提示无法加载某个库文件，则把/usr/local/lib下的所有boost的库文件mv到/usr/lib目录下就可以了。</strong></p><p>上文是没有指定安装位置，这样头文件就被默认安装在/usr/local/include头文件下，库文件就被默认安装在/usr/local/lib下，<a href="%5Bubuntu16.04%E5%AE%89%E8%A3%85boost%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B_%E8%BE%B0%E8%99%AB%E7%89%99%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/weixin_40622974/article/details/83476384?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)">ubuntu16.04安装boost到指定目录下。</a></p><h2 id="二遇到的一些问题"><a class="markdownIt-Anchor" href="#二遇到的一些问题"></a> 二，遇到的一些问题</h2><h3 id="1库无法安装依赖关系"><a class="markdownIt-Anchor" href="#1库无法安装依赖关系"></a> 1.库无法安装（依赖关系）</h3><blockquote><p>类似：</p><p>python2.7-dev : 依赖: python2.7 (= 2.7.3-0ubuntu3) 但是 2.7.3-0ubuntu3.1 已安装。<br />依赖: libpython2.7 (= 2.7.3-0ubuntu3) 但是 2.7.3-0ubuntu3.1 已安装。<br />依赖: libexpat1-dev 但它将不会被安装。<br />依赖: libssl-dev 但它将不会被安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用aptitude 工具可以两步搞定：</span><br><span class="line"></span><br><span class="line">sudo apt-get install aptitude </span><br><span class="line"></span><br><span class="line">sudo aptitude install python-dev</span><br></pre></td></tr></table></figure><p>若保持当前软件包的状态问题可能无法解决，所以第一个选n，第二种方案降级y。<a href="https://blog.csdn.net/u013182960/article/details/53431460">全文链接</a></p><h3 id="2-移动文件权限不够"><a class="markdownIt-Anchor" href="#2-移动文件权限不够"></a> 2. 移动文件权限不够</h3><p>就是解决上述boost提示无法加载某个库文件，因为默认情况下，编译器只会使用/lib和/usr/lib这两个目录下的库文件，通常通过源码包进行安装时，如果不指定–prefix，将会将库安装在/usr/local/lib下，故当程序需要链接动态库时，会报错。</p><blockquote><p>一种简单粗暴的方法就是将关于boost的文件移动到/usr/lib下</p></blockquote><blockquote><p>另一种，如<a href="https://www.cnblogs.com/littlek1d/p/9644899.html">文章中所示</a></p></blockquote><p>移动的过程中，提示权限不足，在需要被复制的文件夹下打开终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nautilus</span><br></pre></td></tr></table></figure><p>然后选择需要复制到的文件夹目录下，从被复制文件夹下 复制文件 到该文件夹下粘贴即可。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goodbye 2020</title>
      <link href="2021/01/09/Goodbye2020/"/>
      <url>2021/01/09/Goodbye2020/</url>
      
        <content type="html"><![CDATA[<blockquote><p>どんな願いも 嘘じゃない<br />你的所有愿望 绝非南柯一梦<br />きっとかなうから…<br />都一定可以实现</p></blockquote><h1 id="选择"><a class="markdownIt-Anchor" href="#选择"></a> 选择</h1><p>  读研还是工作，又是再一次面临选择的时候。可能是觉得自己还太菜，可能是想尝试科研，可能是想多条路，又可能是想再出去看看，最后还是坚定下来继续读研（<s>想多了也没得用，选哪个更好谁知道呢</s>）。开学后复习由三人组-&gt;二人组（<s>显然是被某人抛弃了</s>😐）-&gt;solo-&gt;考研/搞基大队</p><h1 id="毕业季"><a class="markdownIt-Anchor" href="#毕业季"></a> 毕业季</h1><p>  又到了毕业的时间了，送走了一波学长学姐。</p><img src="https://i.loli.net/2021/01/09/mPOoxfnRsgbJLVw.jpg" alt="CY BJ ME" style="zoom:50%;" /><p>  虽然BJ毕业了，但还帮我们规划着考研的各种👍，<s>就差帮我们考了</s></p><h1 id="这是意外"><a class="markdownIt-Anchor" href="#这是意外"></a> 这是意外</h1><p>  作为一名保研边缘人，要不是小伙伴说，我可能都不会去尝试投夏令营。</p><p>  讲到夏令营也挺搞笑的，两次面试，一次开始说有英语自我介绍，结果准备了没用上，第二次一开始说无英语自我介绍，结果没准备现场结结巴巴实在尴尬😇。不想花太多时间，我就投了两学校NWPU（因为比赛去过）和SEU（因为BJ就在SEU），好在都拿到了优营，🐕💩运吧。</p><p>  最后本校推免名单下来还是别人告诉我的，我是呆了，真没想到。晚上就和BJ通了一通电话，和韬韬在洗澡间叭叭叭了很久，到凌晨才去睡（有人一起分享喜悦，才是真的开心吧</p><img src="https://i.loli.net/2021/01/09/SqfiNVoM7jQWnDY.jpg" style="zoom: 80%;" /><p>  给我期间阵亡的phone上柱香，肯定是它吸走了我的霉运。</p><h1 id="2020终"><a class="markdownIt-Anchor" href="#2020终"></a> 2020终</h1><p>  先上岸了，最重要的事情那肯定是干饭了，轮流和BJ，搞基大队和队友干饭。</p><img src="https://i.loli.net/2021/01/09/kg8TYaEFM1fAovO.jpg" style="zoom:80%;" /><p>  我必须说，吃饭的肯定都能上岸。</p><p>  2020，发生了很多意想不到的事，对于我也是如此，有好的也有不好的。</p><p>  2021，不求惊喜，但求寻常（<s>copy from BJ</s>）</p><p><img src="https://i.loli.net/2021/01/09/gIAUhHEPQ1BWpFm.jpg" alt="招财/好运喵" /></p>]]></content>
      
      
      <categories>
          
          <category> 闲来叭叭 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 由多个不同的网络模型组合而成的模型（用一个损失函数，和优化方法去训练）</title>
      <link href="2020/11/30/Pytorch%20%E7%94%B1%E5%A4%9A%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%9E%8B/"/>
      <url>2020/11/30/Pytorch%20%E7%94%B1%E5%A4%9A%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>一开始写模型的时候，网上学习到的都是那种非常简单的模型，可是我要实现的模型是将多个模型套起来，一个大模型，一起训练。<br />   其实只要先定义几个小模型，然后将其定义在大模型的init中，然后用forward来控制内部的运作即可，直接看代码吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model_one</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_input, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Model_one, self).__init__()</span><br><span class="line">        self.predict = nn.Linear(n_input, n_output, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.predict(x)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model_two</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_input, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Model_two, self).__init__()</span><br><span class="line">        self.hidden1 = nn.Linear(n_input, <span class="number">128</span>)</span><br><span class="line">        self.hidden2 = nn.Linear(<span class="number">128</span>, <span class="number">64</span>)</span><br><span class="line">        self.predict = nn.Linear(<span class="number">64</span>, n_output)</span><br><span class="line">        self.dropout = nn.Dropout(p=<span class="number">0.5</span>)</span><br><span class="line">        self.dropout2 = nn.Dropout(p=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.hidden1(x)</span><br><span class="line">        out = self.dropout(out)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.hidden2(out)</span><br><span class="line">        out = self.dropout(out)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line"></span><br><span class="line">        predict = self.predict(out)</span><br><span class="line">        predict = self.dropout2(predict)</span><br><span class="line">        predict = torch.sigmoid(predict)</span><br><span class="line">        <span class="keyword">return</span> predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.hidden1(x)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        out = self.hidden2(out)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        out = self.hidden3(out)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        predict = self.predict(out)</span><br><span class="line">        predict = torch.sigmoid(predict)</span><br><span class="line">        <span class="keyword">return</span> predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, category_len, grid_len, K</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Model, self).__init__()</span><br><span class="line">        self.category_model = Model_one(category_len, K)</span><br><span class="line">        self.grid_model = Model_one(grid_len, K)</span><br><span class="line">        self.category_bias_model = Model_one(category_len, K)</span><br><span class="line">        self.grid_bias_model = Model_two(grid_len, K)</span><br><span class="line">        self.MLP_model = Model_two(<span class="number">2</span> * K, K)</span><br><span class="line">        self.NeuMF_model = Model_one(<span class="number">2</span> * K, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, category_input, grid_input</span>):</span></span><br><span class="line">        category_out = self.category_model(category_input)</span><br><span class="line">        grid_out = self.grid_model(grid_input)</span><br><span class="line">        SVD_out = category_out * grid_out</span><br><span class="line">        bu = self.category_bias_model(category_input)</span><br><span class="line">        bi = self.grid_bias_model(grid_input)</span><br><span class="line">        SVD_out = SVD_out + bu + bi</span><br><span class="line">        MLP_input = torch.cat((category_out, grid_out), <span class="number">1</span>)  <span class="comment"># 横向拼接</span></span><br><span class="line">        MLP_out = self.MLP_model(MLP_input)</span><br><span class="line">        NeuMF_RS_input = torch.cat((SVD_out, MLP_out), <span class="number">1</span>)  <span class="comment"># 横向拼接</span></span><br><span class="line">        NeuMF_RS_out = self.NeuMF_model(NeuMF_RS_input)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NeuMF_RS_out</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的Model_one和Model_two定义的小模型都是大模型的组成部分，只要控制好其中输入输出的衔接即可。<br />   其中的dropout在这是用来防止过拟合的，不用关注，关注网络是如何写的就可以了。<br />太笨了，一开始完全不懂怎么写</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytroch 对矩阵形状的变化和拼接</title>
      <link href="2020/11/30/Pytroch%20%E5%AF%B9%E7%9F%A9%E9%98%B5%E5%BD%A2%E7%8A%B6%E7%9A%84%E5%8F%98%E5%8C%96%E5%92%8C%E6%8B%BC%E6%8E%A5/"/>
      <url>2020/11/30/Pytroch%20%E5%AF%B9%E7%9F%A9%E9%98%B5%E5%BD%A2%E7%8A%B6%E7%9A%84%E5%8F%98%E5%8C%96%E5%92%8C%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="主要用到view和cat两个函数这里就简单地使用"><a class="markdownIt-Anchor" href="#主要用到view和cat两个函数这里就简单地使用"></a> 主要用到view和cat两个函数，这里就简单地使用</h2><h3 id="1torchview"><a class="markdownIt-Anchor" href="#1torchview"></a> 1.torch.view()</h3><p>主要是用来改变矩阵的形态，比如现在是一个[5,3]的矩阵，那我们就可以使用view函数将[5,3]的矩阵变成[3,5] , [1,15]或等等的形态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">out = torch.tensor([[<span class="number">0.1</span>],[<span class="number">0.2</span>],[<span class="number">0.3</span>]])</span><br><span class="line">print(out.size())</span><br><span class="line">out = out.view(-<span class="number">1</span>, <span class="built_in">len</span>(out))</span><br><span class="line">print(out.size())</span><br><span class="line">print(out) </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Print:</span><br><span class="line">torch.Size([<span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[<span class="number">0.1000</span>, <span class="number">0.2000</span>, <span class="number">0.3000</span>]])       </span><br></pre></td></tr></table></figure><p>view可以直接传入要变成的形态，几行几列，也可以只写行或者列，另一个用-1即可，会自动填充。</p><h3 id="2torchcat"><a class="markdownIt-Anchor" href="#2torchcat"></a> 2.torch.cat()</h3><p>用来拼接两个矩阵，比如行拼接或是列拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">y = torch.tensor([[<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>], [<span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line">horizontal_splicing_out = torch.cat((x, y), <span class="number">1</span>)  <span class="comment"># 横向拼接</span></span><br><span class="line">longitudinal_splicing_out = torch.cat((x, y), <span class="number">0</span>)  <span class="comment"># 纵向拼接</span></span><br><span class="line">print(<span class="string">&#x27;horizontal_splicing_out&#x27;</span>, horizontal_splicing_out)</span><br><span class="line">print(<span class="string">&#x27;longitudinal_splicing_out&#x27;</span>, longitudinal_splicing_out)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Print：</span><br><span class="line">horizontal_splicing_out tensor([[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">9</span>, <span class="number">10</span>],</span><br><span class="line">        [ <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line">longitudinal_splicing_out tensor([[ <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">        [ <span class="number">5</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>],</span><br><span class="line">        [<span class="number">11</span>, <span class="number">12</span>]])</span><br></pre></td></tr></table></figure><p>如代码所示，第一个参数就是要拼接的两个矩阵，第二个参数，1就是横向拼接，0就是纵向拼接。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理的亿点点作业</title>
      <link href="2020/04/06/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%9A%84%E4%BA%BF%E7%82%B9%E7%82%B9%E4%BD%9C%E4%B8%9A/"/>
      <url>2020/04/06/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%9A%84%E4%BA%BF%E7%82%B9%E7%82%B9%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>用某种高级语言写出：</p><p>(1)将正规式变成NFA的算法；</p><p>(2)将NFA确定化的算法；</p><p>(3) DFA状态最少化的算法。</p><p><s>写完就完事了 ， 没咋测试拉</s> 👍</p><p>不知道老师是不是这个意思啊，好像到最后就几个人写了💩💩💩</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> value;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; v[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="comment">//-------------------------NFA---------------------------//</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st,ed,str;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_nfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;的NFA是：&quot;</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=id;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:v[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;--&quot;</span>&lt;&lt;it.value&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;it.to&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connection</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nst,nsst;</span><br><span class="line">nst=st.top();</span><br><span class="line">st.pop();</span><br><span class="line">nsst=st.top();</span><br><span class="line"><span class="keyword">if</span>(ch!=<span class="string">&#x27;@&#x27;</span>) v[nsst].push_back(&#123;ch,nst&#125;);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;<span class="comment">// &#x27;(&#x27;</span></span><br><span class="line">ed.push(++id);<span class="comment">//这个括号的结束节点 </span></span><br><span class="line">str.push(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span>&#123;<span class="comment">// &#x27;)&#x27;</span></span><br><span class="line"><span class="keyword">int</span> nst=st.top(),nsst;</span><br><span class="line"><span class="keyword">int</span> ned=ed.top();</span><br><span class="line">v[nst].push_back(&#123;<span class="string">&#x27;^&#x27;</span>,ned&#125;);<span class="comment">//&#x27;^&#x27;代表空串，先将最后一个字符产生的节点连接到结束节点 </span></span><br><span class="line"><span class="keyword">char</span> ch=str.top();</span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">&#x27;(&#x27;</span>)&#123;<span class="comment">//将括号内的连起来 </span></span><br><span class="line">connection(ch);</span><br><span class="line">str.pop();</span><br><span class="line">ch=str.top();</span><br><span class="line">&#125;</span><br><span class="line">str.pop();</span><br><span class="line">str.push(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"><span class="comment">//括号这个整体的占位符，因为处理括号时处理了这个整体与前面的连接，故跳过 </span></span><br><span class="line">ned=ed.top(); </span><br><span class="line">st.push(ned);<span class="comment">//这样就可视括号整体为一个普通字符了 </span></span><br><span class="line">ed.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span></span>&#123;<span class="comment">// &#x27;|&#x27;</span></span><br><span class="line"><span class="keyword">int</span> nst=st.top();</span><br><span class="line"><span class="keyword">int</span> ned=ed.top();</span><br><span class="line">v[nst].push_back(&#123;<span class="string">&#x27;^&#x27;</span>,ned&#125;);</span><br><span class="line"><span class="keyword">char</span> ch=str.top();</span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">&#x27;(&#x27;</span> &amp;&amp; ch!=<span class="string">&#x27;S&#x27;</span>)&#123;<span class="comment">//将&#x27;|&#x27;前的连接 </span></span><br><span class="line">connection(ch);</span><br><span class="line">str.pop();</span><br><span class="line">ch=str.top();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run4</span><span class="params">()</span></span>&#123;<span class="comment">// &#x27;*&#x27;</span></span><br><span class="line"><span class="comment">//有如a*或()*因为上述处理都视为a </span></span><br><span class="line"><span class="keyword">int</span> nst=st.top();</span><br><span class="line">st.pop();</span><br><span class="line"><span class="keyword">int</span> nsst=st.top();</span><br><span class="line">v[nst].push_back(&#123;<span class="string">&#x27;^&#x27;</span>,nsst&#125;);</span><br><span class="line">v[nsst].push_back(&#123;<span class="string">&#x27;^&#x27;</span>,nst&#125;);</span><br><span class="line">st.push(nst);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run5</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;<span class="comment">// 普通字符 </span></span><br><span class="line">str.push(c);</span><br><span class="line">st.push(++id);<span class="comment">//是这个字符的结束，下一个字符的开始标记 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">str.push(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">st.push(id);<span class="comment">//全串的开始为0，结束为1 </span></span><br><span class="line">ed.push(++id);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:s)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>) run1(); </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>) run2();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;|&#x27;</span>) run3();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>) run4();</span><br><span class="line"><span class="keyword">else</span> run5(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ch=str.top();</span><br><span class="line"><span class="keyword">if</span>(st.top()!=<span class="number">0</span>) v[st.top()].push_back(&#123;<span class="string">&#x27;^&#x27;</span>,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">//后面的开始即前串的结束，将其连接到结束标记1 </span></span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">&#x27;S&#x27;</span>)&#123; </span><br><span class="line">connection(ch);</span><br><span class="line">str.pop();</span><br><span class="line">ch=str.top();</span><br><span class="line">&#125;</span><br><span class="line">print_nfa();</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//------------------------DFA--------------------------//</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> did=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; dfav[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//dfa下的图 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">bool</span> fg;<span class="comment">//1表示还有终态，反之无 </span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ns;<span class="comment">//集合 </span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,node &gt; mp;<span class="comment">//dfa中的序号，序号包含的node集合 </span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> svis[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; diff;<span class="comment">//不同的字符 </span></span><br><span class="line"><span class="function">node <span class="title">bfs</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; u,<span class="keyword">char</span> c)</span></span>&#123; <span class="comment">//在原图中从u集合出发只能走c的集合 </span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:u)&#123;</span><br><span class="line">q.push(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; tv;</span><br><span class="line"><span class="keyword">bool</span> bfg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> tp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:v[tp])&#123;</span><br><span class="line"><span class="keyword">if</span>(it.value!=c) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[it.to]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[it.to]=<span class="number">1</span>;</span><br><span class="line">tv.insert(it.to);</span><br><span class="line">                    <span class="keyword">if</span>(c==<span class="string">&#x27;^&#x27;</span>) q.push(it.to); </span><br><span class="line"><span class="keyword">if</span>(it.to==<span class="number">1</span>) bfg=<span class="number">1</span>;<span class="comment">//包含终态 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node&#123;bfg,tv&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; x,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; y)</span></span>&#123;<span class="comment">//比较两个集合的关系 </span></span><br><span class="line"><span class="comment">//0：相同 1：不同 </span></span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">int</span>)x.size()!=(<span class="keyword">int</span>)y.size()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator ix,iy;</span><br><span class="line"><span class="keyword">for</span>(ix=x.begin(),iy=y.begin();ix!=x.end();++ix,++iy)&#123;</span><br><span class="line"><span class="keyword">if</span>(*ix!=*iy) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function">node <span class="title">merge</span><span class="params">(node a,node b)</span></span>&#123;<span class="comment">//合并集合 </span></span><br><span class="line">node c;</span><br><span class="line"><span class="keyword">if</span>(a.fg || b.fg)c.fg=<span class="number">1</span>;</span><br><span class="line">c.ns.insert(a.ns.begin(),a.ns.end());</span><br><span class="line">c.ns.insert(b.ns.begin(),b.ns.end());</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_set</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;集合为：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:s)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_dfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;序号集合：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=did;++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(mp[i].fg) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;是终态，&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;不是终态，&quot;</span>; </span><br><span class="line">print_set(mp[i].ns);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;DFA是：&quot;</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=did;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:dfav[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;--&quot;</span>&lt;&lt;it.value&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;it.to&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; nu;</span><br><span class="line">node nd;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=id;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:v[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(it.value!=<span class="string">&#x27;^&#x27;</span>) diff.insert(it.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nu.insert(<span class="number">0</span>);</span><br><span class="line">nd=bfs(nu,<span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">mp[<span class="number">0</span>]=nd;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line">nu.clear(),svis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> tp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; tpset=mp[tp].ns; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:diff)&#123;<span class="comment">//先走一个c再走一个空 </span></span><br><span class="line">node cnd=bfs(tpset,c);</span><br><span class="line">node knd=bfs(cnd.ns,<span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">knd=merge(cnd,knd);</span><br><span class="line"><span class="keyword">if</span>(!knd.ns.size()) <span class="keyword">continue</span>; <span class="comment">//空集out </span></span><br><span class="line"><span class="keyword">bool</span> type=check(tpset,knd.ns);<span class="comment">//knd.ns:走出来的集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证是否产生新集合 0:相同，1：不同 </span></span><br><span class="line"><span class="keyword">bool</span> ffg=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:mp)&#123;</span><br><span class="line"><span class="keyword">if</span>(!check(it.second.ns,knd.ns))&#123;<span class="comment">//与以前的集合相同 </span></span><br><span class="line">dfav[tp].push_back(&#123;c,it.first&#125;);</span><br><span class="line">ffg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(ffg) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//产生了新的集合 </span></span><br><span class="line">mp[++did]=knd;</span><br><span class="line">dfav[tp].push_back(&#123;c,did&#125;);</span><br><span class="line">q.push(did); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print_dfa();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//------------------------Min_DFA--------------------------//</span></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; miv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> fa[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt;setv;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; myhash;<span class="comment">//字符映射</span></span><br><span class="line"><span class="keyword">int</span> charnum; </span><br><span class="line"><span class="keyword">int</span> matrix[maxn&lt;&lt;<span class="number">1</span>][maxn&lt;&lt;<span class="number">1</span>];<span class="comment">//变换矩阵 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">setv.clear();</span><br><span class="line">charnum=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:diff) myhash[c]=++charnum; <span class="comment">//字符映射为数字 构造变换矩阵 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=did;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=charnum;++j) matrix[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=did;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:dfav[i])&#123;</span><br><span class="line">matrix[i][myhash[it.value]]=it.to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sec</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> u==fa[u]?u:fa[u]=sec(fa[u]); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=sec(x),y=sec(y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unitset</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s)</span></span>&#123;<span class="comment">//合并集合 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:s) fa[i]=i;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=s.begin();it!=s.end();++it)&#123;</span><br><span class="line"><span class="keyword">if</span>(it!=s.begin())&#123;</span><br><span class="line"><span class="keyword">int</span> a=*it,b=*(--it);</span><br><span class="line">++it;</span><br><span class="line">unit(a,b);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">bool</span>,<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; &gt; divide(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ns,<span class="keyword">char</span> c)&#123;<span class="comment">//根据c来划分子集 </span></span><br><span class="line"><span class="comment">//1:不可拆分  0可拆分,则返回一个集合簇</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; allfa;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:ns)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[i][myhash[c]]==<span class="number">-1</span>) allfa.insert(<span class="number">-1</span>),fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> allfa.insert(sec(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(allfa.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>,res);</span><br><span class="line"><span class="keyword">if</span>(fg)&#123; <span class="comment">//-1,即没有c，单独考虑 </span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; newset;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:ns)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[i][myhash[c]]==<span class="number">-1</span>) newset.insert(i);</span><br><span class="line">&#125;</span><br><span class="line">res.push_back(newset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> nfa:allfa)&#123;</span><br><span class="line"><span class="keyword">if</span>(nfa==<span class="number">-1</span>) <span class="keyword">continue</span>; </span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; newset;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:ns)&#123;</span><br><span class="line"><span class="keyword">if</span>(sec(matrix[i][myhash[c]])==nfa) newset.insert(i); </span><br><span class="line">&#125;</span><br><span class="line">res.push_back(newset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> nset:res) unitset(nset);<span class="comment">//分子集之后，重新单独合并 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">0</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">bool</span>,<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; &gt; check(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ns)&#123;<span class="comment">//检验每个集合变化状态是否相同 </span></span><br><span class="line"><span class="comment">//1:可视为一整体  0需要拆分,则返回一个集合簇 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; res,run;</span><br><span class="line"><span class="keyword">if</span>(ns.size()==<span class="number">1</span>)&#123;<span class="comment">//单个元素无法拆分 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">run.push_back(ns);</span><br><span class="line"><span class="keyword">bool</span> allflag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>( (<span class="keyword">int</span>)run.size()!=<span class="number">0</span> )&#123;<span class="comment">//直到每个子集都不可划分 </span></span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> nset:run)&#123;</span><br><span class="line"><span class="keyword">bool</span> nsetflag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:diff)&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">bool</span>,<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; &gt; p= divide(nset,c);</span><br><span class="line"><span class="keyword">if</span>(p.first==<span class="number">0</span>)&#123;</span><br><span class="line">allflag=<span class="number">0</span>;</span><br><span class="line">nsetflag=<span class="number">0</span>;</span><br><span class="line">tp.insert(tp.end(),p.second.begin(),p.second.end());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nsetflag)&#123;<span class="comment">//说明这个子集暂时不可拆分了 </span></span><br><span class="line">res.push_back(nset); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">run=tp;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(allflag,res);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">min_dfa</span><span class="params">()</span></span>&#123;<span class="comment">//对dfav进行最小化 </span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; dfav[] 记录了图 </span></span><br><span class="line"><span class="comment">//map&lt;int,node&gt; mp 记录了点的信息 </span></span><br><span class="line">init();<span class="comment">//初始化 </span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; end_state,initial_state;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:mp)&#123;</span><br><span class="line"><span class="keyword">if</span>(it.second.fg)&#123;<span class="comment">//终态 </span></span><br><span class="line">end_state.insert(it.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> initial_state.insert(it.first);<span class="comment">//初态 </span></span><br><span class="line">&#125;</span><br><span class="line">unitset(initial_state);</span><br><span class="line">unitset(end_state);</span><br><span class="line">setv.push_back(end_state);</span><br><span class="line">setv.push_back(initial_state);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">1</span>; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> nset:setv)&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">bool</span>,<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; &gt; np=check(nset);</span><br><span class="line"><span class="keyword">if</span>(np.first==<span class="number">0</span>) flag=<span class="number">0</span>;</span><br><span class="line">tp.insert(tp.end(),np.second.begin(),np.second.end());</span><br><span class="line">&#125;</span><br><span class="line">setv=tp;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;<span class="comment">//已经全都不可拆分 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构图 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> nset:setv)&#123;<span class="comment">//每个集合选一个代表 </span></span><br><span class="line"><span class="keyword">char</span> rep=sec(*(nset.begin()));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c:diff)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[rep][myhash[c]]==<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">miv[rep].push_back(&#123;c,sec(matrix[rep][myhash[c]])&#125;);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入正规式：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">nfa(); </span><br><span class="line">dfa();</span><br><span class="line">min_dfa();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输入正规式：a|b*</span></span><br><span class="line"><span class="comment">a|b*的NFA是：</span></span><br><span class="line"><span class="comment">0--a-&gt;2</span></span><br><span class="line"><span class="comment">0--^-&gt;3</span></span><br><span class="line"><span class="comment">0--b-&gt;3</span></span><br><span class="line"><span class="comment">2--^-&gt;1</span></span><br><span class="line"><span class="comment">3--^-&gt;0</span></span><br><span class="line"><span class="comment">3--^-&gt;1</span></span><br><span class="line"><span class="comment">序号集合：</span></span><br><span class="line"><span class="comment">0 是终态，集合为：0 1 3</span></span><br><span class="line"><span class="comment">1 是终态，集合为：1 2</span></span><br><span class="line"><span class="comment">DFA是：</span></span><br><span class="line"><span class="comment">0--a-&gt;1</span></span><br><span class="line"><span class="comment">0--b-&gt;0</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的ACM之旅</title>
      <link href="2020/01/15/%E6%88%91%E7%9A%84ACM%E4%B9%8B%E6%97%85/"/>
      <url>2020/01/15/%E6%88%91%E7%9A%84ACM%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>仅以此来记录我短暂的ACM时光</strong></p><p><strong>从一个蒟蒻成长为一只年龄更大的蒟蒻</strong></p></blockquote><p>   大一上学期，在CY的”怂恿“下，我加入了院里的算法组织，可能是当时的自己太无聊，没什么事情可做，于是就开始学算法啦。在实验室里认识了很多🐂的小伙伴，包括之后的队友。</p><p>  受到很多人的帮助，我的算法学习也渐渐步入正轨。但是对于弱校，我知道参加*CPC对于当时的我是奢望，一是学校不太支持，二是没有现场赛的名额。哎，当时想，反正这些和我也没啥关系，先好好学吧。不学可能就不会有下面这些经历了。💩💩💩</p><h2 id="第一次参加校赛"><a class="markdownIt-Anchor" href="#第一次参加校赛"></a> 第一次参加校赛</h2><p><img src="https://i.loli.net/2021/01/08/3Y4itnCVkKq5RcL.jpg" alt="" /></p><p>还记得，前一天还和CY吃了一顿不太好吃的火锅，拉了好几回肚子。</p><h2 id="熬夜打cf的日子"><a class="markdownIt-Anchor" href="#熬夜打cf的日子"></a> 熬夜打CF的日子</h2><p><img src="https://i.loli.net/2021/01/08/EAodOnhKcJCS3iV.jpg" alt="" /></p><p>卑微，但是一起补题很nice</p><h2 id="2019-蓝桥杯国赛北京"><a class="markdownIt-Anchor" href="#2019-蓝桥杯国赛北京"></a> 2019 蓝桥杯国赛（北京）</h2><img src="https://i.loli.net/2021/01/08/yJH9adhoi2AQgxq.jpg" style="zoom:30%;" /><p>和CY和BJ在北京街头急速狂奔还是错过了故宫的闭关时间，门口看见熟悉的咕咕咕</p><p><img src="https://i.loli.net/2021/01/08/4z1hGx2oNbAfViX.jpg" alt="" /></p><p>北京卧铺回来的三兄弟，讲道理，我睡得还挺香的</p><h2 id="2019-jscpc"><a class="markdownIt-Anchor" href="#2019-jscpc"></a> 2019 JSCPC</h2><p><img src="https://i.loli.net/2021/01/08/uWEIRB9K2hrG4Tf.jpg" alt="" /></p><p>第一次现场赛，没打铁就是胜利，没想到稳扎稳打拿了一等，当即晚上奖励了一顿火锅🍻</p><h2 id="2019-icpc南昌邀请赛"><a class="markdownIt-Anchor" href="#2019-icpc南昌邀请赛"></a> 2019 ICPC南昌邀请赛</h2><p><img src="https://i.loli.net/2021/01/08/QO8o5pIZT9NLmcu.jpg" alt="" /></p><p><img src="https://i.loli.net/2021/01/08/gBdxusj3H96mCPb.jpg" alt="这是BJ的主意" /></p><p><img src="https://i.loli.net/2021/01/08/TxEkLerubQHIj6d.jpg" alt="" /></p><p>第一次出省打ICPC结果就这么惨，收获了第一枚铁牌（<s>S奖</s>），也清楚认识到了自己的不足。</p><h2 id="wannafly训练营"><a class="markdownIt-Anchor" href="#wannafly训练营"></a> Wannafly训练营</h2><img src="https://i.loli.net/2021/01/08/iqmxvcFUBz81y4a.jpg" style="zoom:33%;" /><img src="https://i.loli.net/2021/01/08/rOslGvt2nCgA7oH.jpg" alt="和wls合影" style="zoom:50%;" /><img src="https://i.loli.net/2021/01/08/admIjpuCVqQJyfL.jpg" style="zoom:50%;" /><p>见到了很多巨佬，也认识了很多一起努力的人。</p><h2 id="2019-icpc区域赛南京"><a class="markdownIt-Anchor" href="#2019-icpc区域赛南京"></a> 2019 ICPC区域赛（南京）</h2><p><img src="https://i.loli.net/2021/01/08/Mmo4Y8SqjRzV56X.jpg" alt="" /></p><img src="https://i.loli.net/2021/01/08/vz8UMQjC7EDI6Tp.jpg" style="zoom:30%;" /><p>没有想象中的狂喜，感觉一切都值了</p><h2 id="2019-icpc-ec-final-西安"><a class="markdownIt-Anchor" href="#2019-icpc-ec-final-西安"></a> 2019 ICPC EC-Final （西安）</h2><img src="https://i.loli.net/2021/01/08/7wDgbnHoOGx9B3J.jpg" style="zoom:30%;" /><p><img src="https://i.loli.net/2021/01/08/adQhJZrD4tXL5AF.jpg" alt="" /></p><img src="https://i.loli.net/2021/01/08/g7r9WG4dyVPDte1.jpg" style="zoom:33%;" /><p>最后一战退役了，没打铁就是胜利。快乐的时光总是短暂</p><h2 id="终"><a class="markdownIt-Anchor" href="#终"></a> 终</h2><img src="https://i.loli.net/2021/01/08/CpHJvS2qyaT91b4.jpg" style="zoom:33%;" /><p>  虽然只打了几场现场赛，感觉才开始就结束了，但是过程真的很充实（<s>因为一直在刷题啊💩</s>）。感谢一路帮助我的伙伴还有一起努力的队友。</p><blockquote><p><strong>You will tell the story on when these dreams will come true</strong></p><p><strong>你能讲述这个故事，在梦实现之时</strong></p><p><strong>So let’s keep on walking 'til we reach the end</strong></p><p><strong>所以继续前行吧，直到尽头</strong></p></blockquote><blockquote><p><em>比赛结束后就无缝衔接进入了备研阶段，这个其实也是最近才写的，<s>都2021了，时间真快</s></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 闲来叭叭 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊的SPFA判断负环</title>
      <link href="2019/11/15/%E7%89%B9%E6%AE%8A%E7%9A%84SPFA%E5%88%A4%E6%96%AD%E8%B4%9F%E7%8E%AF/"/>
      <url>2019/11/15/%E7%89%B9%E6%AE%8A%E7%9A%84SPFA%E5%88%A4%E6%96%AD%E8%B4%9F%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.cnblogs.com/myx12345/p/6212893.html">别人的介绍</a></strong></p><p><strong>借用了大佬的思考：</strong></p><p>赋所有dis[i]=0，跑最长路，如果某个元素入队次数超过点数就说明有正环。</p><p>使用DFS版本的SPFA做比BFS快10倍，为什么？</p><p>论文里高大上看不懂，蒟蒻用简单粗暴的方法想了一下：</p><p>如果某个环有K个点组成，BFS会从K个点中的某个点开始，每次都换一个点扩展一次，可能达到O（N*K^2）</p><p>DFS则只选其中的一个点不断扩展，K次就能使自己重新入队一次，这样就是O（N*K）</p><p>孰优孰劣一眼分明。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> T,n,M1,M2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> to,w;&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[N];</span><br><span class="line"> </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[u].push_back(&#123;v,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ins[N],dis[N],t[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ck</span><span class="params">()</span></span>&#123; <span class="comment">//判断负环 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) ins[i]=dis[i]=t[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        ins[i]=<span class="number">1</span>,t[i]=<span class="number">1</span>;</span><br><span class="line">        stk.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>(!stk.empty())&#123;</span><br><span class="line">        u=stk.top(),stk.pop();</span><br><span class="line">        ins[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> tp:G[u])&#123;</span><br><span class="line">            <span class="keyword">int</span> to=tp.to,w=tp.w;</span><br><span class="line">            <span class="keyword">if</span>(dis[to]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[to]=dis[u]+w;</span><br><span class="line">                <span class="keyword">if</span>(!ins[to])&#123;</span><br><span class="line">                    stk.push(to);</span><br><span class="line">                    ins[to]=<span class="number">1</span>,t[to]++;</span><br><span class="line">                    <span class="keyword">if</span>(t[to]==n+<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//有负环 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//无负环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) L - LRU Algorithm Gym - 102394L (模拟+字典树)</title>
      <link href="2019/11/14/(CodeForces)%20L%20-%20LRU%20Algorithm%20Gym-102394L/"/>
      <url>2019/11/14/(CodeForces)%20L%20-%20LRU%20Algorithm%20Gym-102394L/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/gym/102394/problem/L">传送门</a></h1><p><em><strong>题意：</strong></em> 给定一个n个数的数字序列，第i个数为a[i]，每次操作会将a[i]插入或移到最前端：</p><p>1.若a[i]已经在序列中出现过，则将其移到最前端，并删除原出现位置</p><p>2.若a[i]未出现过，则直接将其插入到最前端</p><p>有q个询问，每个询问给出一个长度为m的序列，问是否在某个时刻询问序列与操作的序列相同，忽略后缀的0</p><p>（就是操作系统中的LRU，刚好在学</p><p><em><strong>解：</strong></em> 由于物理块的个数不知道，我们可以忽略最近最久未使用的删除操作，只执行上述将其移动到最前面的操作；在模拟之前我们将q次查询的序列插入字典树，这里的字典树用unordered_map来操作就好了，记录每个序列的结束节点；然后我们就模拟lru，每一次循环，就在字典树中跑一次当前的list，跑到的点就vis为1，这样我们最后只要看结束节点就可以了（用stl是很方便，不过被卡了就很难受了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> T,n,q,a[N],len[N],b[N];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tr[N];</span><br><span class="line"><span class="keyword">int</span> cnt,root;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    tr[cnt].clear(),vis[cnt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    root=newnode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[rt].count(b[i]))&#123;</span><br><span class="line">            tr[rt][b[i]]=newnode();</span><br><span class="line">        &#125;</span><br><span class="line">        rt=tr[rt][b[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;<span class="comment">//结点坐标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ls[N];</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator mp[N];</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; li;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    li.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) mp[a[i]]=li.end();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[a[i]]!=li.end())&#123;</span><br><span class="line">            li.erase(mp[a[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        li.push_front(a[i]);</span><br><span class="line">        mp[a[i]]=li.begin();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> rt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u:li)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tr[rt].count(u))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rt=tr[rt][u];</span><br><span class="line">            vis[rt]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(tr[rt].count(<span class="number">0</span>))&#123;</span><br><span class="line">            rt=tr[rt][<span class="number">0</span>];</span><br><span class="line">            vis[rt]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查所有查询串的结束节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[ls[i]]) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        init();</span><br><span class="line">        read(n),read(q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) read(a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">            read(len[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len[i];++j) read(b[j]);</span><br><span class="line">            ls[i]=add(len[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) F - Rectangles Gym - 101982F (线段树+扫描线)</title>
      <link href="2019/10/16/(CodeForces)%20F%20-%20Rectangles%20Gym%20-%20101982F/"/>
      <url>2019/10/16/(CodeForces)%20F%20-%20Rectangles%20Gym%20-%20101982F/</url>
      
        <content type="html"><![CDATA[<p><em><strong>题意：</strong></em> 给出n个矩形的位置，问重叠奇数个矩形的面积之和</p><p><em><strong>解：</strong></em> 求面积并的时候是只要线段被覆盖的次数大于0，那就是算进去的，而这个只要奇数覆盖，所以只要异或就可以了，只有奇数次覆盖的线段，我们才考虑了。（把扫描线的知识都忘了，那时候也没学好</p><p><strong><a href="https://blog.csdn.net/xianpingping/article/details/83032798">学习扫描线</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll l,r,h;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;tp )<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h&lt;tp.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;line[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll s[N&lt;&lt;<span class="number">1</span>],sz[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">bool</span> lz[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">cg</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//反转</span></span><br><span class="line">    <span class="keyword">int</span> all=s[r]-s[l];</span><br><span class="line">    sz[rt]=all-sz[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lz[rt])&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        cg(rt&lt;&lt;<span class="number">1</span>,l,mid),cg(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid,r);</span><br><span class="line">        lz[rt&lt;&lt;<span class="number">1</span>]^=<span class="number">1</span>,lz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">        lz[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=s[l] &amp;&amp; R&gt;=s[r])&#123;</span><br><span class="line">        cg(rt,l,r);</span><br><span class="line">        lz[rt]^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    pushdown(rt,l,r);</span><br><span class="line">    <span class="keyword">if</span>(L&lt;s[mid]) update(l,mid,rt&lt;&lt;<span class="number">1</span>,L,R);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;s[mid]) update(mid,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">    sz[rt]=sz[rt&lt;&lt;<span class="number">1</span>]+sz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2,cnt=<span class="number">0</span>,tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        line[++cnt]=&#123;x1,x2,y1&#125;;</span><br><span class="line">        line[++cnt]=&#123;x1,x2,y2&#125;;</span><br><span class="line">        s[++tot]=x1,s[++tot]=x2;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(line+<span class="number">1</span>,line+cnt+<span class="number">1</span>);</span><br><span class="line">    sort(s+<span class="number">1</span>,s+tot+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> all=unique(s+<span class="number">1</span>,s+tot+<span class="number">1</span>)-(s+<span class="number">1</span>);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        update(<span class="number">1</span>,all,<span class="number">1</span>,line[i].l,line[i].r);</span><br><span class="line">        ans+=sz[<span class="number">1</span>]*(line[i+<span class="number">1</span>].h-line[i].h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) J - Shopping Gym - 101201J (线段树+取模)</title>
      <link href="2019/10/15/(CodeForces)%20J%20-%20Shopping%20Gym%20-%20101201J/"/>
      <url>2019/10/15/(CodeForces)%20J%20-%20Shopping%20Gym%20-%20101201J/</url>
      
        <content type="html"><![CDATA[<p><em><strong>题意</strong></em> :每次给你v ,l,r,让你将v逐个对区间l~r的数取模，求最后结果。</p><p><em><strong>解：</strong></em> 对于一个数取模，那只有模数小于等于它取模才有意义，要不然取模的结果还是它本身，所以我们取区间中第一个小于等于该数的，并从他的位置向后继续找，因为取模每次下降一半，然后找区间小于该数最先出现的线段树即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line">ll a[N];</span><br><span class="line">ll mi[<span class="number">4</span>*N];</span><br><span class="line">  <span class="keyword">int</span> n,q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    mi[rt]=min(mi[rt&lt;&lt;<span class="number">1</span>],mi[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">        mi[rt]=a[l];</span><br><span class="line">   <span class="comment">//     cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; :&quot;&lt;&lt;a[l]&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll id,w;</span><br><span class="line">&#125;tp,qu;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,ll X)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mi[rt]&gt;X) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;L || R&lt;l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">   <span class="comment">//     cout&lt;&lt;rt&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; :&quot;&lt;&lt;mi[rt]&lt;&lt;endl;</span></span><br><span class="line">        qu=&#123;l,mi[rt]&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mi[rt&lt;&lt;<span class="number">1</span>]&lt;=X &amp;&amp; L&lt;=mid)&#123;</span><br><span class="line">        query(rt&lt;&lt;<span class="number">1</span>,l,mid,L,R,X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qu.id!=<span class="number">0</span> &amp;&amp; qu.w!=<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(mi[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&lt;=X &amp;&amp; R&gt;mid)&#123;</span><br><span class="line">        query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,X);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">check</span><span class="params">(ll v,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=l,R=r;</span><br><span class="line">    ll nv=v;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)&#123;</span><br><span class="line">        qu=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        query(<span class="number">1</span>,<span class="number">1</span>,n,L,R,nv);</span><br><span class="line">   <span class="comment">//     cout&lt;&lt;qu.id&lt;&lt;&quot; &quot;&lt;&lt;qu.w&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(qu.id==<span class="number">0</span> &amp;&amp; qu.w==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nv%=qu.w;</span><br><span class="line">            <span class="keyword">if</span>(nv==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            L=qu.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        ll v;<span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%d&quot;</span>,&amp;v,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,check(v,l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) D 德育分博弈政治课 (网络流)</title>
      <link href="2019/10/12/(Nowcoder)%20D%20%E5%BE%B7%E8%82%B2%E5%88%86%E5%8D%9A%E5%BC%88%E6%94%BF%E6%B2%BB%E8%AF%BE/"/>
      <url>2019/10/12/(Nowcoder)%20D%20%E5%BE%B7%E8%82%B2%E5%88%86%E5%8D%9A%E5%BC%88%E6%94%BF%E6%B2%BB%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/1114/D">传送门</a></h1><p>解：这个题一开始真没想到网络流，只考虑数字不一样的骰子（用二进制就可以区分了），然后这些骰子可以变成不同的数字，对于每一次询问，我们考虑建图就可以了，从源点到每一个骰子连一条流量为骰子个数，骰子可以给他能变得数字连一条无穷大得边，然后每个数字连一条对于这次询问他所需要个数的边到汇点即可。</p><p>一开始T了，以为是vector初始化的原因</p><p>换自己前向星的板子，才发现自己板子假了，重现搞了一个</p><p>最后发现是自己建了很多重边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[N];</span><br><span class="line"><span class="keyword">int</span> dep[N], arc[N],n,q,s=<span class="number">60</span>,t=<span class="number">550</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s; i&lt;=t; ++i) eg[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t)    <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>],sq[<span class="number">2000005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; all;</span><br><span class="line"><span class="keyword">int</span> nd[<span class="number">10</span>],base=<span class="number">515</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str),sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">sum+=(<span class="number">1</span>&lt;&lt;(str[i]-<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">num[sum]++;<span class="comment">//记录相同类型骰子个数</span></span><br><span class="line"><span class="keyword">if</span>(all.find(sum)==all.end()) &#123;</span><br><span class="line">all.insert(sum);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">a[str[i]-<span class="string">&#x27;0&#x27;</span>].pb(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line">init(),ms(nd,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sq);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(sq);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">nd[sq[i]-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:all) &#123;</span><br><span class="line">add(s,to,num[to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!nd[i]) <span class="keyword">continue</span>;</span><br><span class="line">add(i+base,t,nd[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> fr:a[i]) &#123;</span><br><span class="line">add(fr,i+base,inf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dinic(s,t)==len) <span class="built_in">printf</span>(<span class="string">&quot;dyf\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;zzk\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">8e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nex,cap,flow;</span><br><span class="line">&#125; edge[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n,s,t,cur[N],d[N],head[N],tol;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n,<span class="keyword">int</span> _s,<span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123;</span><br><span class="line">n=_n,s=_s,t=<span class="keyword">_t</span>,tol=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) head[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">edge[tol].to=v,edge[tol].cap=c,edge[tol].flow=<span class="number">0</span>;</span><br><span class="line">edge[tol].nex=head[u],head[u]=tol++;</span><br><span class="line">edge[tol].to=u,edge[tol].cap=<span class="number">0</span>,edge[tol].flow=<span class="number">0</span>;</span><br><span class="line">edge[tol].nex=head[v],head[v]=tol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> que[N],front,tail;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) vis[i]=<span class="literal">false</span>;</span><br><span class="line">front=<span class="number">0</span>,tail=<span class="number">-1</span>,que[++tail]=s,vis[s]=<span class="literal">true</span>,d[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(front&lt;=tail) &#123;</span><br><span class="line"><span class="keyword">int</span> x=que[front++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; ~i; i=edge[i].nex) &#123;</span><br><span class="line">Edge&amp; e=edge[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[e.to]&amp;&amp;e.cap&gt;e.flow) &#123;</span><br><span class="line">vis[e.to]=<span class="literal">true</span>;</span><br><span class="line">d[e.to]=d[x]+<span class="number">1</span>;</span><br><span class="line">que[++tail]=e.to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==t || a==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>,f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[x]; ~i; i=edge[i].nex) &#123;</span><br><span class="line">Edge&amp; e=edge[i];</span><br><span class="line"><span class="keyword">if</span>(d[x]+<span class="number">1</span>==d[e.to] &amp;&amp; (f=dfs(e.to,min(a,e.cap-e.flow)))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.flow+=f,edge[i^<span class="number">1</span>].flow-=f;</span><br><span class="line">flow+=f,a-=f;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs()) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) cur[i]=head[i];</span><br><span class="line">flow+=dfs(s,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dinic;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>],sq[<span class="number">2000005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; all;</span><br><span class="line"><span class="keyword">int</span> nd[<span class="number">10</span>],n,Q,num[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,t=<span class="number">650</span>,base=<span class="number">600</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;Q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str),sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">sum+=(<span class="number">1</span>&lt;&lt;(str[i]-<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">num[sum]++;<span class="comment">//记录相同类型骰子个数</span></span><br><span class="line"><span class="keyword">if</span>(all.find(sum)==all.end()) &#123;</span><br><span class="line">all.insert(sum);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">a[str[i]-<span class="string">&#x27;0&#x27;</span>].pb(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(Q--) &#123;</span><br><span class="line">dinic.init(t+<span class="number">5</span>,s,t);</span><br><span class="line">ms(nd,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sq);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(sq);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">nd[sq[i]-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:all) &#123;</span><br><span class="line">dinic.add(s,to,num[to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!nd[i]) <span class="keyword">continue</span>;</span><br><span class="line">dinic.add(i+base,t,nd[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> fr:a[i]) &#123;</span><br><span class="line">dinic.add(fr,i+base,inf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dinic.Maxflow()==len) <span class="built_in">printf</span>(<span class="string">&quot;dyf\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;zzk\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P3121 [USACO15FEB]审查（黄金）Censoring (Gold) (AC自动机)</title>
      <link href="2019/10/12/(Luogu)%20P3121%20%5BUSACO15FEB%5D%E5%AE%A1%E6%9F%A5%EF%BC%88%E9%BB%84%E9%87%91%EF%BC%89/"/>
      <url>2019/10/12/(Luogu)%20P3121%20%5BUSACO15FEB%5D%E5%AE%A1%E6%9F%A5%EF%BC%88%E9%BB%84%E9%87%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://www.luogu.org/problem/P3121">传送门</a></h1><p><em><strong>题意：</strong></em> 给你匹配串，然后有很多模式串，要删除匹配串中所有的模式串（删除的过程中，可能会出现新的模式串</p><p><em><strong>解：</strong></em> 匹配的过程中，我们可以用个栈去记录，一旦匹配，减去长度，就可以回去到删除后最后一个字符的节点处</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">26</span>],fail,flag;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">char</span> stk[N],str[N],ss[N];</span><br><span class="line"><span class="keyword">int</span> stpos[N],n;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>,top=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">1</span>,len=<span class="built_in">strlen</span>(s),id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!tr[root].son[id])&#123;</span><br><span class="line">tr[root].son[id]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">root=tr[root].son[id];</span><br><span class="line">&#125; </span><br><span class="line">tr[root].flag=len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i) tr[<span class="number">0</span>].son[i]=<span class="number">1</span>;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> u,ufail,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">u=q.front(),ufail=tr[u].fail,q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">v=tr[u].son[i];</span><br><span class="line"><span class="keyword">if</span>(!v)&#123;</span><br><span class="line">tr[u].son[i]=tr[ufail].son[i];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">tr[v].fail=tr[ufail].son[i];</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),root=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">stk[++top]=s[i];</span><br><span class="line">stpos[top]=root;<span class="comment">//上一个节点 </span></span><br><span class="line">root=tr[root].son[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(tr[root].flag)&#123;</span><br><span class="line">top-=tr[root].flag,root=stpos[top+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ss);</span><br><span class="line">add(ss);</span><br><span class="line">&#125;</span><br><span class="line">getFail();</span><br><span class="line">match(str);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,stk[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019 CCPC 秦皇岛) A - Angle Beats (计算几何)</title>
      <link href="2019/10/10/(2019%20CCPC%20%E7%A7%A6%E7%9A%87%E5%B2%9B)%20A%20-%20Angle%20Beats/"/>
      <url>2019/10/10/(2019%20CCPC%20%E7%A7%A6%E7%9A%87%E5%B2%9B)%20A%20-%20Angle%20Beats/</url>
      
        <content type="html"><![CDATA[<p><em><strong>解：</strong></em> 没做过几何题，但还是看了这个题，思想还是很简单的，分两类，一个就是以询问点为直角点，再选出一个点求出一个斜率，然后求在另一条边上的点；第二类就是询问点不是直角点，那就其他的点作为直角点，来更新这q次询问的点。</p><p>然后就是怎么写不T呢，看到一种map维护的写法很妙啊，键值为向量，就是斜率，然后值就是个数，但是我们可以将所有的向量都变到一二象限，因为对于一条边，顺时针的直角和逆时针的直角都是一样的，我们在这将其归为一类，所以可以通过（-x,-y）转化即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">5</span>; </span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line"><span class="function">il node <span class="title">change</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span> || (x==<span class="number">0</span> &amp;&amp; y&lt;<span class="number">0</span>)) <span class="keyword">return</span> &#123;-x,-y&#125;;</span><br><span class="line"><span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">node <span class="keyword">operator</span> -(<span class="keyword">const</span> node &amp;tp) <span class="keyword">const</span>&#123; <span class="comment">//保证在一二象限，角度减小180，但求得直角，所以不影响 </span></span><br><span class="line"><span class="keyword">return</span> &#123;x-tp.x,y-tp.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;tp)<span class="keyword">const</span>&#123;<span class="comment">//角度从小到大 </span></span><br><span class="line">node na=change(),nb=tp.change();</span><br><span class="line"><span class="keyword">return</span> na.x*nb.y &lt; na.y*nb.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[N],qu[N];</span><br><span class="line"><span class="built_in">map</span>&lt;node,<span class="keyword">int</span>&gt; mp; </span><br><span class="line"><span class="keyword">int</span> n,q,ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;qu[i].x&gt;&gt;qu[i].y;</span><br><span class="line">&#125;</span><br><span class="line">node k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;<span class="comment">//询问点作为直角点 </span></span><br><span class="line">mp.clear(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">mp[a[j]-qu[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">k=a[j]-qu[i];</span><br><span class="line">k=&#123;-k.y,k.x&#125;;</span><br><span class="line">ans[i]+=mp[k];</span><br><span class="line">&#125;</span><br><span class="line">ans[i]/=<span class="number">2</span>;<span class="comment">//因为一个直角被算了两遍 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;<span class="comment">//询问点不作为直角点 </span></span><br><span class="line">mp.clear(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=j) mp[a[j]-a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=q;++j)&#123;</span><br><span class="line">k=qu[j]-a[i];</span><br><span class="line">k=&#123;-k.y,k.x&#125;;</span><br><span class="line">ans[j]+=mp[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P3950 部落冲突 (LCT || 树链剖分)</title>
      <link href="2019/10/05/(Luogu)%20P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81%20(LCT%20%20%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86)/"/>
      <url>2019/10/05/(Luogu)%20P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81%20(LCT%20%20%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://www.luogu.org/problem/P3950">传送门</a></h1><h2 id="1-lct解决"><a class="markdownIt-Anchor" href="#1-lct解决"></a> 1. LCT解决</h2><p><em><strong>解：</strong></em> LCT解决这个就非常直接了，直接断边连边，检查一下连通性就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> f[N],ch[N][<span class="number">2</span>],v[N],s[N],st[N],sz[N];</span><br><span class="line"><span class="keyword">bool</span> r[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x || ch[f[x]][<span class="number">1</span>]==x; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">sz[x]=sz[ls]+sz[rs]+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">swap(ls,rs),r[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls) reverse(ls);</span><br><span class="line"><span class="keyword">if</span>(rs) reverse(rs);</span><br><span class="line">r[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=f[x],z=f[y],k=(ch[y][<span class="number">1</span>]==x),w=ch[x][!k];</span><br><span class="line"><span class="keyword">if</span>(isroot(y))ch[z][ch[z][<span class="number">1</span>]==y]=x;</span><br><span class="line">ch[x][!k]=y,ch[y][k]=w;</span><br><span class="line"><span class="keyword">if</span>(w) f[w]=y;</span><br><span class="line">f[y]=x,f[x]=z;</span><br><span class="line">pushup(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=x,z=<span class="number">0</span>;</span><br><span class="line">st[++z]=y;</span><br><span class="line"><span class="keyword">while</span>(isroot(y)) st[++z]=y=f[y];</span><br><span class="line"><span class="keyword">while</span>(z) pushdown(st[z--]);</span><br><span class="line"><span class="keyword">while</span>(isroot(x))&#123;</span><br><span class="line">y=f[x],z=f[y];</span><br><span class="line"><span class="keyword">if</span>(isroot(y)) rotate((ch[y][<span class="number">0</span>]==x)^(ch[z][<span class="number">0</span>]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;x;x=f[y=x])&#123;</span><br><span class="line">splay(x),rs=y,pushup(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">access(x),splay(x);</span><br><span class="line">reverse(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//查找在原树的根 </span></span><br><span class="line">access(x),splay(x);</span><br><span class="line"><span class="keyword">while</span>(ls) pushdown(x),x=ls;</span><br><span class="line">splay(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line">access(y),splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保证合法的情况下 </span></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">makeroot(x),f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">split(x,y);</span><br><span class="line">f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">int</span> x,y,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line">link(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="keyword">if</span>(findroot(x)==findroot(y)) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line">q[++cnt]=&#123;x,y&#125;;</span><br><span class="line">cut(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">read(x);</span><br><span class="line">link(q[x].u,q[x].v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-树链剖分解决"><a class="markdownIt-Anchor" href="#2-树链剖分解决"></a> 2. 树链剖分解决</h2><p><em><strong>解：</strong></em> 当边上有战争时，那就将这条边+1，查询x能否到y，就是查询x到y的路径权值和是否为0，树剖本来维护点，我们将每条边分给边上深度较大的一个点上，无论是修改还是查询操作，先全部算上，然后只要对x，y的最近公共祖先取消他的操作就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N]; </span><br><span class="line"><span class="keyword">int</span> n,m,dep[N],sz[N],son[N],fa[N],id[N],bel[N],cnt;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ff)</span></span>&#123;</span><br><span class="line">fa[x]=ff,dep[x]=dep[ff]+<span class="number">1</span>,sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:G[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(to==ff) <span class="keyword">continue</span>;</span><br><span class="line">dfs1(to,x);</span><br><span class="line">sz[x]+=sz[to];</span><br><span class="line"><span class="keyword">if</span>(sz[to]&gt;mx) son[x]=to,mx=sz[to];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topx)</span></span>&#123;</span><br><span class="line">id[x]=++cnt,bel[x]=topx;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span> ;</span><br><span class="line">dfs2(son[x],topx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:G[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(to==fa[x] || to==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(to,to);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lz[N&lt;&lt;<span class="number">2</span>],s[N&lt;&lt;<span class="number">2</span>],tsz[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lz[rt])&#123;</span><br><span class="line">lz[rt&lt;&lt;<span class="number">1</span>]+=lz[rt],lz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lz[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>]+=tsz[rt&lt;&lt;<span class="number">1</span>]*lz[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=tsz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*lz[rt];</span><br><span class="line">lz[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tsz[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">tsz[rt]=tsz[rt&lt;&lt;<span class="number">1</span>]+tsz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">s[rt]+=C*tsz[rt],lz[rt]+=C;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(rt);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) update(l,mid,rt&lt;&lt;<span class="number">1</span>,L,R,C);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) update(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,C);</span><br><span class="line">s[rt]=s[rt&lt;&lt;<span class="number">1</span>]+s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line"><span class="keyword">return</span> s[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">pushdown(rt);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) ans+=query(l,mid,rt&lt;&lt;<span class="number">1</span>,L,R);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) ans+=query(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(bel[x]!=bel[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[bel[x]]&lt;dep[bel[y]]) swap(x,y);</span><br><span class="line">update(<span class="number">1</span>,n,<span class="number">1</span>,id[bel[x]],id[x],w);</span><br><span class="line">x=fa[bel[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">update(<span class="number">1</span>,n,<span class="number">1</span>,id[x],id[y],w);</span><br><span class="line">update(<span class="number">1</span>,n,<span class="number">1</span>,id[x],id[x],-w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">r_ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bel[x]!=bel[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[bel[x]]&lt;dep[bel[y]]) swap(x,y);</span><br><span class="line">res+=query(<span class="number">1</span>,n,<span class="number">1</span>,id[bel[x]],id[x]);</span><br><span class="line">x=fa[bel[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">res+=query(<span class="number">1</span>,n,<span class="number">1</span>,id[x],id[y]);</span><br><span class="line">res-=query(<span class="number">1</span>,n,<span class="number">1</span>,id[x],id[x]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">int</span> x,y,tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line">G[x].pb(y),G[y].pb(x);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="keyword">if</span>(r_ask(x,y)==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line">q[++tot]=&#123;x,y&#125;;</span><br><span class="line">r_update(x,y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">read(x);</span><br><span class="line">r_update(q[x].u,q[x].v,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> lct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCT动态树-基础模板（luogu P3690）</title>
      <link href="2019/10/04/LCT%E5%8A%A8%E6%80%81%E6%A0%91-%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/10/04/LCT%E5%8A%A8%E6%80%81%E6%A0%91-%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="学习来自"><a class="markdownIt-Anchor" href="#学习来自"></a> <a href="https://www.cnblogs.com/flashhu/p/8324551.html">学习来自</a></h1><h1 id="p3690-模板link-cut-tree-动态树"><a class="markdownIt-Anchor" href="#p3690-模板link-cut-tree-动态树"></a> <a href="https://www.luogu.org/problem/P3690">P3690 【模板】Link Cut Tree （动态树）</a></h1><p>给定n个点以及每个点的权值，要你处理接下来的m个操作。操作有4种。操作从0到3编号。点从1到n编号。</p><p>0：后接两个整数(x，y)，代表询问从x到y的路径上的点的权值的xor和。保证x到y是联通的。</p><p>1：后接两个整数(x，y)，代表连接x到y，若x到y已经联通则无需连接。</p><p>2：后接两个整数(x，y)，代表删除边(x，y)，不保证边(x，y)存在。</p><p>3：后接两个整数(x，y)，代表将点x上的权值变成y。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> f[N],ch[N][<span class="number">2</span>],v[N],s[N],st[N];</span><br><span class="line"><span class="keyword">bool</span> r[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//判断节点是否为一个Splay的根</span></span><br><span class="line"><span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x || ch[f[x]][<span class="number">1</span>]==x; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//上传信息</span></span><br><span class="line">s[x]=s[ls]^s[rs]^v[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//翻转</span></span><br><span class="line">swap(ls,rs),r[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//判断并释放懒标记</span></span><br><span class="line"><span class="keyword">if</span>(r[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls) reverse(ls);</span><br><span class="line"><span class="keyword">if</span>(rs) reverse(rs);</span><br><span class="line">r[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//一次旋转</span></span><br><span class="line"><span class="keyword">int</span> y=f[x],z=f[y],k=(ch[y][<span class="number">1</span>]==x),w=ch[x][!k];</span><br><span class="line"><span class="keyword">if</span>(isroot(y))ch[z][ch[z][<span class="number">1</span>]==y]=x;</span><br><span class="line">ch[x][!k]=y,ch[y][k]=w;</span><br><span class="line"><span class="keyword">if</span>(w) f[w]=y;</span><br><span class="line">f[y]=x,f[x]=z;</span><br><span class="line">pushup(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//所有操作的目标都是该Splay的根</span></span><br><span class="line"><span class="keyword">int</span> y=x,z=<span class="number">0</span>;</span><br><span class="line">st[++z]=y;</span><br><span class="line"><span class="keyword">while</span>(isroot(y)) st[++z]=y=f[y];</span><br><span class="line"><span class="keyword">while</span>(z) pushdown(st[z--]);</span><br><span class="line"><span class="keyword">while</span>(isroot(x))&#123;</span><br><span class="line">y=f[x],z=f[y];</span><br><span class="line"><span class="keyword">if</span>(isroot(y)) rotate((ch[y][<span class="number">0</span>]==x)^(ch[z][<span class="number">0</span>]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//访问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;x;x=f[y=x])&#123;</span><br><span class="line">splay(x),rs=y,pushup(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//将x换成根</span></span><br><span class="line">access(x),splay(x);</span><br><span class="line">reverse(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//找根（在真实的树中的）</span></span><br><span class="line">access(x),splay(x);</span><br><span class="line"><span class="keyword">while</span>(ls) pushdown(x),x=ls;</span><br><span class="line">splay(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;提取路径 </span><br><span class="line">makeroot(x);</span><br><span class="line">access(y),splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//连边</span></span><br><span class="line">makeroot(x);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)!=x) f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//断边</span></span><br><span class="line">makeroot(x);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)==x &amp;&amp; f[y]==x &amp;&amp; !ch[y][<span class="number">0</span>])&#123;</span><br><span class="line">f[y]=ch[x][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//保证合法的情况下 </span></span><br><span class="line"><span class="comment">il void link(int x,int y)&#123;</span></span><br><span class="line"><span class="comment">makeroot(x),f[x]=y;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">il void cut(int x,int y)&#123;</span></span><br><span class="line"><span class="comment">split(x,y);</span></span><br><span class="line"><span class="comment">f[x]=ch[y][0]=0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> n,m,type,x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) read(v[i]);</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line">read(type),read(x),read(y);</span><br><span class="line"><span class="keyword">switch</span>(type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">split(x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[y]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">link(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cut(x,y);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">splay(x);</span><br><span class="line">v[x]=y;<span class="comment">//先把x转上去再修改，不然会影响Splay信息的正确性</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包九讲 11题</title>
      <link href="2019/09/21/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2%2011%E9%A2%98/"/>
      <url>2019/09/21/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2%2011%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="聚聚视频讲的太好了"><a class="markdownIt-Anchor" href="#聚聚视频讲的太好了"></a> 聚聚视频讲的太好了</h1><h1 id="前六讲"><a class="markdownIt-Anchor" href="#前六讲"></a> <a href="https://www.bilibili.com/video/av33930433/?p=1">前六讲</a> <a href="https://www.bilibili.com/video/av34467850/?p=2">最后三讲</a></h1><p>重新复习了一遍背包问题。</p><h2 id="题目全在这了"><a class="markdownIt-Anchor" href="#题目全在这了"></a> <a href="https://www.acwing.com/problem/">题目全在这了</a></h2><h2 id="1-01背包问题"><a class="markdownIt-Anchor" href="#1-01背包问题"></a> 1.  <em><strong>01背包问题</strong></em></h2>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v;--j) dp[j]=max(dp[j],dp[j-v]+w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-完全背包"><a class="markdownIt-Anchor" href="#2-完全背包"></a> 2. <em><strong>完全背包</strong></em></h2>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=v;j&lt;=m;++j) dp[j]=max(dp[j],dp[j-v]+w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-多重背包问题-i"><a class="markdownIt-Anchor" href="#3-多重背包问题-i"></a> 3. <em><strong>多重背包问题 I</strong></em></h2>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w,s;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v;--j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=s &amp;&amp; k*v&lt;=j;++k)&#123;</span><br><span class="line">dp[j]=max(dp[j],dp[j-k*v]+k*w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-多重背包问题-ii"><a class="markdownIt-Anchor" href="#4-多重背包问题-ii"></a> 4. <em><strong>多重背包问题 II</strong></em></h2><p>二进制拆分优化，然后作为01背包来考虑即可，将s拆成2进制表示，最后多的那个部分单独拿出来。</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; a;</span><br><span class="line"><span class="keyword">int</span> n,m,dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w,s;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=s;k*=<span class="number">2</span>)&#123;</span><br><span class="line">a.pb(&#123;v*k,w*k&#125;);</span><br><span class="line">s-=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s) a.pb(&#123;v*s,w*s&#125;);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:a)&#123;</span><br><span class="line"><span class="keyword">int</span> v=it.v,w=it.w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v;--j) dp[j]=max(dp[j],dp[j-v]+w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-多重背包问题-iii"><a class="markdownIt-Anchor" href="#5-多重背包问题-iii"></a> 5. <strong>多重背包问题 III</strong></h2><p>单调队列优化，对于一个体积为v的物品，我们考虑到他的更新，将体积%v的值进行分组，一个组之间才会有递推关系，而不同的组之间是不会有更新和递推关系的。考虑对于一个dp[j] 是从上一层dp[j-v]+w,</p><p>dp[j-2<em>v]+2</em>w…….更新来，那对于dp[j+v]就是从上一层dp[j]+w，dp[j-v]+2<em>w……更新而来，其实就是对于dp[j],dp[j+v]就是平移的一格，然后总体+w；但是原来数的大小关系并没有发生改变，所以这里用单调队列维护即可，只是加的x</em>w发生了改变，这个我们可以通过计算与j差几个v，就可以得出了嘛。</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,dp[N][<span class="number">2</span>],q[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tt=<span class="number">-1</span>,hh=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w,s;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v;++j)&#123;<span class="comment">//将体积按%v的值进行分类 </span></span><br><span class="line">tt=<span class="number">-1</span>,hh=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=m;k+=v)&#123;</span><br><span class="line">dp[k][fg]=dp[k][fg^<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt &amp;&amp; k-s*v&gt;q[hh]) hh++;</span><br><span class="line"><span class="keyword">if</span>(hh&lt;=tt) dp[k][fg]=max(dp[k][fg],dp[q[hh]][fg^<span class="number">1</span>]+(k-q[hh])/v*w);</span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt &amp;&amp; dp[q[tt]][fg^<span class="number">1</span>]-(q[tt]-j)/v*w &lt;= dp[k][fg^<span class="number">1</span>]-(k-j)/v*w) tt--; </span><br><span class="line">q[++tt]=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fg^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m][fg^<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-混合背包问题"><a class="markdownIt-Anchor" href="#6-混合背包问题"></a> 6. <em><strong>混合背包问题</strong></em></h2><p>即包含了01背包，完全背包和多重背包，这里可以将多重背包拆分成01背包，然后我们只需要考虑01背包和完全背包，这里两个注意循环的方向即可。</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N],n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> type,v,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w,s;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="number">-1</span>) a.pb(&#123;<span class="number">-1</span>,v,w&#125;);<span class="comment">//01背包 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">0</span>) a.pb(&#123;<span class="number">0</span>,v,w&#125;);<span class="comment">//多重背包 </span></span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//完全背包拆成01背包 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=s;k*=<span class="number">2</span>)&#123;</span><br><span class="line">a.pb(&#123;<span class="number">-1</span>,v*k,w*k&#125;);</span><br><span class="line">s-=k; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(s) a.pb(&#123;<span class="number">-1</span>,v*s,w*s&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:a)&#123;</span><br><span class="line">v=it.v,w=it.w;</span><br><span class="line"><span class="keyword">if</span>(it.type==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&gt;=v;--i) dp[i]=max(dp[i],dp[i-v]+w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=v;i&lt;=m;++i) dp[i]=max(dp[i],dp[i-v]+w);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-二维费用的背包问题"><a class="markdownIt-Anchor" href="#7-二维费用的背包问题"></a> 7. <em><strong>二维费用的背包问题</strong></em></h2><p>多了一维重量，这里直接考虑多循环一层重量即可，01背包从大到小进行更新即可。</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N][N],n,V,M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;V&gt;&gt;M;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,m,w;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;m&gt;&gt;w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v;--j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=M;k&gt;=m;--k)&#123;</span><br><span class="line">dp[j][k]=max(dp[j][k],dp[j-v][k-m]+w);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[V][M]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-分组背包问题"><a class="markdownIt-Anchor" href="#8-分组背包问题"></a> 8. <em><strong>分组背包问题</strong></em></h2><p>多一重循环，来判断选这一组里的哪一个</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,v[N],w[N],dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,s;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=s;++j) <span class="built_in">cin</span>&gt;&gt;v[j]&gt;&gt;w[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=s;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=v[k]) dp[j]=max(dp[j],dp[j-v[k]]+w[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-有依赖的背包问题"><a class="markdownIt-Anchor" href="#9-有依赖的背包问题"></a> 9. <em><strong>有依赖的背包问题</strong></em></h2><p>dp[i][j]:当选i为节点，空间不大于j的最大值</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N][N];<span class="comment">//dp[i][j]:当选i为节点，空间不大于j的最大值</span></span><br><span class="line"><span class="keyword">int</span> n,m,v[N],w[N],root; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> son:G[u])&#123;</span><br><span class="line">dfs(son);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m-v[u];j&gt;=<span class="number">0</span>;--j)&#123;<span class="comment">//给u空出v[u]空间，剩下的分给儿子 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=j;++k)&#123;</span><br><span class="line">dp[u][j]=max(dp[u][j],dp[u][j-k]+dp[son][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v[u];--j) dp[u][j]=dp[u][j-v[u]]+w[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=v[u]<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j) dp[u][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,np;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;np;</span><br><span class="line"><span class="keyword">if</span>(np==<span class="number">-1</span>) root=i;</span><br><span class="line"><span class="keyword">else</span> G[np].pb(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs(root);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[root][m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="10-背包问题求方案数"><a class="markdownIt-Anchor" href="#10-背包问题求方案数"></a> 10. <em><strong>背包问题求方案数</strong></em></h2><pre><code>这里初始化不能随便的默认为0了，因为这里需要更新方案数，前面的dp[i]表示体积不大于i的最大价值，（这和全部初始化为0有关，因为如果当空间为k时取得最大价值，因为我们将dp[m-k]初始化为0，所以也可以得到最值，但实际空间不为m）这样的话不利于更新方案数。现在初始话只将dp[0]定义为0，其他的定义为-inf，dp[i]表示空间恰好为i时的最大价值，这样是符合实际情况的，最后的mx是要扫一遍数组的，因为最大价值并不一定在最大空间取得。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>; </span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> &amp;x,ll y)</span> </span>&#123;<span class="keyword">return</span> x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> dp[N],num[N];</span><br><span class="line"><span class="comment">//dp[i]:体积为i时的最大价值，num[i]:满足体积为i最大价值的方案数 </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">num[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) dp[i]=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,w;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v;--j)&#123;</span><br><span class="line"><span class="keyword">int</span> mx,mxnum=<span class="number">0</span>;</span><br><span class="line">mx=max(dp[j],dp[j-v]+w);</span><br><span class="line"><span class="keyword">if</span>(mx==dp[j]) Add(mxnum,num[j]);</span><br><span class="line"><span class="keyword">if</span>(mx==dp[j-v]+w) Add(mxnum,num[j-v]);</span><br><span class="line">dp[j]=mx,num[j]=mxnum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=-inf,all=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;++j) ans=max(ans,dp[j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j]==ans) Add(all,num[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;all&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="11-背包问题求具体方案"><a class="markdownIt-Anchor" href="#11-背包问题求具体方案"></a> 11. <em><strong>背包问题求具体方案</strong></em></h2><pre><code>因为题目要求字典序，所以i从大到小着来，然后从1到n从小到大贪心的考虑。视频中代码少加了一个nv-v[i]的判断。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(int &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,dp[N][N],v[N],w[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line"><span class="comment">//从后往前更新 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=v[i]) dp[i][j]=max(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j-v[i]]+w[i]);</span><br><span class="line"><span class="keyword">else</span> dp[i][j]=dp[i+<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> nv=m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(nv-v[i]&gt;=<span class="number">0</span> &amp;&amp; dp[i][nv]==dp[i+<span class="number">1</span>][nv-v[i]]+w[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">nv-=v[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫队模板(基础莫队，带修改的莫队，树上莫队..)</title>
      <link href="2019/09/20/%E8%8E%AB%E9%98%9F%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/09/20/%E8%8E%AB%E9%98%9F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="学习于胡小兔博客"><a class="markdownIt-Anchor" href="#学习于胡小兔博客"></a> <a href="https://www.cnblogs.com/RabbitHu/p/MoDuiTutorial.html">学习于胡小兔博客</a> <a href="https://www.cnblogs.com/zwfymqz/p/9223425.html">自为风月马前卒博客</a></h1><h2 id="不带修改莫队"><a class="markdownIt-Anchor" href="#不带修改莫队"></a> <strong>不带修改莫队：</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,l,r;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">int</span> n,m,num[N],a[N],ans[N],base,sum=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">ka</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/base+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ka(x.l)==ka(y.l)?x.r&lt;y.r:x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[x]) sum++;</span><br><span class="line">num[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">num[x]--;</span><br><span class="line"><span class="keyword">if</span>(!num[x]) sum--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) read(a[i]);</span><br><span class="line">read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) read(q[i].l),read(q[i].r),q[i].id=i;</span><br><span class="line">base=<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</span><br><span class="line">sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) del(a[l++]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) add(a[--l]);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) add(a[++r]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) del(a[r--]);</span><br><span class="line">ans[q[i].id]=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="带修改莫队加入时间轴即可"><a class="markdownIt-Anchor" href="#带修改莫队加入时间轴即可"></a> <strong>带修改莫队：加入时间轴即可</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,a[N],ans[N],num[N],base,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> qid=<span class="number">0</span>,cid=<span class="number">0</span>,cur=<span class="number">0</span>,l,r;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,l,r;<span class="comment">//id即为时间轴 </span></span><br><span class="line">&#125;qu[N];</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">ka</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/base+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Q x,Q y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ka(x.l)!=ka(y.l)) <span class="keyword">return</span> x.l&lt;y.l;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ka(x.r)!=ka(y.r)) <span class="keyword">return</span> x.r&lt;y.r;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.id&lt;y.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,pos,val,pre;</span><br><span class="line">&#125;cg[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[x]) sum++;</span><br><span class="line">num[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">num[x]--;</span><br><span class="line"><span class="keyword">if</span>(!num[x]) sum--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">preadd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//增加修改操作 </span></span><br><span class="line"><span class="keyword">if</span>(cg[x].pos&gt;=l &amp;&amp; cg[x].pos&lt;=r)&#123;</span><br><span class="line">num[a[cg[x].pos]]--;</span><br><span class="line"><span class="keyword">if</span>(!num[a[cg[x].pos]]) sum--;</span><br><span class="line">&#125;</span><br><span class="line">cg[x].pre=a[cg[x].pos];</span><br><span class="line">a[cg[x].pos]=cg[x].val;</span><br><span class="line"><span class="keyword">if</span>(cg[x].pos&gt;=l &amp;&amp; cg[x].pos&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[a[cg[x].pos]]) sum++;</span><br><span class="line">num[a[cg[x].pos]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">predel</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//撤销修改操作 </span></span><br><span class="line"><span class="keyword">if</span>(cg[x].pos&gt;=l &amp;&amp; cg[x].pos&lt;=r)&#123;</span><br><span class="line">num[a[cg[x].pos]]--;</span><br><span class="line"><span class="keyword">if</span>(!num[a[cg[x].pos]]) sum--;</span><br><span class="line">&#125;</span><br><span class="line">a[cg[x].pos]=cg[x].pre;</span><br><span class="line"><span class="keyword">if</span>(cg[x].pos&gt;=l &amp;&amp; cg[x].pos&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[a[cg[x].pos]]) sum++;</span><br><span class="line">num[a[cg[x].pos]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> time)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cur&lt;cid &amp;&amp; cg[cur+<span class="number">1</span>].id&lt;time) preadd(++cur);</span><br><span class="line"><span class="keyword">while</span>(cur&gt;=<span class="number">1</span> &amp;&amp; cg[cur].id&gt;time) predel(cur--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">read(n),read(m);</span><br><span class="line">base=<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) read(a[i]);</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)qu[++qid]=&#123;i,x,y&#125;;</span><br><span class="line"><span class="keyword">else</span> cg[++cid]=&#123;i,x,y,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(qu+<span class="number">1</span>,qu+qid+<span class="number">1</span>,cmp);</span><br><span class="line">l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qid;++i)&#123;</span><br><span class="line">solve(qu[i].id);</span><br><span class="line"><span class="keyword">while</span>(l&lt;qu[i].l) del(a[l++]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;qu[i].l) add(a[--l]);</span><br><span class="line"><span class="keyword">while</span>(r&lt;qu[i].r) add(a[++r]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;qu[i].r) del(a[r--]);</span><br><span class="line">ans[qu[i].id]=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树上莫队前置技能简单分块"><a class="markdownIt-Anchor" href="#树上莫队前置技能简单分块"></a> <strong>树上莫队前置技能：（简单分块）</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,B,stk[N*<span class="number">2</span>],cap[N],bel[N],top=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> st=top,to;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(G[x]);++i)&#123;</span><br><span class="line">to=G[x][i];</span><br><span class="line"><span class="keyword">if</span>(to==f) <span class="keyword">continue</span>;</span><br><span class="line">dfs(to,x);</span><br><span class="line"><span class="keyword">if</span>(top-st&gt;=B)&#123;</span><br><span class="line">cap[++cnt]=x;</span><br><span class="line"><span class="keyword">while</span>(top&gt;st) bel[stk[top--]]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stk[++top]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;B);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">G[x].pb(y),G[y].pb(x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(top) bel[stk[top--]]=cnt;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,bel[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,cap[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种还没怎么看懂，例题是带修改的莫队</p><p>从第二篇博客学习了用括号序列解决的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,dep[N],fa[N][<span class="number">25</span>],lg[N];</span><br><span class="line"><span class="keyword">int</span> st[N],ed[N],pot[N],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],sa[N],block,ka[N*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[N],sum=<span class="number">0</span>,ans[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>,block=<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">sort(sa+<span class="number">1</span>,sa+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> sz=unique(sa+<span class="number">1</span>,sa+n+<span class="number">1</span>)-sa<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=lower_bound(sa+<span class="number">1</span>,sa+sz+<span class="number">1</span>,a[i])-sa;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,len=n*<span class="number">2</span>;i&lt;=len;++i) ka[i]=i/block+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> np,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">dep[np]=dep[f]+<span class="number">1</span>,fa[np][<span class="number">0</span>]=f;</span><br><span class="line">st[np]=++tot,pot[tot]=np;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lg[dep[np]]+<span class="number">1</span>;++i) fa[np][i]=fa[fa[np][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:G[np])&#123;</span><br><span class="line"><span class="keyword">if</span>(to!=f) dfs(to,np);</span><br><span class="line">&#125;</span><br><span class="line">ed[np]=++tot,pot[tot]=np;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">getlca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(dep[u]!=dep[v])u=fa[u][lg[dep[u]-dep[v]]];</span><br><span class="line"><span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[dep[u]];i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i]) u=fa[u][i],v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,l,r,lca;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Q x,Q y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ka[x.l]==ka[y.l]?x.r&lt;y.r:x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[x]) sum++;</span><br><span class="line">num[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">num[x]--;</span><br><span class="line"><span class="keyword">if</span>(!num[x]) sum--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">cg</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[x]) del(a[x]);</span><br><span class="line"><span class="keyword">else</span> add(a[x]);</span><br><span class="line">vis[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) read(a[i]),sa[i]=a[i];</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line">G[x].pb(y),G[y].pb(x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;++i)&#123;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="keyword">if</span>(st[x]&gt;st[y]) swap(x,y);</span><br><span class="line"><span class="keyword">int</span> lca=getlca(x,y);</span><br><span class="line"><span class="keyword">if</span>(lca==x) q[i]=&#123;i,st[x],st[y],<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> q[i]=&#123;i,ed[x],st[y],lca&#125;;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;MQ &quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;q[i].l&lt;&lt;&quot; &quot;&lt;&lt;q[i].r&lt;&lt;&quot; &quot;&lt;&lt;q[i].lca&lt;&lt;endl; </span></span><br><span class="line">&#125;</span><br><span class="line">sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;solve &quot;&lt;&lt;q[i].l&lt;&lt;&quot; &quot;&lt;&lt;q[i].r&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) cg(pot[l++]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) cg(pot[--l]);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) cg(pot[++r]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) cg(pot[r--]);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) cg(q[i].lca);</span><br><span class="line">ans[q[i].id]=sum;</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) cg(q[i].lca);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) E. Xenia and Tree (lca+分块+最短路)</title>
      <link href="2019/09/19/(CodeForces)%20E.%20Xenia%20and%20Tree/"/>
      <url>2019/09/19/(CodeForces)%20E.%20Xenia%20and%20Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://codeforces.com/contest/342/problem/E">传送门</a></h1><p><em><strong>题意</strong></em> ：给定一棵树，一开始只有1为红，其他点为蓝。两种操作：1，把一个点染成红点。2，询问一个点到最近红点的距离。</p><p><em><strong>解</strong></em> ：数据量只有1e5,n根号n*log应该是可以的，主要是这个染色后，我们不能每一次染色后都去跑一次最短路（bfs就可以了），所以我们当修改数目达到根号n时再去进行一次最短路，查询是如果有点是未更新状态，我们可以通过lca来求得两点的距离，这样就可以保证复杂度是可行的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxbit=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,base;</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][maxbit],lg[N],dis[N];<span class="comment">//dis:到红点最近的距离 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>,base=<span class="built_in">sqrt</span>(n)+<span class="number">1</span>,vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> np,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">dep[np]=dep[f]+<span class="number">1</span>,fa[np][<span class="number">0</span>]=f,dis[np]=dep[np]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lg[dep[np]]+<span class="number">1</span>;++i) fa[np][i]=fa[fa[np][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:G[np])&#123;</span><br><span class="line"><span class="keyword">if</span>(to!=f) dfs(to,np);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(dep[u]!=dep[v])u=fa[u][lg[dep[u]-dep[v]]];</span><br><span class="line"><span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[dep[u]];i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i]) u=fa[u][i],v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dep[u]+dep[v]<span class="number">-2</span>*dep[lca(u,v)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q[N],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qe;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">while</span>(!qe.empty())&#123;</span><br><span class="line">x=qe.front(),qe.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:G[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[to]&gt;dis[x]+<span class="number">1</span>)&#123;</span><br><span class="line">dis[to]=dis[x]+<span class="number">1</span>;</span><br><span class="line">qe.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[x]) <span class="keyword">return</span>;</span><br><span class="line">vis[x]=<span class="number">1</span>,dis[x]=<span class="number">0</span>,q[++cnt]=x,qe.push(x);</span><br><span class="line"><span class="keyword">if</span>(cnt==base)&#123;</span><br><span class="line">solve();</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=dis[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) ans=min(ans,dist(q[i],x));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">G[x].pb(y),G[y].pb(x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,op,x;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;op&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>) update(x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;query(x)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lca </tag>
            
            <tag> 分块 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有流量上界最小费用最大流</title>
      <link href="2019/09/18/%E6%9C%89%E6%B5%81%E9%87%8F%E4%B8%8A%E7%95%8C%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>2019/09/18/%E6%9C%89%E6%B5%81%E9%87%8F%E4%B8%8A%E7%95%8C%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>有流量上界最小费用最大流基础模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, cost, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> V,H[N+<span class="number">5</span>],dis[N+<span class="number">5</span>],PreV[N+<span class="number">5</span>],PreE[N+<span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[N+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">V=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=V; ++i) G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> cap,<span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">G[from].push_back(edge &#123;to,cap,cost,SZ(G[to])&#125;);</span><br><span class="line">G[to].push_back(edge &#123;from,<span class="number">0</span>,-cost,SZ(G[from])<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Min_cost_max_flow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> f,<span class="keyword">int</span>&amp; flow)</span> </span>&#123;</span><br><span class="line"><span class="comment">//源点   汇点  限定流量   最后的最大流</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">fill(H,H+<span class="number">1</span>+V,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (f) &#123;</span><br><span class="line"><span class="built_in">priority_queue</span> &lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;,greater&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; &gt; q;</span><br><span class="line">fill(dis,dis+<span class="number">1</span>+V,inf);</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line">q.push(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;now=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> v=now.second;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&lt;now.first) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SZ(G[v]); ++i) &#123;</span><br><span class="line">edge&amp; e = G[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dis[e.to]&gt;dis[v]+e.cost+H[v]-H[e.to]) &#123;</span><br><span class="line">dis[e.to]=dis[v]+e.cost+H[v]-H[e.to];</span><br><span class="line">PreV[e.to]=v,PreE[e.to]=i;</span><br><span class="line">q.push(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(dis[e.to],e.to));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis[t]==inf)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=V; ++i) H[i]+=dis[i];</span><br><span class="line"><span class="keyword">int</span> d=f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=t; v!=s; v=PreV[v]) d=min(d,G[PreV[v]][PreE[v]].cap);</span><br><span class="line">f-=d,flow+=d,res+=d*H[t];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v=t; v!=s; v=PreV[v]) &#123;</span><br><span class="line">edge&amp; e=G[PreV[v]][PreE[v]];</span><br><span class="line">e.cap-=d;</span><br><span class="line">G[v][e.rev].cap+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N],T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> ss=<span class="number">0</span>,s=<span class="number">1</span>,t=<span class="number">2</span>*n+<span class="number">2</span>,tt=<span class="number">2</span>*n+<span class="number">3</span>;</span><br><span class="line">init(tt+<span class="number">1</span>);</span><br><span class="line">AddEdge(ss,s,k,<span class="number">0</span>);</span><br><span class="line">AddEdge(t,tt,k,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">AddEdge(s,i+<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(i+<span class="number">1</span>+n,t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(i+<span class="number">1</span>,i+<span class="number">1</span>+n,<span class="number">1</span>,-a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;=a[i]) AddEdge(<span class="number">1</span>+i+n,<span class="number">1</span>+j,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,-Min_cost_max_flow(ss,tt,inf,ans));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019杭电多校3) Distribution of books (dp+离散化+线段树)</title>
      <link href="2019/09/17/(2019%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A13)%20Distribution%20of%20books/"/>
      <url>2019/09/17/(2019%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A13)%20Distribution%20of%20books/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6606">传送门</a></h1><p><em><strong>题意：</strong></em> n个数，可以选择前m(m自定)个数分成k块，问每块的数字和的最大值最小是多少</p><p><em><strong>解：</strong></em> 首先我们可以二分这个最小的最大值mid，然后去check，我们可以定义dp[i]，前i本书在满足&lt;=mid的情况下最多可以分成几块，那么当sum[i]&lt;=mid的情况下，dp[i]=1,反之0；更新的话dp[i]=max(dp[i],dp[i]+1) (当sum[i]-sum[j]&lt;=mid的情况下)，这样是一个n^2的复杂度显然不行，我们就是想知道那些sum[j]&gt;=sum[i]-mid的j中最大的dp[j]嘛，所以我们就建一颗权值线段树，最下面一层为sum[j],值就是dp[j],当然由于这里的sum会很大，所以需要离散化。然后dp[i]得出之后，再更新一下线段树即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">105</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> T,n,k,a[N],sid[N],tr[N&lt;&lt;<span class="number">2</span>],sz;</span><br><span class="line">ll sum[N],s[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">tr[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>),build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r)<span class="keyword">return</span> tr[rt];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) ans=max(ans,query(l,mid,L,R,rt&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) ans=max(ans,query(mid+<span class="number">1</span>,r,L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> c,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[rt]=max(tr[rt],c);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) update(l,mid,x,c,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> update(mid+<span class="number">1</span>,r,x,c,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">tr[rt]=max(tr[rt&lt;&lt;<span class="number">1</span>],tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[N];<span class="comment">//前i本书最多可以分给几个人(在区间和&lt;=x的情况下 </span></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">build(<span class="number">1</span>,sz,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) dp[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos,q,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i]&lt;=x) dp[i]=<span class="number">1</span>;</span><br><span class="line">pos=lower_bound(s+<span class="number">1</span>,s+sz+<span class="number">1</span>,sum[i]-x)-s;</span><br><span class="line">q=query(<span class="number">1</span>,sz,pos,sz,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(q!=<span class="number">0</span>) dp[i]=max(dp[i],q+<span class="number">1</span>);</span><br><span class="line">num=max(num,dp[i]);</span><br><span class="line">update(<span class="number">1</span>,sz,sid[i],dp[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&gt;=k)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">read(n),read(k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">read(a[i]),sum[i]=sum[i<span class="number">-1</span>]+a[i],s[i]=sum[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(s+<span class="number">1</span>,s+n+<span class="number">1</span>);</span><br><span class="line">sz=unique(s+<span class="number">1</span>,s+n+<span class="number">1</span>)-(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) sid[i]=lower_bound(s+<span class="number">1</span>,s+sz+<span class="number">1</span>,sum[i])-s;</span><br><span class="line">ll le=<span class="number">-1e18</span>,ri=<span class="number">1e18</span>,md,ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">while</span>(le&lt;=ri)&#123;</span><br><span class="line">md=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ck(md)) ans=md,ri=md<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> le=md+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019沈阳网络赛) B，D，H</title>
      <link href="2019/09/15/(2019%E6%B2%88%E9%98%B3%E7%BD%91%E7%BB%9C%E8%B5%9B)B,D,H/"/>
      <url>2019/09/15/(2019%E6%B2%88%E9%98%B3%E7%BD%91%E7%BB%9C%E8%B5%9B)B,D,H/</url>
      
        <content type="html"><![CDATA[<h1 id="b-dudus-maze-概率"><a class="markdownIt-Anchor" href="#b-dudus-maze-概率"></a> B. Dudu’s maze (概率)</h1><h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://nanti.jisuanke.com/t/41402">传送门</a></h1><p>解：比赛的时候思路跑偏了，看了题解才恍然大悟T T</p><p><img src="https://img-blog.csdnimg.cn/2019091510361754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img" /></p><p>cout的浮点数输出是真的麻烦呀</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> T,n,m,k,fa[N],num[N],a[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eg[N];</span><br><span class="line"><span class="keyword">bool</span> fg[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) fa[i]=i,num[i]=<span class="number">1</span>,fg[i]=<span class="number">0</span>,eg[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">fa[x]=y,num[y]+=num[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> x,y,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">eg[x].pb(y),eg[y].pb(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x,fg[x]=<span class="number">1</span>;</span><br><span class="line">a[++cnt]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(fg[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:eg[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(!fg[to]) unite(i,to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rt=find(<span class="number">1</span>),res=num[rt];</span><br><span class="line"><span class="keyword">if</span>(res==n-k)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">8</span>)&lt;&lt;<span class="number">1.0</span>*res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> res2=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> tp=a[i],yes=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:eg[tp])&#123;</span><br><span class="line"><span class="keyword">if</span>(find(to)==rt)&#123;</span><br><span class="line">yes=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yes==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:eg[tp])&#123;</span><br><span class="line"><span class="keyword">if</span>(fg[to]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(find(to)==rt) <span class="keyword">continue</span>;</span><br><span class="line">sum+=num[find(to)];</span><br><span class="line">&#125;</span><br><span class="line">res2=max(res2,<span class="number">1.0</span>*sum/SZ(eg[tp]));</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">8</span>)&lt;&lt;res2+<span class="number">1.0</span>*res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d-fish-eating-fruit-点分治"><a class="markdownIt-Anchor" href="#d-fish-eating-fruit-点分治"></a> D. Fish eating fruit (点分治)</h1><h1 id="传送门-2"><a class="markdownIt-Anchor" href="#传送门-2"></a> <a href="https://nanti.jisuanke.com/t/41403">传送门</a></h1><p>解：就是求图中所有路径%3为0，1，2的路径和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Add</span><span class="params">(ll &amp;x,ll y)</span> </span>&#123;<span class="keyword">return</span> x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Mul</span><span class="params">(ll &amp;x,ll y)</span> </span>&#123;<span class="keyword">return</span> x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span><br><span class="line"><span class="keyword">int</span> n,k,sz[maxn],root,mx,all,cnt;</span><br><span class="line">ll dis[maxn],q[maxn],ans0,ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; mp[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123; </span><br><span class="line">sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)(mp[x].size());++i)&#123;</span><br><span class="line"><span class="keyword">int</span> nto=mp[x][i].to;</span><br><span class="line"><span class="keyword">if</span>(vis[nto] || fa==nto) <span class="keyword">continue</span>;</span><br><span class="line">getroot(nto,x);</span><br><span class="line">sz[x]+=sz[nto];</span><br><span class="line">num=max(num,sz[nto]);</span><br><span class="line">&#125;</span><br><span class="line">num=max(num,all-num);</span><br><span class="line"><span class="keyword">if</span>(num&lt;mx)&#123;</span><br><span class="line">mx=num;</span><br><span class="line">root=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123; </span><br><span class="line">q[++cnt]=dis[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)(mp[x].size());++i)&#123;</span><br><span class="line"><span class="keyword">int</span> nto=mp[x][i].to,nw=mp[x][i].w;</span><br><span class="line"><span class="keyword">if</span>(nto==fa || vis[nto]) <span class="keyword">continue</span>;</span><br><span class="line">dis[nto]=dis[x]+nw;</span><br><span class="line">getdis(nto,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">run</span><span class="params">(ll &amp;rs,ll x,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(type==<span class="number">1</span>) rs=(rs+x)%mod;</span><br><span class="line"><span class="keyword">else</span> rs=(rs-x+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v,<span class="keyword">int</span> type)</span></span>&#123; </span><br><span class="line">cnt=<span class="number">0</span>,dis[x]=v;</span><br><span class="line">getdis(x,<span class="number">0</span>);</span><br><span class="line">ll num0=<span class="number">0</span>,num1=<span class="number">0</span>,num2=<span class="number">0</span>,n0=<span class="number">0</span>,n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i]%<span class="number">3</span>==<span class="number">0</span>) Add(num0,q[i]),n0++;</span><br><span class="line"><span class="keyword">if</span>(q[i]%<span class="number">3</span>==<span class="number">1</span>) Add(num1,q[i]),n1++;</span><br><span class="line"><span class="keyword">if</span>(q[i]%<span class="number">3</span>==<span class="number">2</span>) Add(num2,q[i]),n2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i]%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">run(ans0,n0*q[i]%mod+num0,type);</span><br><span class="line">run(ans1,n1*q[i]%mod+num1,type);</span><br><span class="line">run(ans2,n2*q[i]%mod+num2,type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i]%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">run(ans0,n2*q[i]%mod+num2,type);</span><br><span class="line">run(ans1,n0*q[i]%mod+num0,type);</span><br><span class="line">run(ans2,n1*q[i]%mod+num1,type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i]%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">run(ans0,n1*q[i]%mod+num1,type);</span><br><span class="line">run(ans1,n2*q[i]%mod+num2,type);</span><br><span class="line">run(ans2,n0*q[i]%mod+num0,type);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; </span><br><span class="line">calc(x,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(mp[x]);++i)&#123;</span><br><span class="line"><span class="keyword">int</span> nto=mp[x][i].to,nw=mp[x][i].w;</span><br><span class="line"><span class="keyword">if</span>(vis[nto]) <span class="keyword">continue</span>;</span><br><span class="line">calc(nto,nw,<span class="number">-1</span>); </span><br><span class="line">all=sz[x],mx=inf;</span><br><span class="line">getroot(nto,<span class="number">0</span>);</span><br><span class="line">dfs(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">all=n,ans0=<span class="number">0</span>,ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">read(x),read(y),read(z);</span><br><span class="line">x++,y++;</span><br><span class="line">mp[x].pb(node&#123;y,z&#125;);</span><br><span class="line">mp[y].pb(node&#123;x,z&#125;);</span><br><span class="line">&#125;</span><br><span class="line">mx=inf;</span><br><span class="line">getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dfs(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,ans0%mod,ans1%mod,ans2%mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">5</span>;++i)&#123;</span><br><span class="line">mp[i].clear();vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h-texas-holdem-poker-模拟"><a class="markdownIt-Anchor" href="#h-texas-holdem-poker-模拟"></a> H. Texas hold’em Poker (模拟)</h1><h1 id="传送门-3"><a class="markdownIt-Anchor" href="#传送门-3"></a> <a href="https://nanti.jisuanke.com/t/41408">传送门</a></h1><p>解：细心的模拟即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"><span class="keyword">int</span> two1,two2,three,four,shun,sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;</span><br><span class="line">name=<span class="string">&quot;&quot;</span>,type=<span class="number">0</span>,two1=<span class="number">0</span>,two2=<span class="number">0</span>,three=<span class="number">0</span>,four=<span class="number">0</span>,shun=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.type!=y.type) <span class="keyword">return</span> x.type&gt;y.type;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(x.type==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x.type==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.two1!=y.two1) <span class="keyword">return</span> x.two1&gt;y.two1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x.type==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.two2!=y.two2) <span class="keyword">return</span> x.two2&gt;y.two2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.two1!=y.two1) <span class="keyword">return</span> x.two1&gt;y.two1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x.type==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.three!=y.three) <span class="keyword">return</span> x.three&gt;y.three;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x.type==<span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.three!=y.three) <span class="keyword">return</span> x.three&gt;y.three;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.two1!=y.two1) <span class="keyword">return</span> x.two1&gt;y.two1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x.type==<span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.four!=y.four) <span class="keyword">return</span> x.four&gt;y.four;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.sum!=y.sum) <span class="keyword">return</span> x.sum&gt;y.sum;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x.type==<span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.shun!=y.shun) <span class="keyword">return</span> x.shun&gt;y.shun;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">return</span> x.name&lt;y.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,tt[<span class="number">10</span>],num[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">mp[<span class="string">&#x27;A&#x27;</span>]=<span class="number">1</span>,mp[<span class="string">&#x27;J&#x27;</span>]=<span class="number">11</span>,mp[<span class="string">&#x27;Q&#x27;</span>]=<span class="number">12</span>,mp[<span class="string">&#x27;K&#x27;</span>]=<span class="number">13</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">&#x27;1&#x27;</span>; c&lt;=<span class="string">&#x27;9&#x27;</span>; ++c) mp[c]=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line"><span class="built_in">string</span> na,s;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;na&gt;&gt;s;</span><br><span class="line">a[i].name=na;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,len=SZ(s); j&lt;len; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;len<span class="number">-1</span> &amp;&amp; s[j]==<span class="string">&#x27;1&#x27;</span> &amp;&amp; s[j+<span class="number">1</span>]==<span class="string">&#x27;0&#x27;</span>) tt[++cnt]=<span class="number">10</span>,++j;</span><br><span class="line"><span class="keyword">else</span> tt[++cnt]=mp[s[j]];</span><br><span class="line">&#125;</span><br><span class="line">sort(tt+<span class="number">1</span>,tt+cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tt[<span class="number">1</span>]==<span class="number">1</span> &amp;&amp; tt[<span class="number">2</span>]==<span class="number">10</span> &amp;&amp; tt[<span class="number">3</span>]==<span class="number">11</span> &amp;&amp; tt[<span class="number">4</span>]==<span class="number">12</span> &amp;&amp; tt[<span class="number">5</span>]==<span class="number">13</span>) a[i].type=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> four=<span class="number">0</span>,one=<span class="number">0</span>,two1=<span class="number">0</span>,two2=<span class="number">0</span>,three=<span class="number">0</span>,shun=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line">ms(num,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=cnt; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(!fg &amp;&amp; j&gt;<span class="number">1</span> &amp;&amp; tt[j]-tt[j<span class="number">-1</span>]!=<span class="number">1</span>) fg=<span class="number">1</span>;</span><br><span class="line">num[tt[j]]++;</span><br><span class="line">sum+=tt[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fg) &#123;</span><br><span class="line">a[i].type=<span class="number">6</span>;</span><br><span class="line">a[i].shun=tt[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">13</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(num[j]==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(two1==<span class="number">0</span>) two1=j;</span><br><span class="line"><span class="keyword">else</span> two2=j;</span><br><span class="line">sum-=j*<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num[j]==<span class="number">3</span>) three=j,sum-=<span class="number">3</span>*j;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num[j]==<span class="number">4</span>) four=j,sum-=<span class="number">4</span>*j;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(four!=<span class="number">0</span>) &#123;</span><br><span class="line">a[i].type=<span class="number">5</span>;</span><br><span class="line">a[i].four=four;</span><br><span class="line">a[i].sum=sum;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(three!=<span class="number">0</span> &amp;&amp; two1!=<span class="number">0</span>) &#123;</span><br><span class="line">a[i].type=<span class="number">4</span>;</span><br><span class="line">a[i].three=three,a[i].two1=two1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(three!=<span class="number">0</span>) &#123;</span><br><span class="line">a[i].type=<span class="number">3</span>;</span><br><span class="line">a[i].three=three,a[i].sum=sum;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(two1!=<span class="number">0</span> &amp;&amp; two2!=<span class="number">0</span>) &#123;</span><br><span class="line">a[i].type=<span class="number">2</span>;</span><br><span class="line">a[i].two1=two1,a[i].two2=two2;</span><br><span class="line">a[i].sum=sum;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(two1!=<span class="number">0</span>) &#123;</span><br><span class="line">a[i].type=<span class="number">1</span>;</span><br><span class="line">a[i].two1=two1;</span><br><span class="line">a[i].sum=sum;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[i].type=<span class="number">0</span>;</span><br><span class="line">a[i].sum=sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i].clean();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019南昌邀请网络赛) J.Distance on the tree (树链剖分+主席树)</title>
      <link href="2019/09/10/(2019%E5%8D%97%E6%98%8C%E9%82%80%E8%AF%B7%E7%BD%91%E7%BB%9C%E8%B5%9B)%20J.Distance%20on%20the%20tree/"/>
      <url>2019/09/10/(2019%E5%8D%97%E6%98%8C%E9%82%80%E8%AF%B7%E7%BD%91%E7%BB%9C%E8%B5%9B)%20J.Distance%20on%20the%20tree/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://nanti.jisuanke.com/t/38229">传送门</a></h1><p><em><strong>题意</strong></em> ：给一颗树，m次查询ui-&gt;vi这条链中边权小于等于ki的边数。</p><p><em><strong>解：</strong></em> 树链剖分+主席树思路很清晰，可以解决；（又因为数组开小了而狂T不止</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> to,w;&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N],son[N],sz[N],ed[N],ned[N],id[N],bel[N],cnt;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ff)</span></span>&#123;</span><br><span class="line">dep[x]=dep[ff]+<span class="number">1</span>;</span><br><span class="line">fa[x]=ff,sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">-1</span>,to,w,len=SZ(G[x]);</span><br><span class="line">node tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">tp=G[x][i],to=tp.to,w=tp.w;</span><br><span class="line"><span class="keyword">if</span>(to==ff) <span class="keyword">continue</span>;</span><br><span class="line">ed[to]=w;</span><br><span class="line">dfs1(to,x);</span><br><span class="line">sz[x]+=sz[to];</span><br><span class="line"><span class="keyword">if</span>(sz[to]&gt;mx) son[x]=to,mx=sz[to];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topx)</span></span>&#123;</span><br><span class="line">id[x]=++cnt,ned[cnt]=ed[x];</span><br><span class="line">bel[x]=topx;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line">dfs2(son[x],topx);</span><br><span class="line"><span class="keyword">int</span> to,len=SZ(G[x]);</span><br><span class="line">node tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">tp=G[x][i],to=tp.to;</span><br><span class="line"><span class="keyword">if</span>(to==son[x] || to==fa[x]) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(to,to);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> n,m,b[N],tot=<span class="number">0</span>,rt[N*<span class="number">20</span>],ls[N*<span class="number">20</span>],rs[N*<span class="number">20</span>],s[N*<span class="number">20</span>],all=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">rt=++tot,s[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">build(ls[rt],l,mid),build(rs[rt],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> last,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">rt=++tot,ls[rt]=ls[last],rs[rt]=rs[last];</span><br><span class="line">s[rt]=s[last]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=mid) update(ls[rt],l,mid,ls[last],p);</span><br><span class="line"><span class="keyword">else</span> update(rs[rt],mid+<span class="number">1</span>,r,rs[last],p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ss,<span class="keyword">int</span> ee,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> s[ee]-s[ss];</span><br><span class="line"><span class="keyword">if</span>(k&gt;mid) <span class="keyword">return</span> s[ls[ee]]-s[ls[ss]]+query(rs[ss],rs[ee],mid+<span class="number">1</span>,r,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==mid) <span class="keyword">return</span> s[ls[ee]]-s[ls[ss]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(ls[ss],ls[ee],l,mid,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">r_query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;r_query &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;bel[x]&lt;&lt;&quot; &quot;&lt;&lt;bel[y]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bel[x]!=bel[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[bel[x]]&lt;dep[bel[y]]) swap(x,y);</span><br><span class="line">res+=query(rt[id[bel[x]]<span class="number">-1</span>],rt[id[x]],<span class="number">1</span>,all,k);</span><br><span class="line">x=fa[bel[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">res+=query(rt[id[x]],rt[id[y]],<span class="number">1</span>,all,k);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line">&#125;qu[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">int</span> x,y,w,tt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">read(x),read(y),read(w);</span><br><span class="line">G[x].pb(&#123;y,w&#125;);</span><br><span class="line">G[y].pb(&#123;x,w&#125;);</span><br><span class="line">b[++tt]=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">read(x),read(y),read(w);</span><br><span class="line">qu[i]=&#123;x,y,w&#125;;</span><br><span class="line">b[++tt]=w;</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">b[++tt]=<span class="number">0</span>;</span><br><span class="line">sort(b+<span class="number">1</span>,b+tt+<span class="number">1</span>);</span><br><span class="line">all=unique(b+<span class="number">1</span>,b+tt+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">build(rt[<span class="number">0</span>],<span class="number">1</span>,all);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ned[i]=lower_bound(b+<span class="number">1</span>,b+all+<span class="number">1</span>,ned[i])-b;</span><br><span class="line">update(rt[i],<span class="number">1</span>,all,rt[i<span class="number">-1</span>],ned[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">qu[i].k=lower_bound(b+<span class="number">1</span>,b+all+<span class="number">1</span>,qu[i].k)-b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r_query(qu[i].l,qu[i].r,qu[i].k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019南昌网络赛) C. Hello 2019 （矩阵建模+线段树维护）</title>
      <link href="2019/09/09/(2019%E5%8D%97%E6%98%8C%E7%BD%91%E7%BB%9C%E8%B5%9B)%20C.%20Hello%202019/"/>
      <url>2019/09/09/(2019%E5%8D%97%E6%98%8C%E7%BD%91%E7%BB%9C%E8%B5%9B)%20C.%20Hello%202019/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://nanti.jisuanke.com/t/41350">传送门</a></h1><p>这是一道CF原题，<a href="https://blog.csdn.net/dreaming__ldx/article/details/81153858">思路在这</a></p><p>线段树维护的时候，只要从右到左维护，不就变成了只能有2019不能有2018了吗，（关键是我也不会正着考虑呀T T</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;rt,ll y) &#123;return rt=rt+y&gt;=mod?rt+y-mod:rt+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;rt,ll y) &#123;return rt=rt*y&gt;=mod?rt*y%mod:rt*y;&#125;</span></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ma</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">Ma <span class="keyword">operator</span> + (<span class="keyword">const</span> Ma x) <span class="keyword">const</span>&#123;</span><br><span class="line">Ma ans;</span><br><span class="line">ms(ans.mat,<span class="number">0x3f</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">5</span>; ++k) &#123;</span><br><span class="line">ans.mat[i][j]=min(ans.mat[i][j],mat[i][k]+x.mat[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125; a[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">状态0：连2都没有</span></span><br><span class="line"><span class="comment">状态1：只有2，没有0连在后面</span></span><br><span class="line"><span class="comment">状态2：出现20，没有1连在后面</span></span><br><span class="line"><span class="comment">状态3：出现201，没有9连在后面</span></span><br><span class="line"><span class="comment">状态4：出现2019</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; ++j) a[rt].mat[i][j]=(i==j)?<span class="number">0</span>:inf;</span><br><span class="line"><span class="keyword">if</span>(num[l]==<span class="number">2</span>) a[rt].mat[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,a[rt].mat[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[l]==<span class="number">0</span>) a[rt].mat[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>,a[rt].mat[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[l]==<span class="number">1</span>) a[rt].mat[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">0</span>,a[rt].mat[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[l]==<span class="number">9</span>) a[rt].mat[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">0</span>,a[rt].mat[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[l]==<span class="number">8</span>) a[rt].mat[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>,a[rt].mat[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">a[rt]=a[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+a[rt&lt;&lt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il Ma <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> a[rt];</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(mid+<span class="number">1</span>,r,L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=R) <span class="keyword">return</span> query(l,mid,L,R,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> query(mid+<span class="number">1</span>,r,L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+query(l,mid,L,R,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>,&amp;n,&amp;q,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) num[i]=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">int</span> ans=query(<span class="number">1</span>,n,l,r,<span class="number">1</span>).mat[<span class="number">0</span>][<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(ans==inf?<span class="number">-1</span>:ans));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019徐州网络赛) I. query (树状数组)</title>
      <link href="2019/09/07/(2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B)%20I.%20query/"/>
      <url>2019/09/07/(2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B)%20I.%20query/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://nanti.jisuanke.com/t/41391">传送门</a></h1><p><em><strong>题意：</strong></em> 一个1~n的全排列，有m次查询，查询[l,r]中满足（l&lt;=i&lt;j&lt;=r）a[i]和a[j]是倍数关系的点对。</p><p><em><strong>解：</strong></em> 我们用s[i]表示带第i个，前面总共用s[i]个满足条件的点对，考虑[l,r]就是s[r]-s[l-1]吗，显然还多考虑了那种一个点在[1,l-1],一个点在[l,r]里的这种点对，我们需要将这种减掉。从第一个点往后考虑，那么可以和这个点构成点对的，显然就是它的倍数或者它的因子，当然不包括它本身，我们只加入pos位大于现在i位的，避免重复添加。当qu[j].l==i时，我们先不加入a[i],而是考虑减去已经出现在[l,r]中的点对，这不就是我们对于这qu[j]查询要减掉的吗，然后再加入a[i]的贡献；而对于q[j].r==i,当然是先考虑a[i]的贡献，然后加上[l,r]中的点对。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> low(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line">ll s[N],ans[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p&lt;N) s[p]+=x,p+=low(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p) res+=s[p],p-=low(p);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">r_ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ask(r)-ask(l<span class="number">-1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> pos[N],n,m,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;qu[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmpl</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.l==b.l) <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.l&lt;b.l; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmpr</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.r==b.r) <span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(ll j=<span class="number">2</span>;j*j&lt;=i;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j*j==i) v[i].pb(j);</span><br><span class="line"><span class="keyword">else</span> v[i].pb(j),v[i].pb(i/j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">v[i].pb(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line">init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">pos[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;qu[i].l,&amp;qu[i].r);</span><br><span class="line">qu[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(qu+<span class="number">1</span>,qu+m+<span class="number">1</span>,cmpl);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">while</span>(qu[j].l==i &amp;&amp; j&lt;=m)&#123;</span><br><span class="line">ans[qu[j].id]-=r_ask(qu[j].l,qu[j].r);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ll k=<span class="number">2</span>;k*a[i]&lt;=n;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[k*a[i]]&gt;i) add(pos[k*a[i]],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:v[a[i]])&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[t]&gt;i) add(pos[t],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ms(s,<span class="number">0</span>);</span><br><span class="line">sort(qu+<span class="number">1</span>,qu+m+<span class="number">1</span>,cmpr);</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(ll k=<span class="number">2</span>;k*a[i]&lt;=n;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[k*a[i]]&gt;i) add(pos[k*a[i]],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:v[a[i]])&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[t]&gt;i) add(pos[t],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(qu[j].r==i &amp;&amp; j&lt;=m)&#123;</span><br><span class="line">ans[qu[j].id]+=r_ask(qu[j].l,qu[j].r);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luguo) P3401 洛谷树 (树链剖分+线段树)</title>
      <link href="2019/09/07/(Luguo)%20P3401%20%E6%B4%9B%E8%B0%B7%E6%A0%91/"/>
      <url>2019/09/07/(Luguo)%20P3401%20%E6%B4%9B%E8%B0%B7%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://www.luogu.org/problem/P3401">传送门</a></h1><p><em><strong>解</strong></em>：首先异或也是具有前缀性质的，b[i]代表从i点异或到根节点的值，那么i到j的异或和就是b[i]^b[j],但是题目求得是i~j路径上所以子路径的异或和，显然是不能一个一个的求，思路也很巧妙，我们将这条路径上所有的b[]拿出来，对每一位进行维护，看看这些数在这一位上有多少1，和0，那么这一位对结果的贡献不就是(1&lt;&lt;i)<em>num1</em>num0吗；还有修改，首先修改影响的肯定是该节点下面子树所有的节点，修改还是每一位每一位的看，如果有一位的1变成了0，那说明0的个数和1的个数互换，rev一下就可以。这里用线段树去维护每一位就可以了。剩下的部分就是数链剖分的基本操作了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,q,ed[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> to,w;&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; eg[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N],sz[N],son[N],id[N],bel[N],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b[N],nb[N]; <span class="comment">//b[i]:i到根异或的结果</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ff)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line">    dep[x]=dep[ff]+<span class="number">1</span>;</span><br><span class="line">    fa[x]=ff,sz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">-1</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(eg[x]);++i)&#123;</span><br><span class="line">to=eg[x][i].to;</span><br><span class="line"><span class="keyword">if</span>(to==ff || vis[to]) <span class="keyword">continue</span>;</span><br><span class="line">b[to]=b[x]^eg[x][i].w;</span><br><span class="line">ed[to]=eg[x][i].w;</span><br><span class="line">dfs1(to,x);</span><br><span class="line">sz[x]+=sz[to];</span><br><span class="line"><span class="keyword">if</span>(sz[to]&gt;mx)son[x]=to,mx=sz[to];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topx)</span></span>&#123;</span><br><span class="line">    id[x]=++cnt;</span><br><span class="line">    bel[x]=topx,nb[cnt]=b[x];</span><br><span class="line">    <span class="keyword">if</span>(!son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    dfs2(son[x],topx);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,to;i&lt;SZ(eg[x]);++i)&#123;</span><br><span class="line">        to=eg[x][i].to;</span><br><span class="line">        <span class="keyword">if</span>(to==fa[x] || to==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(to,to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n1,n0;</span><br><span class="line">    <span class="keyword">bool</span> rev;</span><br><span class="line">    T()&#123;n1=<span class="number">0</span>,n0=<span class="number">0</span>,rev=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;t[<span class="number">15</span>][N&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function">il T <span class="title">add</span><span class="params">(T a,T b)</span></span>&#123;</span><br><span class="line">    T res;</span><br><span class="line">    res.n1=a.n1+b.n1;</span><br><span class="line">    res.n0=a.n0+b.n0;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k][rt].rev)&#123;</span><br><span class="line">        swap(t[k][rt&lt;&lt;<span class="number">1</span>].n1,t[k][rt&lt;&lt;<span class="number">1</span>].n0);</span><br><span class="line">        swap(t[k][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].n1,t[k][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].n0);</span><br><span class="line">        t[k][rt&lt;&lt;<span class="number">1</span>].rev^=<span class="number">1</span>;</span><br><span class="line">        t[k][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rev^=<span class="number">1</span>;</span><br><span class="line">        t[k][rt].rev=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;build &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;rt&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nb[l]&gt;&gt;k)&amp;<span class="number">1</span>) t[k][rt].n1=<span class="number">1</span>,t[k][rt].n0=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> t[k][rt].n1=<span class="number">0</span>,t[k][rt].n0=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>,k),build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k);</span><br><span class="line">    t[k][rt]=add(t[k][rt&lt;&lt;<span class="number">1</span>],t[k][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r)&#123;</span><br><span class="line">        swap(t[k][rt].n1,t[k][rt].n0);</span><br><span class="line">        t[k][rt].rev^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k,rt);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) rev(l,mid,L,R,rt&lt;&lt;<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) rev(mid+<span class="number">1</span>,r,L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k);</span><br><span class="line">    t[k][rt]=add(t[k][rt&lt;&lt;<span class="number">1</span>],t[k][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(((w^ed[u])&gt;&gt;i)&amp;<span class="number">1</span>) rev(<span class="number">1</span>,n,id[u],id[u]+sz[u]<span class="number">-1</span>,<span class="number">1</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    ed[u]=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">return</span> t[k][rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    pushdown(k,rt);</span><br><span class="line">    T res,ls,rs;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">        ls=query(l,mid,L,R,rt&lt;&lt;<span class="number">1</span>,k);</span><br><span class="line">        res.n0+=ls.n0,res.n1+=ls.n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line">        rs=query(mid+<span class="number">1</span>,r,L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k);</span><br><span class="line">        res.n0+=rs.n0,res.n1+=rs.n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pu=u,pv=v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i)&#123;</span><br><span class="line">        u=pu,v=pv;</span><br><span class="line">        T rs,tp;</span><br><span class="line">        <span class="keyword">while</span>(bel[u]!=bel[v])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[bel[u]]&lt;dep[bel[v]]) swap(u,v);</span><br><span class="line">            tp=query(<span class="number">1</span>,n,id[bel[u]],id[u],<span class="number">1</span>,i);</span><br><span class="line">            rs=add(rs,tp);</span><br><span class="line">            u=fa[bel[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[u]&gt;dep[v]) swap(u,v);</span><br><span class="line">        rs=add(rs,query(<span class="number">1</span>,n,id[u],id[v],<span class="number">1</span>,i));</span><br><span class="line">        res+=(<span class="number">1LL</span>&lt;&lt;i)*rs.n0*rs.n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> u,v,w,op;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        eg[u].pb(node&#123;v,w&#125;);</span><br><span class="line">        eg[v].pb(node&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i) build(<span class="number">1</span>,n,<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;query(u,v)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;w;</span><br><span class="line">            <span class="keyword">if</span>(u!=fa[v]) swap(u,v);</span><br><span class="line">            update(v,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019徐州网络赛) B. so easy (线段树 || 并查集)</title>
      <link href="2019/09/07/(2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B)%20B%20so%20easy/"/>
      <url>2019/09/07/(2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B)%20B%20so%20easy/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://nanti.jisuanke.com/t/41384">传送门</a></h1><p><em><strong>题意：</strong></em> 就是两种操作，1：使得x点无效，2：查找大于等于x的最小有效点</p><p><em><strong>解：</strong></em> 由于数据达到1e9不好set，所以就线段树操作就像了，节点维护区间，和存在的有效点数，然后查询的时候，用存在的有效点数剪枝一下即可。（好像有暴力过的？？？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll b[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line">&#125;qu[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">ll sum;</span><br><span class="line">&#125;s[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">s[rt].sum=s[rt&lt;&lt;<span class="number">1</span>].sum+s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123; <span class="comment">//左闭右开 </span></span><br><span class="line">s[rt].l=b[l],s[rt].r=b[l+<span class="number">1</span>];</span><br><span class="line">s[rt].sum=s[rt].r-s[rt].l;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">s[rt].l=s[rt&lt;&lt;<span class="number">1</span>].l,s[rt].r=s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r;</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> X)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">s[rt].sum--;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(X&lt;s[rt&lt;&lt;<span class="number">1</span>].r) update(l,mid,rt&lt;&lt;<span class="number">1</span>,X);</span><br><span class="line"><span class="keyword">else</span> update(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,X);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> X)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[rt].sum==s[rt].r-s[rt].l)&#123;</span><br><span class="line">res=s[rt].l;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res=s[rt].l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(X&lt;s[rt&lt;&lt;<span class="number">1</span>].r &amp;&amp; s[rt&lt;&lt;<span class="number">1</span>].sum) query(l,mid,rt&lt;&lt;<span class="number">1</span>,X);</span><br><span class="line"><span class="keyword">if</span>(res==<span class="number">0</span> &amp;&amp; s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum) query(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,op,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;qu[i].op,&amp;qu[i].x);</span><br><span class="line"><span class="keyword">if</span>(x&gt;n) <span class="keyword">continue</span>;</span><br><span class="line">b[++cnt]=qu[i].x;</span><br><span class="line">&#125;</span><br><span class="line">b[++cnt]=n+<span class="number">5</span>;</span><br><span class="line">sort(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> sz=unique(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>)-(b+<span class="number">1</span>); </span><br><span class="line">build(<span class="number">1</span>,sz<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(qu[i].op==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(qu[i].x&gt;n) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line">query(<span class="number">1</span>,sz<span class="number">-1</span>,<span class="number">1</span>,qu[i].x);</span><br><span class="line"><span class="keyword">if</span>(res!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qu[i].x&gt;n) <span class="keyword">continue</span>;</span><br><span class="line">update(<span class="number">1</span>,sz<span class="number">-1</span>,<span class="number">1</span>,qu[i].x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>题解用map模拟并查集简单好写，菜啊；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; fa;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!fa.count(x)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;op,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)fa[x]=find(x+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=find(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(ans&gt;n?<span class="number">-1</span>:ans));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉降幂模板</title>
      <link href="2019/09/03/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/09/03/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>降幂公式： <img src="https://img-blog.csdnimg.cn/20190903163949301.png" alt="img" /></p><p>用大佬的Mod函数，就可以统统按第一种去考虑。<a href="https://www.cnblogs.com/ACMLCZH/p/8117161.html?tdsourcetag=s_pctim_aiomsg">大佬的证明</a></p><p><a href="https://blog.csdn.net/TDD_Master/article/details/100521985">下题是2019南京网络赛B</a></p><p>最后求解的就是a<sup>a</sup>a… 共b个a，%m的结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="function">il ll <span class="title">Mod</span><span class="params">(ll x,ll mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;mod?x:x%mod+mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> phi[N],prime[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler</span><span class="params">()</span></span>&#123; <span class="comment">//phi[i]:小于或等于i的数中与i互质的数的数目</span></span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!phi[i])&#123;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">prime[++tot]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot &amp;&amp; <span class="number">1LL</span>*i*prime[j]&lt;N;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]) phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">phi[i*prime[j]]=phi[i]*prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il ll <span class="title">mpow</span><span class="params">(ll x,ll n,ll p)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=Mod(ans*x,p);</span><br><span class="line">x=Mod(x*x,p);</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">dfs</span><span class="params">(ll a,ll sp,ll p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sp==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">ll res=dfs(a,sp<span class="number">-1</span>,phi[p]);</span><br><span class="line"><span class="keyword">return</span> mpow(a,res,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">Euler();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">int</span> a,b,m;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123; <span class="comment">//求解的是a^a...共b个a %m的结果 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;m;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dfs(a,b,m)%m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2019南京网络赛) I. Washing clothes （贪心）</title>
      <link href="2019/09/02/(2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B)%20I.%20Washing%20clothes/"/>
      <url>2019/09/02/(2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B)%20I.%20Washing%20clothes/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://nanti.jisuanke.com/t/41306">传送门</a></h1><p><em><strong>题意</strong></em> ：每个人ti时间到洗衣店，但是只有一台洗衣机，每次花费的时间是x，同时也可以人洗，花费的时间为y,求当x属于[1,y],所有人所要花费的最少时间。</p><p><em><strong>解：</strong></em> 贪心考虑手洗的人是连续的，而且机器洗也是连续的，因为只要考虑最后一个完成的人。考虑前面手洗的时间，随着i的增加是一个递增函数，而机器洗时间是一个递减的函数，而我们要取这两个函数的最大值 的最小值，函数就是一个V型的，那怎么找到那个极小值点i呢。我考虑的p是手洗时间大于等于后面p个人机洗的时间 ，说明从该点作为手洗最后的结束点是有可能影响结果的，而如果再往前一点，手洗时间已经不可能影响最终结果，而且机洗时间还可能会变大。其实我们要考虑的就是最小值附近的那三个可能的最小点就可以了，n-p-1，n-p，n-p+1。</p><p>考虑n-p点，如果手洗时间大于机洗时间那大于的部分也是小于一次机洗的时间，现在的最小时间就是手洗时间，如果大于手洗时间，那就不谈了。你考虑再往前一点n-p-1，那就是p+1个机洗时间，肯定是大于刚才的手洗时间了。而再往后考虑n-p+1,此时的手洗时间大于n-p的手洗时间，机洗时间是小于n-p的机洗时间的，那会不会有小于n-p所画时间的可能呢，考虑n-p手洗时间比机洗时间长，那答案就是手洗时间，现在n-p+1手洗时间大于n-p手洗时间所以不可能；考虑n-p机洗时间比手洗时间长，那答案就是机洗时间，这里感觉想的还不是很清楚…</p><p>菜逼没想清楚都是从n-p点后面统统考虑，max（手洗时间，机器时间）再取最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=m; ++x) &#123;</span><br><span class="line"><span class="keyword">int</span> p=min(n,m/x); <span class="comment">//手洗大于等于后面p个人机洗的时间 </span></span><br><span class="line">ll nxt=<span class="number">0</span>,res=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;n-p; --i) &#123; <span class="comment">//所有可能的最小值点 </span></span><br><span class="line">nxt=max(nxt,a[i]+<span class="number">1LL</span>*(n-i+<span class="number">1</span>)*x);</span><br><span class="line">ll tp=nxt;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) tp=max(nxt,a[i<span class="number">-1</span>]+m);</span><br><span class="line">res=min(res,tp); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(x==m) <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>巨佬都是直接n-p作为极值点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=m; ++x) &#123;</span><br><span class="line"><span class="keyword">int</span> p=min(n,m/x); <span class="comment">//大于等于后面p个人机洗的时间 </span></span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;n) ans=max(ans,a[n-p]+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;n-p; --i) ans=max(ans,a[i]+<span class="number">1LL</span>*(n-i+<span class="number">1</span>)*x);</span><br><span class="line"><span class="keyword">if</span>(x==m) <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读入输出挂（以备不时之需）</title>
      <link href="2019/08/25/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%8C%82/"/>
      <url>2019/08/25/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%8C%82/</url>
      
        <content type="html"><![CDATA[<p><strong>读入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这个更快，但是要ctrl+z结束多组读入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1000000</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1000000</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;sum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=nc();sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)) ch=nc();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) sum=(sum&lt;&lt;<span class="number">3</span>)+(sum&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>),ch=nc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;x=-x;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) print(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(CCPC) 网络赛 1002 array (线段树剪枝)</title>
      <link href="2019/08/24/(CCPC)%20%E7%BD%91%E7%BB%9C%E8%B5%9B%201002%20array/"/>
      <url>2019/08/24/(CCPC)%20%E7%BD%91%E7%BB%9C%E8%B5%9B%201002%20array/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6703">传送门</a></h1><p><em><strong>题意：</strong></em> 给你一个序列，每次查询【1，r】&gt;=k 最小的没有出现的ai值。</p><p><em><strong>解：</strong></em> 就是一颗权值线段树，同时节点用ls维护他代表区间所有值出现位置的最大值，没有出现（或修改）都置成无穷大，查询的时候，走左右儿子根据k来，满足条件优先进入左儿子，但是要判断一下ls（lson）是否＞r，如果小于r，那说明所有值都在小于r的区间出现了，就没必要进入。然后递归到叶子节点，出现的位置＞r，那就说明答案是这个l了。在左儿子没有找到答案的话，在回溯的过程中，如果可以进入右儿子，那就说明答案一定会在右儿子区间中了，因为右儿子区间值&gt;k且存在值的下标&gt;r,所以只要找到下表＞r最小的数即可。最坏的情况在树中走出的情况就是一个人形的样子，2*log。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],ls[maxn];</span><br><span class="line"><span class="keyword">int</span> fg[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">ls[rt]=max(ls[rt&lt;&lt;<span class="number">1</span>],ls[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">ls[rt]=b[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">ls[rt]=b[l]=inf;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) update(l,mid,rt&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">else</span> update(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[rt]&gt;R) ans=l;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=mid &amp;&amp; ls[rt&lt;&lt;<span class="number">1</span>]&gt;R) query(l,mid,rt&lt;&lt;<span class="number">1</span>,R,k);</span><br><span class="line"><span class="keyword">if</span>((k&gt;mid || ans==inf) &amp;&amp; ls[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;R) query(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,R,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;++t)&#123;</span><br><span class="line"><span class="keyword">int</span> lans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">b[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=n+<span class="number">10</span>;++i) b[i]=inf;</span><br><span class="line">build(<span class="number">1</span>,n+<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> op,t1,t2,r,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;op,&amp;t1);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">t1=t1^lans;</span><br><span class="line"><span class="keyword">if</span>(fg[t1]!=t) update(<span class="number">1</span>,n+<span class="number">10</span>,<span class="number">1</span>,a[t1]),fg[t1]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t2);</span><br><span class="line">r=t1^lans,k=t2^lans;</span><br><span class="line">ans=inf;</span><br><span class="line">query(<span class="number">1</span>,n+<span class="number">10</span>,<span class="number">1</span>,r,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">lans=ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CCPC) 网络赛 1004 path (思维)</title>
      <link href="2019/08/24/(CCPC)%20%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20path/"/>
      <url>2019/08/24/(CCPC)%20%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20path/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6705">传送门</a></p><p><em><strong>题意：</strong></em> 给你有向图，每次查询第k长的路径，而且这里面环状路径可以无限走。</p><p><em><strong>解：</strong></em> 被次大最短路，或者第k大最短路的思想所限制了，题解的思路就很简单了，被按在地上摩擦，就是用优先队列按照距离从小到大排序，把一个点取出时，可能加进去的答案就是当前这个节点连出去的边最短的那一条（点出去的边也需要排序），或者上一个节点还可以延展出去的路径。在将查询排序一下，就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll to,w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;p.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; mp[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">ll pdist,pre,id,ndist,np;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ndist&gt;p.ndist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;P&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PP</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id,k;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> PP &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> k&lt;p.k;</span><br><span class="line">&#125;</span><br><span class="line">&#125; qu[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> T,n,m,qnum,ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;qnum);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) mp[i].clear();</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"> </span><br><span class="line">ll u,v,w,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">mp[u].push_back(node &#123;v,w&#125;);</span><br><span class="line">q.push(P &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,w,v&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">sort(mp[i].begin(),mp[i].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=qnum; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">qu[i]=PP &#123;i,k&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(qu+<span class="number">1</span>,qu+qnum+<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">ll pdist,pre,id,ndist,np,cnt=<span class="number">1</span>,qid=<span class="number">1</span>;</span><br><span class="line">P top;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">top=q.top(),q.pop();</span><br><span class="line"><span class="keyword">while</span>(cnt == qu[qid].k &amp;&amp; qid&lt;=qnum) &#123;</span><br><span class="line">ans[qu[qid].id]=top.ndist;</span><br><span class="line">qid++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(qid==qnum+<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">cnt++,k--;</span><br><span class="line">pdist=top.pdist,pre=top.pre;</span><br><span class="line">id=top.id,ndist=top.ndist,np=top.np;</span><br><span class="line"><span class="comment">//cout&lt;&lt;pdist&lt;&lt;&quot; &quot;&lt;&lt;pre&lt;&lt;&quot; &quot;&lt;&lt;id&lt;&lt;&quot; &quot;&lt;&lt;ndist&lt;&lt;&quot; &quot;&lt;&lt;np&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(pre!=<span class="number">-1</span> &amp;&amp; id&lt;(<span class="keyword">int</span>)mp[pre].size()) &#123;</span><br><span class="line">q.push(P &#123;pdist,pre,id+<span class="number">1</span>,pdist+mp[pre][id].w,mp[pre][id].to&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">int</span>)mp[np].size()) q.push(P &#123;ndist,np,<span class="number">1</span>,ndist+mp[np][<span class="number">0</span>].w,mp[np][<span class="number">0</span>].to&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=qnum; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树套平衡树基础模板</title>
      <link href="2019/08/22/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/08/22/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/P3380">P3380 【模板】二逼平衡树（树套树）</a></p><p>要开O2才能过T_T</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn];</span><br><span class="line"><span class="keyword">int</span> rt[maxn*<span class="number">25</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">namespace</span> SP &#123;</span><br><span class="line"><span class="keyword">int</span> ch[maxn*<span class="number">25</span>][<span class="number">2</span>],val[maxn*<span class="number">25</span>],cnt[maxn*<span class="number">25</span>],par[maxn*<span class="number">25</span>],sz[maxn*<span class="number">25</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">sz[x]=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]]+cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ws</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch[par[x]][<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f],k=ws(x),w=ch[x][k^<span class="number">1</span>];</span><br><span class="line">ch[f][k]=w,par[w]=f;</span><br><span class="line">ch[ff][ws(f)]=x,par[x]=ff;</span><br><span class="line">ch[x][k^<span class="number">1</span>]=f,par[f]=x;</span><br><span class="line">pushup(f),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> goal=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(par[x]!=goal) &#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f];</span><br><span class="line"><span class="keyword">if</span>(ff!=goal) &#123;</span><br><span class="line"><span class="keyword">if</span>(ws(x)==ws(f)) rotate(f);</span><br><span class="line"><span class="keyword">else</span> rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!goal) rt[i]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=rt[i];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][x&gt;val[cur]] &amp;&amp; x!=val[cur]) &#123;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line">splay(i,cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=rt[i],p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(rt[i]==<span class="number">0</span>) &#123;</span><br><span class="line">cur=rt[i]=++tot;</span><br><span class="line">val[cur]=x,sz[cur]=cnt[cur]=<span class="number">1</span>;</span><br><span class="line">ch[cur][<span class="number">1</span>]=ch[cur][<span class="number">0</span>]=<span class="number">0</span>,par[cur]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(cur &amp;&amp; val[cur]!=x) &#123;</span><br><span class="line">p=cur;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur) cnt[cur]++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cur=++tot;</span><br><span class="line"><span class="keyword">if</span>(p) ch[p][x&gt;val[p]]=cur;</span><br><span class="line">ch[cur][<span class="number">0</span>]=ch[cur][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">par[cur]=p,val[cur]=x;</span><br><span class="line">cnt[cur]=sz[cur]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">splay(i,cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Find(i,x);</span><br><span class="line"><span class="keyword">return</span> sz[ch[rt[i]][<span class="number">0</span>]]+(val[rt[i]]&lt;x?cnt[rt[i]]:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Find(i,x);</span><br><span class="line"><span class="keyword">if</span>(val[rt[i]]&lt;x) <span class="keyword">return</span> rt[i];</span><br><span class="line"><span class="keyword">int</span> cur=ch[rt[i]][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">1</span>]) cur=ch[cur][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Back</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Find(i,x);</span><br><span class="line"><span class="keyword">if</span>(val[rt[i]]&gt;x) <span class="keyword">return</span> rt[i];</span><br><span class="line"><span class="keyword">int</span> cur=ch[rt[i]][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">0</span>]) cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Prenum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> val[Pre(i,x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Backnum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> val[Back(i,x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> last=Pre(i,x),beh=Back(i,x);</span><br><span class="line">splay(i,last),splay(i,beh,last);</span><br><span class="line"><span class="keyword">int</span> del=ch[beh][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(cnt[del]&gt;<span class="number">1</span>) &#123;</span><br><span class="line">cnt[del]--;</span><br><span class="line">splay(i,del);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> ch[beh][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Seg &#123;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">spbuild</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> nrt)</span> </span>&#123;</span><br><span class="line">SP::Insert(nrt,-inf),SP::Insert(nrt,inf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l; i&lt;=r; ++i) SP::Insert(nrt,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> nrt)</span> </span>&#123;</span><br><span class="line">spbuild(l,r,nrt);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,nrt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,nrt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> C,<span class="keyword">int</span> nrt)</span> </span>&#123;</span><br><span class="line">SP::Remove(nrt,a[x]);</span><br><span class="line">SP::Insert(nrt,C);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) update(l,mid,x,C,nrt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> update(mid+<span class="number">1</span>,r,x,C,nrt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">qRank</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> nrt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r)<span class="keyword">return</span> SP::Rank(nrt,k)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) num+=qRank(L,R,l,mid,nrt&lt;&lt;<span class="number">1</span>,k);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) num+=qRank(L,R,mid+<span class="number">1</span>,r,nrt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">qRank</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> qRank(L,R,<span class="number">1</span>,n,<span class="number">1</span>,k)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">qPre_Back</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> nrt,<span class="keyword">int</span> k,<span class="keyword">bool</span> fg)</span></span>&#123;</span><br><span class="line"><span class="comment">//fg==1?Pre:Back</span></span><br><span class="line"><span class="keyword">int</span> ans=fg?-inf:inf;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r)&#123;</span><br><span class="line">fg?(ans=max(ans,SP::Prenum(nrt,k))):(ans=min(ans,SP::Backnum(nrt,k)));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line"> <span class="keyword">if</span>(fg) ans=max(ans,qPre_Back(L,R,l,mid,nrt&lt;&lt;<span class="number">1</span>,k,fg));</span><br><span class="line"> <span class="keyword">else</span> ans=min(ans,qPre_Back(L,R,l,mid,nrt&lt;&lt;<span class="number">1</span>,k,fg));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line"><span class="keyword">if</span>(fg) ans=max(ans,qPre_Back(L,R,mid+<span class="number">1</span>,r,nrt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k,fg));</span><br><span class="line"><span class="keyword">else</span> ans=min(ans,qPre_Back(L,R,mid+<span class="number">1</span>,r,nrt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k,fg));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> le=<span class="number">0</span>,ri=<span class="number">1e8</span>,ans=<span class="number">0</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(le&lt;=ri)&#123;</span><br><span class="line">mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Seg::qRank(L,R,mid)&lt;=k) ans=mid,le=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ri=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//std::ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">Seg::build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> op,x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">3</span>) Seg::update(<span class="number">1</span>,n,x,y,<span class="number">1</span>),a[x]=y;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;z);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Seg::qRank(x,y,z));</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,getKth(x,y,z));</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Seg::qPre_Back(x,y,<span class="number">1</span>,n,<span class="number">1</span>,z,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Seg::qPre_Back(x,y,<span class="number">1</span>,n,<span class="number">1</span>,z,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 2019多校第九场B，D，E，H，J</title>
      <link href="2019/08/16/(Nowcoder)%202019%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B9%9D%E5%9C%BA/"/>
      <url>2019/08/16/(Nowcoder)%202019%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B9%9D%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/889#question">传送门</a></h1><h1 id="bquadratic-equation"><a class="markdownIt-Anchor" href="#bquadratic-equation"></a> B.Quadratic equation</h1><p>解：没参与讨论<img src="https://img-blog.csdnimg.cn/20190816100929274.jpg" alt="img" />，分析一波，用二次剩余即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll w;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span> &#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">num <span class="title">mul</span><span class="params">(num a,num b,ll p)</span> </span>&#123;</span><br><span class="line">num ans= &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ans.x=((a.x*b.x%p+a.y*b.y%p*w%p)%p+p)%p;</span><br><span class="line">ans.y=((a.x*b.y%p+a.y*b.x%p)%p+p)%p;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">powwR</span><span class="params">(ll a,ll b,ll p)</span> </span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=<span class="number">1ll</span>*ans%p*a%p;</span><br><span class="line">a=a%p*a%p;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">powwi</span><span class="params">(num a,ll b,ll p)</span> </span>&#123;</span><br><span class="line">num ans= &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=mul(ans,a,p);</span><br><span class="line">a=mul(a,a,p);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans.x%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n,ll p)</span> </span>&#123;</span><br><span class="line">n%=p;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">2</span>)<span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">if</span>(powwR(n,(p<span class="number">-1</span>)/<span class="number">2</span>,p)==p<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不存在</span></span><br><span class="line">ll a;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">a=rand()%p;</span><br><span class="line">w=((a*a%p-n)%p+p)%p;</span><br><span class="line"><span class="keyword">if</span>(powwR(w,(p<span class="number">-1</span>)/<span class="number">2</span>,p)==p<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num x= &#123;a,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> powwi(x,(p+<span class="number">1</span>)/<span class="number">2</span>,p);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;,y[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;b,&amp;c);</span><br><span class="line">ll ans3 = b;</span><br><span class="line">ll ans4 = b+p;</span><br><span class="line">ll n = b*b<span class="number">-4</span>*c;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans3%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,ans3/<span class="number">2</span>,ans3/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans4%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,ans4/<span class="number">2</span>,ans4/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll ans1=solve(n,p);</span><br><span class="line">ll ans2=p-ans1;</span><br><span class="line"><span class="keyword">if</span>(ans1&gt;ans2) swap(ans1,ans2);</span><br><span class="line"><span class="keyword">if</span>(ans1&lt;<span class="number">0</span> || ans2&lt;<span class="number">0</span> || ans3&lt;<span class="number">0</span> || ans4&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1 -1\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">x[++cnt] = (ans1+ans3)%<span class="number">2</span>==<span class="number">0</span> ? (ans1+ans3)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">x[++cnt] = (ans1+ans4)%<span class="number">2</span>==<span class="number">0</span> ? (ans1+ans4)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">x[++cnt] = (ans2+ans3)%<span class="number">2</span>==<span class="number">0</span> ? (ans2+ans3)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">x[++cnt] = (ans2+ans4)%<span class="number">2</span>==<span class="number">0</span> ? (ans2+ans4)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">y[++cnt] = (ans3-ans1)%<span class="number">2</span>==<span class="number">0</span> ? (ans3-ans1)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">y[++cnt] = (ans3-ans2)%<span class="number">2</span>==<span class="number">0</span> ? (ans3-ans2)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">y[++cnt] = (ans4-ans1)%<span class="number">2</span>==<span class="number">0</span> ? (ans4-ans1)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line">y[++cnt] = (ans4-ans2)%<span class="number">2</span>==<span class="number">0</span> ? (ans4-ans2)/<span class="number">2</span> : <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ansx,ansy;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x[i]&gt;=<span class="number">0</span> &amp;&amp; y[j]&gt;=<span class="number">0</span> &amp;&amp; x[i]&lt;p &amp;&amp; y[j]&lt;p &amp;&amp; (x[i]+y[j])%p==b &amp;&amp; x[i]*y[j]%p==c) &#123;</span><br><span class="line">ansx = x[i];</span><br><span class="line">ansy = y[j];</span><br><span class="line">found = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(found) &#123;</span><br><span class="line"><span class="keyword">if</span>(ansx&gt;ansy) swap(ansx,ansy);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,ansx,ansy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!found) <span class="built_in">printf</span>(<span class="string">&quot;-1 -1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dknapsack-cryptosystem"><a class="markdownIt-Anchor" href="#dknapsack-cryptosystem"></a> D.Knapsack Cryptosystem</h1><p>题意：给你一堆数，选出一些数的和为s，求解方案输出。</p><p>解：36直接搜索剪枝肯定是会T的，折半搜索，直接暴力二进制枚举就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line">ll n,s,b[maxn],a[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;ll,<span class="built_in">string</span>&gt; sum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,bit;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(n+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>;i&lt;=n;++i) b[++cnt]=a[i];</span><br><span class="line">bit=(<span class="number">1</span>&lt;&lt;(cnt));</span><br><span class="line">ll ns;</span><br><span class="line"><span class="built_in">string</span> ss;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bit;++i)&#123;</span><br><span class="line">ns=<span class="number">0</span>,ss=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=cnt<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>) ns+=b[cnt-j],ss+=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> ss+=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum[ns]=ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pcnt=n-cnt;</span><br><span class="line">bit=(<span class="number">1</span>&lt;&lt;(pcnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bit;++i)&#123;</span><br><span class="line">ns=<span class="number">0</span>,ss=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=pcnt<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>) ns+=a[pcnt-j],ss+=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> ss+=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum.count(s-ns)!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ss&lt;&lt;sum[s-ns]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="eall-men-are-brothers"><a class="markdownIt-Anchor" href="#eall-men-are-brothers"></a> E.All men are brothers</h1><p>题意：n个人，m次交朋友，每次都要询问所有人中选出4个人互不是朋友的方案数。</p><p>解：朋友关系用并查集维护就行了，一开始答案为C(n,2),每次交朋友，如果还不是朋友，那么SZ【U】和SZ【V】中出现在一起将会不合法，我们现在其余的n-sz[U]-sz[V]选出两个组成不合法，但是要减去在其他同一个块中取两个的方案数，这就是这次合并所以不在合法的了，减去。用一个sum取维护所有块中取两个的方案数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line">ll sz[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sz[i]=<span class="number">1</span>;</span><br><span class="line">    ll tot=n,sum=<span class="number">0</span>;</span><br><span class="line">    ll ans=(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)n*(n<span class="number">-1</span>)/<span class="number">2</span>*(n<span class="number">-2</span>)/<span class="number">3</span>*(n<span class="number">-3</span>)/<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">int</span> U=find(u);</span><br><span class="line">        <span class="keyword">int</span> V=find(v);</span><br><span class="line">        <span class="keyword">if</span>(U==V) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tot--;</span><br><span class="line">            <span class="keyword">if</span>(tot&lt;<span class="number">4</span>) ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ll cnt=n-sz[U]-sz[V];</span><br><span class="line">                cnt=(cnt<span class="number">-1</span>)*cnt/<span class="number">2</span>;</span><br><span class="line">                sum-=(sz[U]*(sz[U]<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">                sum-=(sz[V]*(sz[V]<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">                cnt-=sum;</span><br><span class="line">                ans-=sz[U]*sz[V]*(cnt);</span><br><span class="line">                sum+=(sz[U]+sz[V])*(sz[U]+sz[V]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">                sz[U]+=sz[V];</span><br><span class="line">                fa[V]=U;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hcutting-bamboos"><a class="markdownIt-Anchor" href="#hcutting-bamboos"></a> H.Cutting Bamboos</h1><p>题意：砍竹子，给出所有竹子的高度，有q次查询，l,r,x,y,就是对于l，r区间的竹子要用y次砍完，而且每次砍掉的长度要是一样的，求第x砍竹子的高度。</p><p>解：先用主席数维护高度在【l,r】 竹子的总高度和个数。查询二分x的高度mid即可（不晓得怎么直接算），看看高度为mid时能否砍掉x次需要砍掉的高度即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll sum,num;</span><br><span class="line">&#125;tr[maxn*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,ls[maxn*<span class="number">20</span>],rs[maxn*<span class="number">20</span>],rt[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">rt=++tot;</span><br><span class="line">tr[rt].sum=tr[rt].num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(ls[rt],l,mid);</span><br><span class="line">build(rs[rt],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pre,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">rt=++tot;</span><br><span class="line">ls[rt]=ls[pre],rs[rt]=rs[pre];</span><br><span class="line">tr[rt].num=tr[pre].num+<span class="number">1</span>;</span><br><span class="line">tr[rt].sum=tr[pre].sum+h;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(h&lt;=mid) update(ls[rt],l,mid,ls[pre],h);</span><br><span class="line"><span class="keyword">else</span> update(rs[rt],mid+<span class="number">1</span>,r,rs[pre],h);</span><br><span class="line">&#125;</span><br><span class="line">ll ss,nn;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> nh)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=nh)&#123;</span><br><span class="line">ss+=tr[y].sum-tr[x].sum;</span><br><span class="line">nn+=tr[y].num-tr[x].num;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(nh&lt;=mid)&#123;</span><br><span class="line">ss+=tr[rs[y]].sum-tr[rs[x]].sum;</span><br><span class="line">nn+=tr[rs[y]].num-tr[rs[x]].num;</span><br><span class="line">query(ls[x],ls[y],l,mid,nh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> query(rs[x],rs[y],mid+<span class="number">1</span>,r,nh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,h[maxn],mx=<span class="number">100000</span>;</span><br><span class="line">ll s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;h[i]);</span><br><span class="line">s[i]=s[i<span class="number">-1</span>]+h[i];</span><br><span class="line">&#125;</span><br><span class="line">build(rt[<span class="number">0</span>],<span class="number">1</span>,mx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) update(rt[i],<span class="number">1</span>,mx,rt[i<span class="number">-1</span>],h[i]);</span><br><span class="line"><span class="keyword">int</span> l,r,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">double</span> le=<span class="number">0.0</span>,ri=mx*<span class="number">1.0</span>,ans=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> solve=<span class="number">1.0</span>*(s[r]-s[l<span class="number">-1</span>])/y*x;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fabs</span>(ri-le)&gt;eps)&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(le+ri)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mh=<span class="built_in">ceil</span>(mid);</span><br><span class="line">ss=<span class="number">0</span>,nn=<span class="number">0</span>;</span><br><span class="line">query(rt[l<span class="number">-1</span>],rt[r],<span class="number">1</span>,mx,mh);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1.0</span>*ss<span class="number">-1.0</span>*nn*mid&gt;solve)&#123;</span><br><span class="line">le=mid+eps;</span><br><span class="line">ans=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ri=mid-eps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.15lf\n&quot;</span>,ans);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jsymmetrical-painting"><a class="markdownIt-Anchor" href="#jsymmetrical-painting"></a> J.Symmetrical Painting</h1><p>题意：很多黑色竖条，你可以选择把任意的部分涂白，使得最后剩下的部分有水平对称轴。</p><p>解：有0.5的存在，将L，R全都拉长两倍先。全部看成横条，放在xy轴上看好了，用函数y=kx+b来表示当对称轴为x时，面积为x。考虑只有一根横线的时候，那他的函数图像就是一个山形的，最大值在中间，而且斜率为1的-1，因为当达到中间的时候面积就是黑条的实际长度，即现在黑条长的一半，好理解。而有很多黑条那就时多个一次函数的叠加。而且可能的极值就可能出现在每个黑条的左端点，中间和右端点。函数叠加如下图：</p><p><img src="https://img-blog.csdnimg.cn/2019081610514217.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img" /></p><p>端点处，用1，-2，1来维护现在的斜率即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(ll &amp;x,ll y) &#123;return x=x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll &amp;x,ll y) &#123;return x=x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll x,k;</span><br><span class="line">&#125;s[maxn*<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;<span class="keyword">return</span> x.x&lt;y.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,L,R,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class="line">s[++cnt]=node&#123;L*<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">s[++cnt]=node&#123;L+R,<span class="number">-2</span>&#125;;</span><br><span class="line">s[++cnt]=node&#123;R*<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(s+<span class="number">1</span>,s+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">ll px=<span class="number">0</span>,nk=<span class="number">0</span>,ans=<span class="number">0</span>,tp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) px=s[i].x,nk+=s[i].k;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tp+=nk*(s[i].x-px);</span><br><span class="line">nk+=s[i].k,px=s[i].x;</span><br><span class="line">ans=max(tp,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分基础模板</title>
      <link href="2019/08/12/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/08/12/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>记录一下树链剖分基础模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,r;</span><br><span class="line">ll psum[maxn],sump[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eg[maxn];</span><br><span class="line"><span class="comment">/* BIT */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,ll x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pp=p;</span><br><span class="line"><span class="keyword">while</span>(pp&lt;=n) psum[pp]+=x*p,sump[pp]+=x,pp+=pp&amp;-pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll x)</span> </span>&#123;</span><br><span class="line">update(l,x),update(r+<span class="number">1</span>,-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">ll sum=<span class="number">0</span>,pp=p;</span><br><span class="line"><span class="keyword">while</span>(pp) sum=sump[pp]*(p+<span class="number">1</span>)-psum[pp],pp-=pp&amp;-pp;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> query(r)-query(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn],sz[maxn],son[maxn],id[maxn];</span><br><span class="line"><span class="keyword">int</span> w[maxn],nw[maxn],bel[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="comment">/* TCP */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ff)</span></span>&#123;</span><br><span class="line">dep[x]=dep[ff]+<span class="number">1</span>;</span><br><span class="line">fa[x]=ff,sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(eg[x]);++i)&#123;</span><br><span class="line"><span class="keyword">int</span> to=eg[x][i];</span><br><span class="line"><span class="keyword">if</span>(to==ff) <span class="keyword">continue</span>;</span><br><span class="line">dfs1(to,x);</span><br><span class="line">sz[x]+=sz[to];</span><br><span class="line"><span class="keyword">if</span>(sz[to]&gt;mx)&#123;</span><br><span class="line">son[x]=to,mx=sz[to]; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topx)</span></span>&#123;</span><br><span class="line">id[x]=++cnt;</span><br><span class="line">nw[cnt]=w[x];</span><br><span class="line">bel[x]=topx;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line">dfs2(son[x],topx); <span class="comment">//重儿子 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(eg[x]);++i)&#123; <span class="comment">//轻儿子 </span></span><br><span class="line"><span class="keyword">int</span> to=eg[x][i];</span><br><span class="line"><span class="keyword">if</span>(to==fa[x] || to==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(to,to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">r_update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,ll z)</span></span>&#123; <span class="comment">//将x~y最短距离上的点+z </span></span><br><span class="line"><span class="keyword">while</span>(bel[x]!=bel[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[bel[x]]&lt;dep[bel[y]]) swap(x,y);</span><br><span class="line">add(id[bel[x]],id[x],z);</span><br><span class="line">x=fa[bel[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">add(id[x],id[y],z);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p_update</span><span class="params">(<span class="keyword">int</span> x,ll z)</span></span>&#123; <span class="comment">//将x的子树都+z </span></span><br><span class="line">add(id[x],id[x]+sz[x]<span class="number">-1</span>,z);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">ll <span class="title">r_ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">// 询问x~y最短距离上的点值和 </span></span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bel[x]!=bel[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[bel[x]]&lt;dep[bel[y]]) swap(x,y);</span><br><span class="line">res+=query(id[bel[x]],id[x]);</span><br><span class="line">x=fa[bel[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">res+=query(id[x],id[y]); </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">p_ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//询问x的子树点值和 </span></span><br><span class="line"><span class="keyword">return</span> query(id[x],id[x]+sz[x]<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,w+i);</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">eg[x].pb(y),eg[y].pb(x);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(r,<span class="number">0</span>); <span class="comment">//两次从根dfs </span></span><br><span class="line">dfs2(r,r);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) add(id[i],id[i],nw[id[i]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) J.Just Jump (动态规划+组合数+容斥)</title>
      <link href="2019/08/11/(Nowcoder)%20J.Just%20Jump/"/>
      <url>2019/08/11/(Nowcoder)%20J.Just%20Jump/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/888/J">传送门</a></h1><p>题意：L长的数轴，从0开始跳，每次可以跳&gt;=d的距离，但是有m限制，就是ti时刻不得跳到pi处，求到L的方案数</p><p>解：先不考虑m限制，dp很容易推出了，前缀和优化就是O(n)的。然后考虑限制减去，就是求出经过一次pi(限制处)再抵达L的方案数，这里我们很容易想到容斥定理，用容斥来求。官解：</p><p><img src="https://img-blog.csdnimg.cn/20190811153238168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="" /></p><p>解释一下这个组合数，就是先pi先减去d*ti的最低限制，剩下的就是多余的部分，但是ti次跳跃可能会有0(多余部分) ，下面就看作小球了，因为有0，所以就加入ti个球，现在就是要求小球放入ti个盒子非空了，然后再插入ti-1块隔板即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>,M=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line">ll dp[N],sum[N],b[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll t,p;</span><br><span class="line">&#125;a[M];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;<span class="keyword">return</span> x.p&lt;y.p;&#125;</span><br><span class="line"> </span><br><span class="line">ll l,d,m;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=(ans*x)%mod;</span><br><span class="line">        x=(x*x)%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n || n&lt;<span class="number">0</span> || m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    ans=(ans*fac[n])%mod;</span><br><span class="line">    ans=(ans*inv[m])%mod;</span><br><span class="line">    ans=(ans*inv[n-m])%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000000</span>;i++) fac[i]=(<span class="number">1LL</span>*fac[i<span class="number">-1</span>]*i)%mod;</span><br><span class="line">    inv[<span class="number">10000000</span>]=fpow(fac[<span class="number">10000000</span>],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9999999</span>;i&gt;=<span class="number">1</span>;i--) inv[i]=(<span class="number">1LL</span>*inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(ll p,ll t)</span> </span>&#123;</span><br><span class="line">    p-=t*d;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> C(p+t<span class="number">-1</span>,t<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        b[i]=cal(a[i].p,a[i].t); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j].t&gt;a[i].t) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[j].p==a[i].p) <span class="keyword">continue</span>;</span><br><span class="line">            b[i]=(b[i]<span class="number">-1LL</span>*b[j]*cal(a[i].p-a[j].p,a[i].t-a[j].t)+mod)%mod;     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">res=(res+b[i]*dp[l-a[i].p]%mod)%mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;l,&amp;d,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a[i].t,&amp;a[i].p);</span><br><span class="line">    dp[<span class="number">0</span>]=sum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;d) dp[i]=<span class="number">0</span>,sum[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i]=sum[i-d],sum[i]=(sum[i<span class="number">-1</span>]+dp[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(dp[l]-solve()+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 牛客寒假算法基础集训营3 B 处女座的比赛资格 (拓扑排序)</title>
      <link href="2019/08/11/(Nowcoder)%20%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53%20B%20%E5%A4%84%E5%A5%B3%E5%BA%A7%E7%9A%84%E6%AF%94%E8%B5%9B%E8%B5%84%E6%A0%BC/"/>
      <url>2019/08/11/(Nowcoder)%20%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53%20B%20%E5%A4%84%E5%A5%B3%E5%BA%A7%E7%9A%84%E6%AF%94%E8%B5%9B%E8%B5%84%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/329/B">传送门</a></p><p><em><strong>解题思路：</strong></em> 这题读一遍题目之后，很容易看出这是一个最短路的问题，搭乘一条线路时，收获的钱是得到的钱减去票价，我们自然想要获得的钱越多越好，转化成最短路问题，加个负号就行了，-（得到的钱-票价），票价-得到的钱的意义其实就是付出的钱，自然越少越好。最后最短路的值为负，即得到钱，为正，即付出钱，考虑到有负边，就想到了spfa，但是却T了，重新看题，该题强调 了行程不会形成环，那起点的入度必为0，我们可以用拓扑排序，去边的时候更新dist，这样就只要把图扫一遍了。</p><p><em><strong>注意：</strong></em> 这题最后问的都是关于经费的，如果经费负责人到比赛地是赚钱的，那它不会给处女座一分钱，同时处女座到比赛地是赚钱的，他不会花一分经费。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line">ll dist1[maxn],dist2[maxn];</span><br><span class="line"><span class="comment">// 分别是处女座和教练的最短路</span></span><br><span class="line">ll T,N,M,x,y,z,a,b;</span><br><span class="line">ll in1[maxn],in2[maxn];</span><br><span class="line"><span class="comment">// 分别是处女座和教练的入度</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; t1[maxn],t2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist1,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(dist1));</span><br><span class="line"><span class="built_in">memset</span>(dist2,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(dist2));</span><br><span class="line"><span class="built_in">queue</span>&lt;ll&gt; q1,q2;</span><br><span class="line">dist1[<span class="number">1</span>]=<span class="number">0</span>,dist2[<span class="number">1</span>]=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!in1[i]) &#123;</span><br><span class="line">q1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!in2[i]) &#123;</span><br><span class="line">q2.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll num1,num2;</span><br><span class="line"><span class="keyword">while</span>(!q1.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> np=q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)t1[np].size(); ++i) &#123;</span><br><span class="line">edge tp=t1[np][i];</span><br><span class="line"><span class="keyword">int</span> nto=tp.to,nw=tp.w;</span><br><span class="line">dist1[nto]=min(dist1[nto],dist1[np]+nw);</span><br><span class="line">in1[nto]--;</span><br><span class="line"><span class="keyword">if</span>(!in1[nto]) &#123;</span><br><span class="line">q1.push(nto);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num1=dist1[N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!q2.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> np=q2.front();</span><br><span class="line">q2.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)t2[np].size(); ++i) &#123;</span><br><span class="line">edge tp=t2[np][i];</span><br><span class="line"><span class="keyword">int</span> nto=tp.to,nw=tp.w;</span><br><span class="line">dist2[nto]=min(dist2[nto],dist2[np]+nw);</span><br><span class="line">in2[nto]--;</span><br><span class="line"><span class="keyword">if</span>(!in2[nto]) &#123;</span><br><span class="line">q2.push(nto);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num2=dist2[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num2&lt;=<span class="number">0</span>)num2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(num1&lt;=<span class="number">0</span>)num1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(num2-num1&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;cnznb!!!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num2-num1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num2-num1==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;oof!!!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num2-num1&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;rip!!!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num1-num2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line"><span class="built_in">memset</span>(in1,<span class="number">0</span>,<span class="keyword">sizeof</span>(in1));</span><br><span class="line"><span class="built_in">memset</span>(in2,<span class="number">0</span>,<span class="keyword">sizeof</span>(in2));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">t1[i].clear();</span><br><span class="line">t2[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z&gt;&gt;a&gt;&gt;b;</span><br><span class="line">t1[x].push_back(edge &#123;y,z-a&#125;);</span><br><span class="line">in1[y]++;</span><br><span class="line">t2[x].push_back(edge &#123;y,z-b&#125;);</span><br><span class="line">in2[y]++;</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) E.Explorer (线段树+可撤销并查集)</title>
      <link href="2019/08/10/(Nowcoder)%20E.Explorer/"/>
      <url>2019/08/10/(Nowcoder)%20E.Explorer/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/888/E">传送门</a></h1><p><em><strong>题意：</strong></em> 给出一个无向图，每条边有一个size区间[l,r]，代表可以通过人的大小，求可以从1到n，人的大小的方案数。</p><p><em><strong>解：</strong></em> 可以lct做，可是我还没学过lct。线段树+并查集的做法，我们先离散化size，使得线段树的节点代表size的一段区间，全部左开右闭（这样好处理）。然后我们将符合节点的边加进去，不需要下放。最后我们一遍深搜，深搜的同时将该节点的边，用并查集维护点之间的联通性，搜到叶子节点的时候，说明涵盖了这段区间的边都已经被加进去了，判断1和n的联通性，如果联通，那代表这段size的区间内的值都是可以使得1到n的，加上贡献。回溯的时候，我们将加的边撤销即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> s[maxn&lt;&lt;<span class="number">2</span>],n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; un[maxn&lt;&lt;<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Collect</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> fa[maxn],rk[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i) fa[i]=i,rk[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x^fa[x]) x=fa[x];</span><br><span class="line"><span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">x=search(x),y=search(y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(rk[x]&gt;rk[y])&#123;</span><br><span class="line">fa[y]=x;</span><br><span class="line">un[rt][<span class="number">1</span>].pb(x),un[rt][<span class="number">0</span>].pb(y); <span class="comment">//father and son </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">fa[x]=y;</span><br><span class="line"><span class="keyword">if</span>(rk[x]==rk[y]) rk[y]++;</span><br><span class="line">un[rt][<span class="number">1</span>].pb(y),un[rt][<span class="number">0</span>].pb(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reunite</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=SZ(un[rt][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">rk[un[rt][<span class="number">1</span>][i]]-=rk[un[rt][<span class="number">0</span>][i]];</span><br><span class="line">fa[un[rt][<span class="number">0</span>][i]]=un[rt][<span class="number">0</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">un[rt][<span class="number">1</span>].clear(),un[rt][<span class="number">0</span>].clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;co;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">bool</span> fg;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">&#125; sum[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">sum[rt].fg=<span class="number">1</span>;</span><br><span class="line">sum[rt].l=s[l],sum[rt].r=s[l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">sum[rt].l=sum[rt&lt;&lt;<span class="number">1</span>].l,sum[rt].r=sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=sum[rt].l &amp;&amp; R&gt;=sum[rt].r)&#123;</span><br><span class="line">sum[rt].v.pb(u);</span><br><span class="line">sum[rt].v.pb(v);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L&lt;sum[rt&lt;&lt;<span class="number">1</span>].r) update(L,R,rt&lt;&lt;<span class="number">1</span>,u,v);</span><br><span class="line"><span class="keyword">if</span>(R&gt;sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l) update(L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">over</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(SZ(sum[rt].v))&#123;</span><br><span class="line"><span class="keyword">int</span> len=SZ(sum[rt].v);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="number">2</span>)&#123;</span><br><span class="line">co.unite(sum[rt].v[i],sum[rt].v[i+<span class="number">1</span>],rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum[rt].fg)&#123;</span><br><span class="line"><span class="keyword">if</span>(co.search(<span class="number">1</span>)==co.search(n))&#123;</span><br><span class="line">ans+=sum[rt].r-sum[rt].l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">over(rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">co.reunite(rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">over(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">co.reunite(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="keyword">int</span> U[maxn],V[maxn],L[maxn],R[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;U[i],&amp;V[i],&amp;L[i],&amp;R[i]);</span><br><span class="line">s[++tot]=L[i],s[++tot]=(++R[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(s+<span class="number">1</span>,s+tot+<span class="number">1</span>);</span><br><span class="line">tot=unique(s+<span class="number">1</span>,s+tot+<span class="number">1</span>)-(s+<span class="number">1</span>);</span><br><span class="line">tree.build(<span class="number">1</span>,tot<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">co.init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">tree.update(L[i],R[i],<span class="number">1</span>,U[i],V[i]);</span><br><span class="line">&#125;</span><br><span class="line">tree.over(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>std::pair作为unordered_map的key</title>
      <link href="2019/08/10/pair%E4%BD%9C%E4%B8%BAunordered_map%E7%9A%84key/"/>
      <url>2019/08/10/pair%E4%BD%9C%E4%B8%BAunordered_map%E7%9A%84key/</url>
      
        <content type="html"><![CDATA[<h3 id="pair作为unordered_map的key需要为pair添加hash函数"><a class="markdownIt-Anchor" href="#pair作为unordered_map的key需要为pair添加hash函数"></a> pair作为unordered_map的key需要为pair添加hash函数</h3><p>hash函数根据题意自己进行定义即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pair_hash</span>&#123;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;T1, T2&gt;&amp; p)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> h1 = <span class="built_in">std</span>::hash&lt;T1&gt;&#123;&#125;(p.first);</span><br><span class="line">        <span class="keyword">auto</span> h2 = <span class="built_in">std</span>::hash&lt;T2&gt;&#123;&#125;(p.second);</span><br><span class="line">        <span class="keyword">return</span> h1 ^ h2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>, pair_hash&gt; mp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) E.Find the median (线段树)</title>
      <link href="2019/08/09/(Nowcoder)%20E.Find%20the%20median/"/>
      <url>2019/08/09/(Nowcoder)%20E.Find%20the%20median/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/887/E">传送门</a></h1><p><em><strong>题意：</strong></em> 给你n个区间，每次往你现有的数中加上l,l+1,…,r-1,r这些数，求现在所有数的中位数</p><p><em><strong>解：</strong></em> 区间的范围很大，我们肯定需要离散化，解法也很直观，肯定是线段树维护吗，就维护区间出现点的个数，这样我们query的时候就可以根据数量一直走到叶子节点，求出答案，所以我们每个叶子节点就是代表一段小区间了。这里算是一个小技巧吧，我们把所有的区间都看成是左开右闭的，这样叶子节点的区间就不怕冲突了。比如给出区间[1,3],[2,7],我们将其看成[1,4),[2,8);经过我们离散化会得到 1，2，4，8 ，那我们线段树的叶子节点所代表的区间就是[1,2),[2,4),[4,8).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> X[maxn],Y[maxn],A1,A2,B1,B2,C1,C2,M1,M2,N;</span><br><span class="line"><span class="keyword">int</span> L[maxn],R[maxn],s[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,lz;</span><br><span class="line">ll num;</span><br><span class="line"><span class="keyword">bool</span> fg;</span><br><span class="line">&#125;sum[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">sum[rt].num=sum[rt&lt;&lt;<span class="number">1</span>].num+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[rt].lz)&#123;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>].lz+=sum[rt].lz;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lz+=sum[rt].lz;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>].num+=<span class="number">1LL</span>*sum[rt].lz*(sum[rt&lt;&lt;<span class="number">1</span>].r-sum[rt&lt;&lt;<span class="number">1</span>].l);</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num+=<span class="number">1LL</span>*sum[rt].lz*(sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l);</span><br><span class="line">sum[rt].lz=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">sum[rt].l=s[l],sum[rt].r=s[l+<span class="number">1</span>];</span><br><span class="line">sum[rt].fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">sum[rt].l=sum[rt&lt;&lt;<span class="number">1</span>].l,sum[rt].r=sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=sum[rt].l &amp;&amp; R&gt;=sum[rt].r)&#123;</span><br><span class="line">sum[rt].num+=sum[rt].r-sum[rt].l;</span><br><span class="line">sum[rt].lz++;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(rt);</span><br><span class="line"><span class="keyword">if</span>(L&lt;sum[rt&lt;&lt;<span class="number">1</span>].r) update(L,R,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R&gt;sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l) update(L,R,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,ll cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[rt].fg)&#123;</span><br><span class="line">ll tp=sum[rt].num/(sum[rt].r-sum[rt].l);</span><br><span class="line"><span class="keyword">if</span>(cnt%tp==<span class="number">0</span>) <span class="keyword">return</span> sum[rt].l+(cnt/tp)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> sum[rt].l+(cnt/tp);</span><br><span class="line">&#125;</span><br><span class="line">pushdown(rt);</span><br><span class="line"><span class="keyword">if</span>(cnt&lt;=sum[rt&lt;&lt;<span class="number">1</span>].num) <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>,cnt);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,cnt-sum[rt&lt;&lt;<span class="number">1</span>].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d%d&quot;</span>,&amp;X[<span class="number">1</span>],&amp;X[<span class="number">2</span>],&amp;A1,&amp;B1,&amp;C1,&amp;M1);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d%d&quot;</span>,&amp;Y[<span class="number">1</span>],&amp;Y[<span class="number">2</span>],&amp;A2,&amp;B2,&amp;C2,&amp;M2);</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">X[i]=(<span class="number">1LL</span>*A1*X[i<span class="number">-1</span>]+<span class="number">1LL</span>*B1*X[i<span class="number">-2</span>]+C1)%M1;</span><br><span class="line">Y[i]=(<span class="number">1LL</span>*A2*Y[i<span class="number">-1</span>]+<span class="number">1LL</span>*B2*Y[i<span class="number">-2</span>]+C2)%M2;</span><br><span class="line">&#125;</span><br><span class="line">L[i]=min(X[i],Y[i])+<span class="number">1</span>;</span><br><span class="line">R[i]=max(X[i],Y[i])+<span class="number">2</span>;<span class="comment">//左闭右开 </span></span><br><span class="line">s[++tot]=L[i],s[++tot]=R[i]; </span><br><span class="line">&#125;</span><br><span class="line">sort(s+<span class="number">1</span>,s+tot+<span class="number">1</span>);</span><br><span class="line">tot=unique(s+<span class="number">1</span>,s+tot+<span class="number">1</span>)-(s+<span class="number">1</span>);</span><br><span class="line">build(<span class="number">1</span>,tot<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">ll all=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">update(L[i],R[i],<span class="number">1</span>);</span><br><span class="line">all+=R[i]-L[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,query(<span class="number">1</span>,(all+<span class="number">1</span>)/<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串与各种数据类型的相互转变</title>
      <link href="2019/08/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E4%B8%8E%20%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8F%98/"/>
      <url>2019/08/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E4%B8%8E%20%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串转各种数据类型"><a class="markdownIt-Anchor" href="#字符串转各种数据类型"></a> 字符串转各种数据类型</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a=<span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> aa=stoi(a);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;aa&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> b=<span class="string">&quot;111111111111&quot;</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> bb=stoll(b);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;bb&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> c=<span class="string">&quot;11.1&quot;</span>;</span><br><span class="line"><span class="keyword">float</span> cc=stof(c);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cc&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> d=<span class="string">&quot;11.1111111&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> dd=stod(d);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dd&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="各种数据类型转字符串"><a class="markdownIt-Anchor" href="#各种数据类型转字符串"></a> 各种数据类型转字符串</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">11111</span>;</span><br><span class="line"><span class="built_in">string</span> aa=to_string(a);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;aa&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> b=<span class="number">1.1111111</span>;</span><br><span class="line"><span class="built_in">string</span> bb=to_string(b);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;bb&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) E.independent set 1(状压dp)</title>
      <link href="2019/08/05/(Nowcoder)%20E.independent%20set%201/"/>
      <url>2019/08/05/(Nowcoder)%20E.independent%20set%201/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/885/E">传送门</a></h1><p><em><strong>题意：</strong></em> 求集合所有子集的（最大独立集的个数）之和。</p><p><em><strong>解：</strong></em> 先预处理与i点不相连的点集合a[i],然后直接二进制枚举每种子集，dp更新方程就是：</p><p>dp[i]=max(dp[i^(1&lt;&lt;it)],(char)(dp[i&amp;a[it]]+1)); 就是从该集合随便取出一个1，从要该点和不要该点中选择max。</p><p>我一开始的写法是考虑改集合的每一个1，都进行一次更新，这样无疑是T的，其实想想，用哪一个1本质都是一样的，首先比现在集合少一个点的dp都已经处理结束了，考虑i点要和不要的同时，就已经涵盖了其他点要不要的情况，取得一个最大值。还有要用char不然mle。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">a[x]|=(<span class="number">1</span>&lt;&lt;y);</span><br><span class="line">a[y]|=(<span class="number">1</span>&lt;&lt;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">a[i]=(a[i]|(<span class="number">1</span>&lt;&lt;i))^((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> it=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;(<span class="number">1</span>&lt;&lt;n); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!((i&gt;&gt;it)&amp;<span class="number">1</span>))it++;</span><br><span class="line">dp[i]=max(dp[i^(<span class="number">1</span>&lt;&lt;it)],(<span class="keyword">char</span>)(dp[i&amp;a[it]]+<span class="number">1</span>));</span><br><span class="line">ans+=dp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AC自动机</title>
      <link href="2019/08/05/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>2019/08/05/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="还是视频比较好懂b站传送-传送门"><a class="markdownIt-Anchor" href="#还是视频比较好懂b站传送-传送门"></a> 还是视频比较好懂，b站传送 <a href="https://www.bilibili.com/video/av6295004/?p=2">传送门</a></h1><h1 id="优化在这-传送门"><a class="markdownIt-Anchor" href="#优化在这-传送门"></a> 优化在这 <a href="https://www.luogu.org/problemnew/solution/P5357">传送门</a></h1><p>思想就是，不暴力跳fail边，转而存下来，最后一次性跳，从下往上跳，而且是个拓扑结构。</p><p>优秀的模板贴上面；</p><h2 id="p3796-模板ac自动机加强版"><a class="markdownIt-Anchor" href="#p3796-模板ac自动机加强版"></a> <a href="https://www.luogu.org/problem/P3796">P3796 【模板】AC自动机（加强版）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">155</span>*<span class="number">75</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> mp[maxn],res[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AHO</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">26</span>],fail,flag,ans;</span><br><span class="line">&#125; trie[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> cnt,in[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">ms(trie[cnt].son,<span class="number">0</span>);</span><br><span class="line">trie[cnt].ans=trie[cnt].fail=trie[cnt].flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>*s ,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">1</span>,len=<span class="built_in">strlen</span>(s),id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[root].son[id]) &#123;</span><br><span class="line">trie[root].son[id]=++cnt;</span><br><span class="line">clear(cnt);</span><br><span class="line">&#125;</span><br><span class="line">root=trie[root].son[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!trie[root].flag) trie[root].flag=num;</span><br><span class="line">mp[num]=trie[root].flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; ++i) trie[<span class="number">0</span>].son[i]=<span class="number">1</span>;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> u,ufail,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">u=q.front(),ufail=trie[u].fail,q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; ++i) &#123;</span><br><span class="line">v=trie[u].son[i];</span><br><span class="line"><span class="keyword">if</span>(!v) &#123;</span><br><span class="line">trie[u].son[i]=trie[ufail].son[i];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">trie[v].fail=trie[ufail].son[i];</span><br><span class="line">in[trie[v].fail]++,q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; ++i) <span class="keyword">if</span>(!in[i]) q.push(i);</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">u=q.front(),q.pop();</span><br><span class="line">res[trie[u].flag]=trie[u].ans;</span><br><span class="line">v=trie[u].fail,in[v]--;</span><br><span class="line">trie[v].ans+=trie[u].ans;</span><br><span class="line"><span class="keyword">if</span>(in[v]==<span class="number">0</span>) q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">1</span>,len=<span class="built_in">strlen</span>(s),id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">root=trie[root].son[id],trie[root].ans++;</span><br><span class="line">&#125;</span><br><span class="line">pushup();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cnt=<span class="number">1</span>,ms(trie[<span class="number">1</span>].son,<span class="number">0</span>);</span><br><span class="line">trie[<span class="number">1</span>].ans=trie[<span class="number">1</span>].fail=trie[<span class="number">1</span>].ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;aho;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">155</span>][<span class="number">75</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxs];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(sc(n)!=EOF &amp;&amp; n) &#123;</span><br><span class="line">aho.init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]);</span><br><span class="line">aho.insert(a[i],i);</span><br><span class="line">&#125;</span><br><span class="line">aho.getFail();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">aho.match(s);</span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(res[mp[i]]&gt;mx) mx=res[mp[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(res[mp[i]]==mx) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hdu-2222-keywords-search"><a class="markdownIt-Anchor" href="#hdu-2222-keywords-search"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2222">HDU 2222 Keywords Search</a></h2><p>跟着up主写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Aho</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> fail,cnt;</span><br><span class="line">&#125;no[maxn];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">ms(no[i].nxt,<span class="number">0</span>);</span><br><span class="line">no[i].fail=no[i].cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sz=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),root=<span class="number">0</span>,id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!no[root].nxt[id])&#123;</span><br><span class="line">no[root].nxt[id]=sz++;</span><br><span class="line">&#125;</span><br><span class="line">root=no[root].nxt[id];</span><br><span class="line">&#125;</span><br><span class="line">no[root].cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">no[<span class="number">0</span>].fail=<span class="number">-1</span>;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(no[u].nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">0</span>) no[no[u].nxt[i]].fail=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> v=no[u].fail;</span><br><span class="line"><span class="keyword">while</span>(v!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(no[v].nxt[i])&#123;</span><br><span class="line">no[no[u].nxt[i]].fail=no[v].nxt[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">v=no[v].fail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v==<span class="number">-1</span>) no[no[u].nxt[i]].fail=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(no[u].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(root)&#123;</span><br><span class="line">res+=no[root].cnt;</span><br><span class="line">no[root].cnt=<span class="number">0</span>;</span><br><span class="line">root=no[root].fail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),id,res=<span class="number">0</span>,root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(no[root].nxt[id]) root=no[root].nxt[id];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=no[root].fail;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="number">-1</span> &amp;&amp; no[p].nxt[id]==<span class="number">0</span>) p=no[p].fail;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">-1</span>) root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> root=no[p].nxt[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(no[root].cnt) res+=get(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;aho;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">char</span> s[maxs];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">sc(T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">sc(n);</span><br><span class="line">aho.init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">aho.insert(s);</span><br><span class="line">&#125;</span><br><span class="line">aho.build();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,aho.match(s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="p3808-模板ac自动机简单版"><a class="markdownIt-Anchor" href="#p3808-模板ac自动机简单版"></a> <a href="https://www.luogu.org/problem/P3808">P3808 【模板】AC自动机（简单版）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Aho</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> fail,cnt;</span><br><span class="line">&#125; no[maxn];</span><br><span class="line"><span class="keyword">int</span> sz=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; ++i) &#123;</span><br><span class="line">ms(no[i].nxt,<span class="number">0</span>);</span><br><span class="line">no[i].fail=no[i].cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sz=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),root=<span class="number">0</span>,id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!no[root].nxt[id]) &#123;</span><br><span class="line">no[root].nxt[id]=sz++;</span><br><span class="line">&#125;</span><br><span class="line">root=no[root].nxt[id];</span><br><span class="line">&#125;</span><br><span class="line">no[root].cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">no[<span class="number">0</span>].fail=<span class="number">-1</span>;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(no[u].nxt[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">0</span>) no[no[u].nxt[i]].fail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> v=no[u].fail;</span><br><span class="line"><span class="keyword">while</span>(v!=<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(no[v].nxt[i]) &#123;</span><br><span class="line">no[no[u].nxt[i]].fail=no[v].nxt[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">v=no[v].fail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v==<span class="number">-1</span>) no[no[u].nxt[i]].fail=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(no[u].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(root) &#123;</span><br><span class="line">res+=no[root].cnt;</span><br><span class="line">no[root].cnt=<span class="number">0</span>;</span><br><span class="line">root=no[root].fail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),id,res=<span class="number">0</span>,root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(no[root].nxt[id]) root=no[root].nxt[id];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> p=no[root].fail;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="number">-1</span> &amp;&amp; no[p].nxt[id]==<span class="number">0</span>) p=no[p].fail;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">-1</span>) root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> root=no[p].nxt[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(no[root].cnt) res+=get(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; aho;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">char</span> s[maxs];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">sc(n);</span><br><span class="line"><span class="comment">//aho.init();</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">aho.insert(s);</span><br><span class="line">&#125;</span><br><span class="line">aho.build();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,aho.match(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>发现UP主的代码好像过不了加强数据版，看了数据确实出现了错误。</p><p>索性这个基础版效率也不行，就再学习了一下拓扑优化版本。</p><h2 id="p5357-模板ac自动机二次加强版"><a class="markdownIt-Anchor" href="#p5357-模板ac自动机二次加强版"></a> <a href="https://www.luogu.org/problem/P5357">P5357 【模板】AC自动机（二次加强版）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int Add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int Mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">26</span>],fail,flag,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;ms(son,<span class="number">0</span>),fail=flag=ans=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;trie[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> cnt,in[maxn],mp[maxn],res[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>*s ,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">1</span>,len=<span class="built_in">strlen</span>(s),id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[root].son[id]) trie[root].son[id]=++cnt;</span><br><span class="line">root=trie[root].son[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!trie[root].flag) trie[root].flag=num;</span><br><span class="line">mp[num]=trie[root].flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i) trie[<span class="number">0</span>].son[i]=<span class="number">1</span>; </span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> u,ufail,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">u=q.front(),ufail=trie[u].fail,q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">v=trie[u].son[i];</span><br><span class="line"><span class="keyword">if</span>(!v)&#123;</span><br><span class="line">trie[u].son[i]=trie[ufail].son[i];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">trie[v].fail=trie[ufail].son[i];</span><br><span class="line">in[trie[v].fail]++,q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) <span class="keyword">if</span>(!in[i]) q.push(i);</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">u=q.front(),q.pop();</span><br><span class="line">res[trie[u].flag]=trie[u].ans;</span><br><span class="line">v=trie[u].fail,in[v]--;</span><br><span class="line">trie[v].ans+=trie[u].ans;</span><br><span class="line"><span class="keyword">if</span>(in[v]==<span class="number">0</span>) q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">1</span>,len=<span class="built_in">strlen</span>(s),id;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">root=trie[root].son[id],trie[root].ans++;</span><br><span class="line">&#125;</span><br><span class="line">pushup();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">char</span> s[maxs];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">sc(n);</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">insert(s,i);</span><br><span class="line">&#125;</span><br><span class="line">getFail();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">match(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res[mp[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) H.subsequence 2 (拓扑)</title>
      <link href="2019/08/02/(Nowcoder)%20H.subsequence%202/"/>
      <url>2019/08/02/(Nowcoder)%20H.subsequence%202/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/885/H">传送门</a></h1><p><em><strong>题意：</strong></em> 每次给出两个字母和除去这两个字母的原字符串序列，最后让你输出原字符串。</p><p><em><strong>思路：</strong></em> 如果能想到转化为图，就解决一大半了，所以一定不能固定了思维，学会转换，将除去这两个字母的原字符串序列中的字符转化为图中的指向关系，如果能构造出，那最后必定是一个拓扑图。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">cg</span><span class="params">(<span class="keyword">char</span> c,<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> (c-<span class="string">&#x27;a&#x27;</span>)*<span class="number">10001</span>+x;&#125;</span><br><span class="line"><span class="function">il <span class="keyword">char</span> <span class="title">re</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>+x/<span class="number">10001</span>;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eg[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; nn;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,in[maxn],id[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> len=m*(m<span class="number">-1</span>)/<span class="number">2</span>,num;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;num;</span><br><span class="line"><span class="keyword">if</span>(num!=<span class="number">0</span>) <span class="built_in">cin</span>&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> n0=<span class="number">0</span>,n1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(fg) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;++j)&#123;</span><br><span class="line">vis[s2[j]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s2[j]==s1[<span class="number">0</span>]) n0++,id[j]=cg(s2[j],n0);</span><br><span class="line"><span class="keyword">else</span> n1++,id[j]=cg(s2[j],n1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!nn.count(s1[<span class="number">0</span>])) nn[s1[<span class="number">0</span>]]=n0;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nn[s1[<span class="number">0</span>]]!=n0) fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!nn.count(s1[<span class="number">1</span>])) nn[s1[<span class="number">1</span>]]=n1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nn[s1[<span class="number">1</span>]]!=n1) fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num<span class="number">-1</span>;++j)&#123;</span><br><span class="line">eg[id[j]].pb(id[j+<span class="number">1</span>]),in[id[j+<span class="number">1</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fg)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i*<span class="number">10001</span>+<span class="number">1</span>] &amp;&amp; vis[i]) q.push(i*<span class="number">10001</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ans;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> np=q.front();</span><br><span class="line">ans.pb(re(np));</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(eg[np]);++i)&#123;</span><br><span class="line"><span class="keyword">int</span> to=eg[np][i];</span><br><span class="line">in[to]--;</span><br><span class="line"><span class="keyword">if</span>(!in[to]) q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(SZ(ans)!=n) <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(ans);++i)<span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) B xor (线性基交 + 线段树)</title>
      <link href="2019/07/31/(Nowcoder)%20B%20xor/"/>
      <url>2019/07/31/(Nowcoder)%20B%20xor/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/884/B">传送门</a></h1><p><em><strong>题意</strong></em> ：给你n个集合，每个集合中都有不超过32个数，总共询问m次，每次询问区间 [L, R] 中的所有集合，是否都有一个异或和等于X的子集。</p><p><em><strong>思路</strong></em> ：对于查询区间的集合求线性基的交，看看能不能表示出查询的v即可，但是其实只需要线段树直接查询即可，不必先将交求出来。如何求交  <strong><a href="https://blog.csdn.net/WAautomaton/article/details/88881187">传送1</a> <a href="https://ac.nowcoder.com/discuss/213230?type=101&amp;order=0&amp;pos=1&amp;page=1">传送2</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">2</span>;</span><br><span class="line">uint a[maxn&lt;&lt;<span class="number">2</span>][<span class="number">32</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">insert</span><span class="params">(uint x,<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;&gt;i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!a[cur][i]) &#123;</span><br><span class="line">a[cur][i]=x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x^=a[cur][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">uint t1[<span class="number">32</span>],t2[<span class="number">32</span>],ls=rt&lt;&lt;<span class="number">1</span>,rs=rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i) &#123;</span><br><span class="line">t1[i]=t2[i]=a[ls][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[rs][i]) &#123;</span><br><span class="line">uint x=a[rs][i],tp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">31</span>; j&gt;=<span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;&gt;j) &#123;</span><br><span class="line"><span class="keyword">if</span>(!t1[j]) &#123;</span><br><span class="line">t1[j]=x,t2[j]=tp;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x^=t1[j],tp^=t2[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x) insert(tp,rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line"><span class="keyword">int</span> sz,tp;</span><br><span class="line">sc(sz);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; ++i) &#123;</span><br><span class="line">sc(tp);</span><br><span class="line">insert(tp,rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,uint val,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span>(val&gt;&gt;i) val^=a[rt][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> val==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) res&amp;=query(L,R,val,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) res&amp;=query(L,R,val,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SC(n,m);</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x,y,val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) &#123;</span><br><span class="line">sc(x),sc(y),sc(val);</span><br><span class="line"><span class="keyword">if</span>(query(x,y,val,<span class="number">1</span>,n,<span class="number">1</span>)) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) J LRU management （静态链表）</title>
      <link href="2019/07/25/(Nowcoder)%20J%20LRU%20management/"/>
      <url>2019/07/25/(Nowcoder)%20J%20LRU%20management/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://ac.nowcoder.com/acm/contest/883/J">传送门</a></h1><p>题意读懂了，感觉这就是个大模拟，但是直接模拟复杂度太大，所以我们要用链表指针搞一搞。不知道是不是我写的实在太挫，还是卡常，一直狂T，哭了。</p><p>划重点，加上这个才过。设置哈希桶大小，队友加了才过，估了，才知道这玩也，相见恨晚，还是太菜了呀。</p><p><strong>rk.rehash(500005); a.rehash(500005);</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T,q,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pre,nxt;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,node&gt; a;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; rk;</span><br><span class="line"><span class="keyword">char</span> alls[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> allop[maxn],allv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125; <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T = read();</span><br><span class="line">    rk.rehash(<span class="number">500005</span>);</span><br><span class="line">    a.rehash(<span class="number">500005</span>);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        q = read();</span><br><span class="line">        m = read();</span><br><span class="line">        <span class="keyword">int</span> op,s,v,nlen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fa=<span class="number">-1</span>,last;</span><br><span class="line">        a.clear(),rk.clear();</span><br><span class="line">        rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">            allop[i] = read();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>,alls[i]);</span><br><span class="line">            allv[i] = read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rk.count(alls[i])==<span class="number">0</span>) rk[alls[i]]=++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">            op=allop[i],s=rk[alls[i]],v=allv[i];</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">0</span>)&#123; <span class="comment">//add</span></span><br><span class="line">                <span class="keyword">if</span>(nlen==<span class="number">0</span>)&#123;</span><br><span class="line">                    a[fa].nxt=s;</span><br><span class="line">                    a[s].pre=fa,a[s].val=v;</span><br><span class="line">                    last=s,nlen++;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a.count(s)==<span class="number">0</span> || a[s].val==inf)&#123; <span class="comment">//不存在s</span></span><br><span class="line">                        a[last].nxt=s,a[s].pre=last;</span><br><span class="line">                        a[s].val=v,last=s,nlen++;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,v);</span><br><span class="line">                        <span class="keyword">if</span>(nlen&gt;m)&#123; <span class="comment">//删除头部</span></span><br><span class="line">                            <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">                                <span class="keyword">int</span> fato=a[fa].nxt;</span><br><span class="line">                                a[fato].val=inf;</span><br><span class="line">                                a[fato].pre=<span class="number">0</span>,a[fato].nxt=<span class="number">0</span>;</span><br><span class="line">                                a[fa].nxt=s,a[s].pre=fa;</span><br><span class="line">                                last=s;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                <span class="keyword">int</span> fato=a[fa].nxt;</span><br><span class="line">                                a[fato].val=inf;</span><br><span class="line">                                <span class="keyword">int</span> to=a[fato].nxt;</span><br><span class="line">                                a[to].pre=fa,a[fa].nxt=to;</span><br><span class="line">                                a[fato].pre=<span class="number">0</span>,a[fato].nxt=<span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            nlen--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;<span class="comment">//存在s</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[s].val);</span><br><span class="line">                        <span class="keyword">if</span>(s==last) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">int</span> spre=a[s].pre,sto=a[s].nxt;</span><br><span class="line">                        a[sto].pre=spre,a[spre].nxt=sto;</span><br><span class="line">                        a[last].nxt=s;</span><br><span class="line">                        a[s].pre=last;</span><br><span class="line">                        last=s;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">//query</span></span><br><span class="line">                <span class="keyword">if</span>(a.count(s)==<span class="number">0</span> || a[s].val==inf)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(v==<span class="number">0</span>)    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[s].val);</span><br><span class="line">                    <span class="keyword">if</span>(v==<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[s].pre==fa)    <span class="built_in">puts</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">                        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[a[s].pre].val);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(v==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(s==last) <span class="built_in">puts</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[a[s].nxt].val);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">              </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（CodeForces）D - Programming Team Gym - 101002D （树型依赖背包）</title>
      <link href="2019/07/24/(CodeForces)D%20-%20Programming%20Team%20Gym/"/>
      <url>2019/07/24/(CodeForces)D%20-%20Programming%20Team%20Gym/</url>
      
        <content type="html"><![CDATA[<h2 id="题目biu"><a class="markdownIt-Anchor" href="#题目biu"></a> <a href="http://codeforces.com/gym/101002/attachments">题目biu</a></h2><h2 id="树型依赖背包传送门"><a class="markdownIt-Anchor" href="#树型依赖背包传送门"></a> 树型依赖背包：<a href="https://www.cnblogs.com/zzqsblog/p/5537440.html?tdsourcetag=s_pcqq_aiomsg">传送门</a></h2><p>题意：n个员工，要选k个员工，每个员工都有一个薪水和能力，要使得最终性价比最高。</p><p>由于这题要选上子节点就必须把父节点选上，我们很容易就想到了树型依赖背包。a[i]:代表能力，b[i]代表薪水</p><p>我们可以通过枚举一个答案mid，可以判断$$max\sum_{i=1}<sup>ka[i]/b[i]&gt;=mid$$,进行check。我们将公式进行简单变换就是$$max\sum_{i=1}</sup>k(a[i]-mid<em>b[i])&gt;=0$$,这样，我们可以将（a[i]-mid</em>b[i]）看成第i件物品的价值，而i件物品的重量就是1，在满足去子节点就要取上父亲节点的前提下，取上个k+1个物品的最大收益。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//il int add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">int</span> k,n,a[maxn],b[maxn],w[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> sz[maxn],st[maxn],dl[maxn],t=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">sz[p]=<span class="number">1</span>,st[p]=t++,dl[t<span class="number">-1</span>]=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> to:eg[p]) dfs(to),sz[p]+=sz[to];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> v[maxn],dp[maxn][maxn];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">double</span> ta)</span></span>&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,n) v[i]=<span class="number">1.0</span>*a[i]<span class="number">-1.0</span>*b[i]*ta;</span><br><span class="line">rep(i,<span class="number">0</span>,n+<span class="number">2</span>) rep(p,<span class="number">0</span>,k+<span class="number">1</span>) dp[i][p]=dp[i][p]=-inf;</span><br><span class="line">dp[n+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=dl[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;=k+<span class="number">1</span>;++p)&#123;</span><br><span class="line"><span class="keyword">if</span>(p&lt;w[x])dp[i][p]=max(dp[i+sz[x]][p],dp[i][p]);</span><br><span class="line"><span class="keyword">else</span>dp[i][p]=max(max(dp[i+sz[x]][p],dp[i+<span class="number">1</span>][p-w[x]]+v[x]),dp[i][p]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[<span class="number">0</span>][k+<span class="number">1</span>]<span class="number">-0.0</span>&gt;eps) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SC(k,n);</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">SC(b[i],a[i]),sc(x);</span><br><span class="line">eg[x].pb(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">rep(i,<span class="number">0</span>,n) w[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> le=<span class="number">0.0</span>,ri=inf,ans;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">abs</span>(ri-le)&gt;eps)&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(ri+le)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(ck(mid))&#123;</span><br><span class="line">ans=mid;</span><br><span class="line">le=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ri=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFT基础模板</title>
      <link href="2019/07/23/FFT%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/07/23/FFT%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://www.cnblogs.com/zwfymqz/p/8244902.html#_label5">传送门</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//il int add(int x,int y) &#123;return x+y&gt;=mod?x+y-mod:x+y;&#125;</span></span><br><span class="line"><span class="comment">//il int mul(ll x,int y) &#123;return x*y&gt;=mod?x*y%mod:x*y;&#125;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> limit=<span class="number">1</span>,L=<span class="number">0</span>,r[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">Complex(<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>) &#123;</span><br><span class="line">x=xx,y=yy;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x+b.x,y+b.y);</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x-b.x,y-b.y);</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x*b.x-y*b.y,x*b.y+y*b.x);</span><br><span class="line">&#125;</span><br><span class="line">&#125; a[N],b[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *A,<span class="keyword">int</span> opt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;limit; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;r[i]) swap(A[i],A[r[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>; mid&lt;limit; mid&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="function">Complex <span class="title">Wn</span><span class="params">(<span class="built_in">cos</span>(pi/mid),opt*<span class="built_in">sin</span>(pi/mid))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>; j&lt;limit; j+=R) &#123;</span><br><span class="line"><span class="function">Complex <span class="title">W</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;mid; k++,W=W*Wn) &#123;</span><br><span class="line">Complex x=A[j+k],y=W*A[j+mid+k];</span><br><span class="line">A[j+k]=x+y;</span><br><span class="line">A[j+mid+k]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(Complex *a,Complex *b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(limit&lt;=n+m) limit&lt;&lt;=<span class="number">1</span>,L++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;limit; i++) r[i]=(r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>)); <span class="comment">// 预处理</span></span><br><span class="line">FFT(a,<span class="number">1</span>),FFT(b,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=limit; i++) a[i]=a[i]*b[i];</span><br><span class="line">FFT(a,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i].x); <span class="comment">// n次多项式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;b[i].x); <span class="comment">// m次多项式</span></span><br><span class="line">Solve(a,b);<span class="comment">//求出两多项式卷积</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n+m; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(<span class="keyword">int</span>)(a[i].x/limit+<span class="number">0.5</span>)); <span class="comment">//输出指数为i的系数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树基础模板</title>
      <link href="2019/07/17/%E4%B8%BB%E5%B8%AD%E6%95%B0%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/07/17/%E4%B8%BB%E5%B8%AD%E6%95%B0%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="不带修改主席树"><a class="markdownIt-Anchor" href="#不带修改主席树"></a> 不带修改主席树</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],rt[maxn*<span class="number">20</span>],ls[maxn*<span class="number">20</span>],rs[maxn*<span class="number">20</span>],sum[maxn*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">rt=++tot;</span><br><span class="line">sum[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(ls[rt],l,mid);</span><br><span class="line">build(rs[rt],mid+<span class="number">1</span>,r); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> last,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">rt=++tot;</span><br><span class="line">ls[rt]=ls[last],rs[rt]=rs[last];</span><br><span class="line">sum[rt]=sum[last]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=mid) update(ls[rt],l,mid,ls[last],p);</span><br><span class="line"><span class="keyword">else</span> update(rs[rt],mid+<span class="number">1</span>,r,rs[last],p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ss,<span class="keyword">int</span> ee,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=sum[ls[ee]]-sum[ls[ss]];</span><br><span class="line"><span class="keyword">if</span>(k&lt;=cnt) <span class="keyword">return</span> query(ls[ss],ls[ee],l,mid,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(rs[ss],rs[ee],mid+<span class="number">1</span>,r,k-cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SC(n,m);</span><br><span class="line">rep(i,<span class="number">1</span>,n) sc(a[i]),b[i]=a[i];</span><br><span class="line">sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> sz=unique(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">build(rt[<span class="number">0</span>],<span class="number">1</span>,sz);</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">a[i]=lower_bound(b+<span class="number">1</span>,b+sz+<span class="number">1</span>,a[i])-b; </span><br><span class="line">update(rt[i],<span class="number">1</span>,sz,rt[i<span class="number">-1</span>],a[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">sc(l),sc(r),sc(k);</span><br><span class="line"><span class="keyword">int</span> id=query(rt[l<span class="number">-1</span>],rt[r],<span class="number">1</span>,sz,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b[id]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="带修改的主席数"><a class="markdownIt-Anchor" href="#带修改的主席数"></a> 带修改的主席数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=maxn*<span class="number">150</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,cnt,sz,a[maxn],b[maxn*<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> root[maxn],ls[maxm],rs[maxm],dat[maxm];</span><br><span class="line"><span class="keyword">int</span> totL,totR;</span><br><span class="line"><span class="keyword">int</span> L[maxn],R[maxn];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;now, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!now) now=++tot;</span><br><span class="line">    dat[now]+=val;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) insert(ls[now],l,mid,x,val);</span><br><span class="line">    <span class="keyword">else</span> insert(rs[now],mid+<span class="number">1</span>,r,x,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=totL; i++) sum-=dat[ls[L[i]]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=totR; i++) sum+=dat[ls[R[i]]];</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=totL; i++) L[i]=ls[L[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=totR; i++) R[i]=ls[R[i]];</span><br><span class="line">        <span class="keyword">return</span> ask(l,mid,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=totL; i++) L[i]=rs[L[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=totR; i++) R[i]=rs[R[i]];</span><br><span class="line"><span class="keyword">return</span> ask(mid+<span class="number">1</span>,r,k-sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=a[x],tt=C;</span><br><span class="line">    a[x]=C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=x; j&lt;=n; j+=lowbit(j))&#123;</span><br><span class="line">        insert(root[j],<span class="number">1</span>,sz,t,<span class="number">-1</span>);</span><br><span class="line">        insert(root[j],<span class="number">1</span>,sz,tt,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span>&#123; <span class="comment">//返回下标 </span></span><br><span class="line">    totL=totR=<span class="number">0</span>,l--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=l; j; j-=lowbit(j)) L[++totL]=root[j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=r; j; j-=lowbit(j)) R[++totR]=root[j];</span><br><span class="line">    <span class="keyword">int</span> id=ask(<span class="number">1</span>,sz,t);</span><br><span class="line">    <span class="keyword">return</span> id; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> op,l,r,k;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line">tot=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n) sc(a[i]),b[++cnt]=a[i];</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">op=getchar();</span><br><span class="line"><span class="keyword">while</span>(!(op==<span class="string">&#x27;Q&#x27;</span> || op==<span class="string">&#x27;C&#x27;</span>)) op=getchar();</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">read(l),read(r),read(k);</span><br><span class="line">q[i]=node&#123;<span class="number">1</span>,l,r,k&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">read(l),read(r);</span><br><span class="line">b[++cnt]=r;</span><br><span class="line">q[i]=node&#123;<span class="number">0</span>,l,r,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>);</span><br><span class="line">sz=unique(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">a[i]=lower_bound(b+<span class="number">1</span>,b+sz+<span class="number">1</span>,a[i])-(b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=lowbit(j))&#123;</span><br><span class="line">insert(root[j],<span class="number">1</span>,sz,a[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].op)&#123; <span class="comment">//query</span></span><br><span class="line"><span class="keyword">int</span> id=query(q[i].l,q[i].r,q[i].k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b[id]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// modify</span></span><br><span class="line"><span class="keyword">int</span> x=q[i].l,now=lower_bound(b+<span class="number">1</span>,b+sz+<span class="number">1</span>,q[i].r)-b;</span><br><span class="line">update(x,now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数的三种模板</title>
      <link href="2019/05/31/%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E6%9D%BF/"/>
      <url>2019/05/31/%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="常规组合数"><a class="markdownIt-Anchor" href="#常规组合数"></a> 常规组合数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll C[<span class="number">2333</span>][<span class="number">2333</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; ++j)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    ll t=C[a+b+c+d][a+b+c]*C[a+b+c][a+b]%MOD*C[a+b][a]%MOD;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="卢卡斯组合数"><a class="markdownIt-Anchor" href="#卢卡斯组合数"></a> 卢卡斯组合数</h1><p>对于模数不是很大情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,p;</span><br><span class="line">ll fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfac</span><span class="params">(ll p)</span> </span>&#123; <span class="comment">//预处理阶层</span></span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; i++)fac[i]=fac[i<span class="number">-1</span>]*i%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll a,ll n,ll p)</span> </span>&#123; <span class="comment">//快速幂运算</span></span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*a%p;</span><br><span class="line">a=a*a%p;</span><br><span class="line">n/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n,ll m,ll p)</span> </span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&amp;&amp;m) &#123;</span><br><span class="line">ll a=n%p,b=m%p;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ans=(ans*fac[a]*power(fac[b]*fac[a-b]%p,p<span class="number">-2</span>,p))%p;</span><br><span class="line">n/=p,m/=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">getfac(p);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;lucas(n,m,p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组合数忘记从哪里瞟来的了"><a class="markdownIt-Anchor" href="#组合数忘记从哪里瞟来的了"></a> 组合数（忘记从哪里瞟来的了）</h1><p>对于n，m不是很大但是模数很大情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2555</span>;</span><br><span class="line">ll fac[maxn],inv[maxn];</span><br><span class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=(ans*x)%mod;</span><br><span class="line">        x=(x*x)%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n || n&lt;<span class="number">0</span> || m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    ans=(ans*fac[n])%mod;</span><br><span class="line">    ans=(ans*inv[m])%mod;</span><br><span class="line">    ans=(ans*inv[n-m])%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) fac[i]=(<span class="number">1LL</span>*fac[i<span class="number">-1</span>]*i)%mod;</span><br><span class="line">    inv[N]=fpow(fac[N],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) inv[i]=(<span class="number">1LL</span>*inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line">init(maxn<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1LL</span>*C(a+b+c+d,a)%mod*C(b+c+d,b)%mod*C(c+d,c)%mod*C(d,d)%mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019东北四省 B. Balanced Diet</title>
      <link href="2019/05/30/2019%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%20B.%20Balanced%20Diet/"/>
      <url>2019/05/30/2019%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%20B.%20Balanced%20Diet/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/gym/102220/problem/B">传送门</a></h1><p><em><strong>题意</strong></em>：有n块糖，m种类型，并且每种类型的糖有一个限制Li，只能取&gt;=Li或者0块糖，然后给出一个判定的标准S/C，S为所取糖的价值总和，C为所取的类型中数量最多的。</p><p><em><strong>思路：</strong></em> 如果C确定，那么对于每种糖，如果能取，我们必定是贪心取价值最大的，所以可能取C块，或者将其取完（总数&lt;=C);如果每次枚举C都去暴力枚举贪心的话这样肯定是不可以的，开一个vector数组f，f[i]代表当C为i时还可以取得糖果，是相较于f[i-1]多取的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,l[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxn],f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">rep(i,<span class="number">1</span>,m)<span class="built_in">cin</span>&gt;&gt;l[i];</span><br><span class="line"><span class="keyword">int</span> val,op;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;val&gt;&gt;op;</span><br><span class="line">v[op].pb(val);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">sort(v[i].begin(),v[i].end(),cmp);</span><br><span class="line">rep(j,<span class="number">0</span>,SZ(v[i])<span class="number">-1</span>)f[max((j+<span class="number">1</span>),l[i])].pb(v[i][j]);</span><br><span class="line">v[i].clear();</span><br><span class="line">&#125;</span><br><span class="line">ll as=<span class="number">0</span>,ac=<span class="number">1</span>,ns=<span class="number">0</span>,nc;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">nc=i;</span><br><span class="line">rep(j,<span class="number">0</span>,SZ(f[i])<span class="number">-1</span>)ns+=f[i][j];</span><br><span class="line"><span class="keyword">if</span>(ns*ac &gt; nc*as)as=ns,ac=nc;</span><br><span class="line">f[i].clear();</span><br><span class="line">&#125;</span><br><span class="line">ll tp=__gcd(ac,as);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;as/tp&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;ac/tp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(HDU) 6534 Chika and Friendly Pairs (莫队+树状数组)</title>
      <link href="2019/05/27/(HDU)%206534%20Chika%20and%20Friendly%20Pairs/"/>
      <url>2019/05/27/(HDU)%206534%20Chika%20and%20Friendly%20Pairs/</url>
      
        <content type="html"><![CDATA[<h3 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6534">传送门</a></h3><h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意：</h2><p>给你一个数组，对于第i个数来说，如果存在一个位置j，使得j&gt;i并且a[j]-k&lt;=a[i]&lt;=a[j]+k，那么这对数就称为好的，有q个询问，问你l到r区间有多少对好的数。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h2><p>这题卡常数卡的好厉害呀，比赛时是用主席树+莫队写的gg，主席数常数太大了，用树状数组和莫队维护，同时先把a[i],a[i]-k,a[i]+k先全部离散好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>],n,m,k;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">//树状数组 </span></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=<span class="number">3</span>*n+<span class="number">10</span>) sum[p]+=x,p+=p&amp;-p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p) res+=sum[p],p-=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">r_ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ask(r)-ask(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//莫队</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id,l,r;</span><br><span class="line">&#125; qu[maxn];</span><br><span class="line"><span class="keyword">int</span> block,res=<span class="number">0</span>,ans[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.l/block != y.l/block)<span class="keyword">return</span> x.l&lt;y.l;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.r&lt;y.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ida[maxn],upa[maxn],doa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">sc(n),sc(m),sc(k);</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">sc(a[i]);</span><br><span class="line">b[++cnt]=a[i],b[++cnt]=a[i]-k,b[++cnt]=a[i]+k;</span><br><span class="line">&#125;</span><br><span class="line">sort(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> sz=unique(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">ida[i]=lower_bound(b+<span class="number">1</span>,b+sz+<span class="number">1</span>,a[i])-b;</span><br><span class="line">upa[i]=lower_bound(b+<span class="number">1</span>,b+sz+<span class="number">1</span>,a[i]+k)-b;</span><br><span class="line">doa[i]=lower_bound(b+<span class="number">1</span>,b+sz+<span class="number">1</span>,a[i]-k)-b;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)SC(qu[i].l,qu[i].r),qu[i].id=i;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">sort(qu+<span class="number">1</span>,qu+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> L=qu[<span class="number">1</span>].l,R=qu[<span class="number">1</span>].l<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">while</span>(L&lt;qu[i].l) &#123;</span><br><span class="line">add(ida[L],<span class="number">-1</span>);</span><br><span class="line">res-=r_ask(doa[L],upa[L]);</span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L&gt;qu[i].l) &#123;</span><br><span class="line">L--;</span><br><span class="line">res+=r_ask(doa[L],upa[L]);</span><br><span class="line">add(ida[L],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R&gt;qu[i].r) &#123;</span><br><span class="line">add(ida[R],<span class="number">-1</span>);</span><br><span class="line">res-=r_ask(doa[R],upa[R]);</span><br><span class="line">R--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R&lt;qu[i].r) &#123;</span><br><span class="line">R++;</span><br><span class="line">res+=r_ask(doa[R],upa[R]);</span><br><span class="line">add(ida[R],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans[qu[i].id]=res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rep(i,<span class="number">1</span>,m)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求树的直径</title>
      <link href="2019/05/20/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
      <url>2019/05/20/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>求树的路径可以两次bfs或者dfs，求法和证明如下：</p><p><em><strong>求法：</strong></em> 从任意一点u先做一次bfs/dfs找到最远的一点y，在从y做一次bfs/dfs找到最远的距离，而这个距离就是树的直径了。</p><p><em><strong>证明：</strong></em> <a href="https://www.cnblogs.com/a-clown/p/6131346.html">直接引用的这位大哥的了。</a></p><p>假设 s-t这条路径为树的直径，或者称为树上的最长路<br />　　现有结论，从任意一点u出发搜到的最远的点一定是s、t中的一点，然后再从这个最远点开始搜，就可以搜到另一个最长路的端点，即用两遍广搜就可以找出树的最长路，证明：</p><p>1.设u为s-t路径上的一点，结论显然成立，否则设搜到的最远点为T则  dis(u,T) &gt;dis(u,s)   且 dis(u,T)&gt;dis(u,t)  则最长路不是s-t了，与假设矛盾</p><p>2.设u不为s-t路径上的点首先明确，假如u走到了s-t路径上的一点，那么接下来的路径肯定都在s-t上了，而且终点为s或t，在1中已经证明过了所以现在又有两种情况了：<br />1：u走到了s-t路径上的某点，假设为X，最后肯定走到某个端点，假设是t ，则路径总长度为dis(u,X)+dis(X,t)<br />2：u走到最远点的路径u-T与s-t无交点，则dis(u-T) &gt;dis(u,X)+dis(X,t);显然，如果这个式子成立，则    dis(u,T)+dis(s,X)+dis(u,X)&gt;dis(s,X)+dis(X,t)=dis(s,t)最长路不是s-t矛盾</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*树的直径-&gt;两次bfs*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn],alen=-inf;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> n,x,y,z,id;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line">vis[st]=<span class="number">1</span>,dis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(st);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> np=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(eg[np]);++i)&#123;</span><br><span class="line">node tp=eg[np][i];</span><br><span class="line"><span class="keyword">int</span> to=tp.to,len=tp.len;</span><br><span class="line"><span class="keyword">if</span>(!vis[to])&#123;</span><br><span class="line">vis[to]=<span class="number">1</span>;</span><br><span class="line">dis[to]=dis[np]+len;</span><br><span class="line">q.push(to);</span><br><span class="line"><span class="keyword">if</span>(dis[to]&gt;alen)&#123;</span><br><span class="line">alen=dis[to];</span><br><span class="line">id=to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">ms(dis,<span class="number">0x3f</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">eg[x].pb(node&#123;y,z&#125;);</span><br><span class="line">eg[y].pb(node&#123;x,z&#125;);</span><br><span class="line">&#125; </span><br><span class="line">bfs(<span class="number">1</span>);</span><br><span class="line">ms(dis,<span class="number">0</span>),ms(vis,<span class="number">0</span>);</span><br><span class="line">bfs(id);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;alen&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1430 序列取数 (区间dp)</title>
      <link href="2019/05/19/(Luogu)%20P1430%20%E5%BA%8F%E5%88%97%E5%8F%96%E6%95%B0/"/>
      <url>2019/05/19/(Luogu)%20P1430%20%E5%BA%8F%E5%88%97%E5%8F%96%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="https://www.luogu.org/problemnew/show/P1430">传送门</a></h1><p><em><strong>题意：</strong></em> 给定一个长为n的整数序列(n&lt;=1000)，由A和B轮流取数（A先取）。每个人可从序列的左端或右端取若干个数（至少一个），但不能两端都取。所有数都被取走后，两人分别统计所取数的和作为各自的得分。假设A和B都足够聪明，都使自己得分尽量高，求A的最终得分。</p><p><em><strong>思路：</strong></em> 看视频讲的这道题，喵啊，按照他的思路写了出来。取数肯定是取一段连续的序列，剩下一段连续的序列。</p><p>首先定义F[l] [r] : [l,r]区间 a-b的最大值（a代表a取得最大和，b代表b取得最大和）。为何这样定义，这样我们会得到两个方程    a-b=F[1] [n] 和 a+b=allsum 这样我们就可以得出 a=(F[1] [n]+allsum)/2;</p><p>面对[l,r]区间我们有3种选择。sum[]为前缀和数组</p><ul><li><strong>全取了，F[l] [r] = sum[r] - sum[l-1].</strong></li><li><strong>从左边取一段 F[l] [r] = sum[l’-1] -sum[l] - F[l’] [r] (解释一下为什么是减法呢，因为剩下来的区间 [l’][r] b也会选择最优策略,使得b-a最大，所以a就只能得到 -F[l’] [r] 即 b选择下的 a-b的贡献了）</strong></li><li><strong>从右边取一段 F[l] [r] =sum[r] - sum[r’] - F[l] [r’]</strong></li></ul><p>更新就是在上面三种情况取最大即可，我们可以分析出，枚举长度len，枚举起点l，枚举断点k 是O(n^3)的复杂度，显然过不了。</p><p>这就需要耍点手段了。</p><p><strong>我们看第三种情况下的递推式 转化 F[l] [r] =sum[r] - （sum[r’] + F[l][r’]）</strong></p><p><strong>我们设P[l][r] = sum[r] + F[l][r], 再设一个Mi[l][r] = min{ P[l][x] | l&lt;=x&lt;=r },我们想要F[l][r]大，不就是想要P[l][r]最小嘛，所以我们Mi[l][r]的转移也很简单，Mi[l][r]=min(Mi[l][r-1],sum[r]+F[l][r]); （这里P数组没有实际作用，为了简单说明） 第三种情况的转移其实就 F[l][r]=max(F[l][r],sum[r]-Mi[l][r-1]);</strong></p><p><strong>同理对于第二个递推式 转化 ( sum[l’-1] - F[l’][r] )-sum[l-1]</strong></p><p><strong>这里我们设T[l][r]=sum[l-1] - F[l][r] ) , 用Mx[l][r] = max{ T[x][r] | l&lt;=x&lt;=r }维护，最后我们也可以推得  F[l][r]=max(F[l][r],Mx[l+1][r]-sum[l-1]);</strong></p><p>最后代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn],F[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> Mx[maxn][maxn],Mi[maxn][maxn],T_T,n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">2</span>; ++i) &#123;</span><br><span class="line">sum[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n+<span class="number">2</span>; ++j) &#123;</span><br><span class="line">Mx[i][j]=-inf,Mi[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sc(T_T);</span><br><span class="line"><span class="keyword">while</span>(T_T--) &#123;</span><br><span class="line">sc(n);</span><br><span class="line">init(n);</span><br><span class="line">rep(i,<span class="number">1</span>,n)sc(a[i]),sum[i]+=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>; len&lt;=n; ++len) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>; l+len<span class="number">-1</span>&lt;=n; ++l) &#123;</span><br><span class="line"><span class="keyword">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">F[l][r]=sum[r]-sum[l<span class="number">-1</span>];</span><br><span class="line">F[l][r]=max(F[l][r],sum[r]-Mi[l][r<span class="number">-1</span>]);</span><br><span class="line">F[l][r]=max(F[l][r],Mx[l+<span class="number">1</span>][r]-sum[l<span class="number">-1</span>]);</span><br><span class="line">Mi[l][r]=min(Mi[l][r<span class="number">-1</span>],sum[r]+F[l][r]);</span><br><span class="line">Mx[l][r]=max(Mx[l+<span class="number">1</span>][r],sum[l<span class="number">-1</span>]-F[l][r]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(F[<span class="number">1</span>][n]+sum[n])/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(可持久化字典树) 51nod 1295 XOR key</title>
      <link href="2019/05/18/51nod%201295%20XOR%20key/"/>
      <url>2019/05/18/51nod%201295%20XOR%20key/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://www.51nod.com/Challenge/Problem.html#!%23problemId=1295">传送门</a></h1><p><em><strong>题意：</strong></em> 给出一个长度为N的正整数数组A，再给出Q个查询，每个查询包括3个数，L, R, X (L &lt;= R)。求A[L] 至 A[R] 这R - L + 1个数中，与X 进行异或运算(Xor)，得到的最大值是多少？</p><p><em><strong>思路：</strong></em> 所有可持久化的树型结构都是一样的，每次只更新一支，沿用上一个树的一支。具体原理<a href="https://blog.csdn.net/TDD_Master/article/details/81164318">可以先看主席树的</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*可持久化字典树*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,cnt=<span class="number">0</span>,a;</span><br><span class="line"><span class="keyword">int</span> son[maxn*<span class="number">35</span>][<span class="number">2</span>],root[maxn*<span class="number">35</span>],sum[maxn*<span class="number">35</span>];</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=++cnt,t=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">son[x][<span class="number">0</span>]=son[pre][<span class="number">0</span>],son[x][<span class="number">1</span>]=son[pre][<span class="number">1</span>];</span><br><span class="line">sum[x]=sum[pre]+<span class="number">1</span>; <span class="comment">//记录这个节点出现的次数，存储的是前缀和</span></span><br><span class="line"><span class="keyword">int</span> id=<span class="number">1</span>&amp;(val&gt;&gt;i);</span><br><span class="line">son[x][id]=++cnt; <span class="comment">//就更新一支</span></span><br><span class="line">x=son[x][id],pre=son[pre][id];</span><br><span class="line">&#125;</span><br><span class="line">sum[x]=sum[pre]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">int</span> id=!(<span class="number">1</span>&amp;(val&gt;&gt;i)); <span class="comment">//val这一位的反</span></span><br><span class="line"><span class="keyword">if</span>(sum[son[r][id]]-sum[son[l][id]]&gt;<span class="number">0</span>)&#123; 如果&gt;<span class="number">0</span>,那就或上</span><br><span class="line">ans|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">l=son[l][id],r=son[r][id]; <span class="comment">//进入这个枝节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>l=son[l][!id],r=son[r][!id]; <span class="comment">//不行就只能进入另一个枝节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a,root[i]=Insert(a,root[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">int</span> x,l,r;</span><br><span class="line">rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;l&gt;&gt;r;</span><br><span class="line">l++,r++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Query(x,root[l<span class="number">-1</span>],root[r])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可持久化字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(HDU) 6191 Query on A Tree (可持久化字典树+dfs序)</title>
      <link href="2019/05/18/(HDU)%206191%20Query%20on%20A%20Tree/"/>
      <url>2019/05/18/(HDU)%206191%20Query%20on%20A%20Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6191">传送门</a></h1><p><em><strong>题意：</strong></em> 给你一颗树，每个点都有取值，q次查询，一个u，一个x，求以u为根的树的一个节点与x异或的最大值。</p><p><em><strong>思路：</strong></em> 题目给了10000ms，暴力啊，失败了。这题需要用可持久化字典树，如果你不知道你可以先做一下<a href="https://blog.csdn.net/TDD_Master/article/details/90318054">这道题</a>，这时候我们如果知道以u为根的树的起始root和最后root，那我们不就可以直接query嘛，这个我们只要在dfs的时候用个in数组和out数组来记录u的初始节点和结束节点就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,fa;</span><br><span class="line"><span class="keyword">int</span> v[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[maxn];</span><br><span class="line"><span class="keyword">int</span> root[maxn*<span class="number">35</span>],sum[maxn*<span class="number">35</span>],son[maxn*<span class="number">35</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> in[maxn],out[maxn],id=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">cnt=id=<span class="number">0</span>;</span><br><span class="line">ms(in,<span class="number">0</span>),ms(out,<span class="number">0</span>),ms(root,<span class="number">0</span>);</span><br><span class="line">ms(sum,<span class="number">0</span>),ms(son,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=++cnt,t=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">son[x][<span class="number">0</span>]=son[pre][<span class="number">0</span>],son[x][<span class="number">1</span>]=son[pre][<span class="number">1</span>];</span><br><span class="line">sum[x]=sum[pre]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">1</span>&amp;(val&gt;&gt;i);</span><br><span class="line">son[x][id]=++cnt;</span><br><span class="line">x=son[x][id],pre=son[pre][id];</span><br><span class="line">&#125;</span><br><span class="line">sum[x]=sum[pre]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">int</span> id=!(<span class="number">1</span>&amp;(val&gt;&gt;i));</span><br><span class="line"><span class="keyword">if</span>(sum[son[r][id]]-sum[son[l][id]]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">r=son[r][id],l=son[l][id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> r=son[r][!id],l=son[l][!id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> np)</span></span>&#123;</span><br><span class="line">in[np]=++id,root[in[np]]=Insert(v[np],root[in[np]<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ(mp[np]);++i)&#123;</span><br><span class="line">dfs(mp[np][i]);</span><br><span class="line">&#125;</span><br><span class="line">out[np]=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> u,x;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q)&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;v[i];</span><br><span class="line">rep(i,<span class="number">2</span>,n)<span class="built_in">cin</span>&gt;&gt;fa,mp[fa].pb(i);</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;x;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Query(x,root[in[u]<span class="number">-1</span>],root[out[u]])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line">rep(i,<span class="number">1</span>,n+<span class="number">2</span>)mp[i].clear();</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可持久化字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splay基础模板(简单修改和翻转)</title>
      <link href="2019/05/05/splay%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF(%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9%E5%92%8C%E7%BF%BB%E8%BD%AC)/"/>
      <url>2019/05/05/splay%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF(%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9%E5%92%8C%E7%BF%BB%E8%BD%AC)/</url>
      
        <content type="html"><![CDATA[<h3 id="初学看的这篇博客"><a class="markdownIt-Anchor" href="#初学看的这篇博客"></a> <a href="https://baijiahao.baidu.com/s?id=1613228134219334653&amp;wfr=spider&amp;for=pc">初学，看的这篇博客</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">/* TDD */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">2</span>],val[N],cnt[N],par[N],sz[N],rev[N];</span><br><span class="line"><span class="comment">//x节点的左右儿子；x存储的权值；x存储的重复权值的个数；x的父亲节点；x子树下储存的权值数 </span></span><br><span class="line"><span class="comment">//（包括重复）;翻转标记 </span></span><br><span class="line"><span class="keyword">int</span> root,ncnt;</span><br><span class="line"><span class="keyword">int</span> n,m; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;sz[x]=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]]+cnt[x];&#125; </span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[x])&#123;</span><br><span class="line">swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">rev[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">rev[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>;</span><br><span class="line">rev[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ws</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[par[x]][<span class="number">1</span>]==x;&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f],k=ws(x),w=ch[x][k^<span class="number">1</span>];</span><br><span class="line">ch[f][k]=w,par[w]=f;</span><br><span class="line">ch[ff][ws(f)]=x,par[x]=ff;</span><br><span class="line">ch[x][k^<span class="number">1</span>]=f,par[f]=x;</span><br><span class="line">pushup(f),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> goal=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(par[x]!=goal)&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f];</span><br><span class="line"><span class="keyword">if</span>(ff!=goal)&#123;</span><br><span class="line"><span class="keyword">if</span>(ws(x)==ws(f)) rotate(f);</span><br><span class="line"><span class="keyword">else</span> rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!goal) root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//找到x值并将其旋转为根 </span></span><br><span class="line"><span class="keyword">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(ch[cur][x&gt;val[cur]] &amp;&amp; x!=val[cur])&#123;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line">splay(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=root,p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cur &amp;&amp; val[cur]!=x)&#123;</span><br><span class="line">p=cur;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur) cnt[cur]++;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cur=++ncnt;</span><br><span class="line"><span class="keyword">if</span>(p) ch[p][x&gt;val[p]]=cur;</span><br><span class="line">ch[cur][<span class="number">0</span>]=ch[cur][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">par[cur]=p,val[cur]=x;</span><br><span class="line">cnt[cur]=sz[cur]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">splay(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*查询*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">//第k-1大 (因为一开始插入了-inf)</span></span><br><span class="line"><span class="keyword">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">pushdown(cur);<span class="comment">//有区间操作时才需pushdown </span></span><br><span class="line"><span class="keyword">if</span>(ch[cur][<span class="number">0</span>] &amp;&amp; k&lt;=sz[ch[cur][<span class="number">0</span>]])cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;sz[ch[cur][<span class="number">0</span>]]+cnt[cur])&#123;</span><br><span class="line">k-=sz[ch[cur][<span class="number">0</span>]]+cnt[cur];</span><br><span class="line">cur=ch[cur][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的rank </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sz[ch[root][<span class="number">0</span>]]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的前驱 </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="keyword">if</span>(val[root]&lt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> cur=ch[root][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">1</span>]) cur=ch[cur][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的后继 </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="keyword">if</span>(val[root]&gt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> cur=ch[root][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">0</span>]) cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//删除x </span></span><br><span class="line"><span class="keyword">int</span> last=Pre(x),beh=Back(x);</span><br><span class="line">splay(last),splay(beh,last);</span><br><span class="line"><span class="keyword">int</span> del=ch[beh][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(cnt[del]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cnt[del]--;</span><br><span class="line">splay(del);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ch[beh][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">//翻转[l,r]区间 </span></span><br><span class="line"><span class="keyword">int</span> x=Kth(l),y=Kth(r+<span class="number">2</span>);</span><br><span class="line">splay(x),splay(y,x);</span><br><span class="line">rev[ch[y][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//中序遍历输出 </span></span><br><span class="line">pushdown(x);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>]) Output(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(val[x]&gt;=<span class="number">1</span> &amp;&amp; val[x]&lt;=n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,val[x]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>]) Output(ch[x][<span class="number">1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">//输出[l,r]</span></span><br><span class="line"><span class="keyword">int</span> x=Kth(l),y=Kth(r+<span class="number">2</span>);</span><br><span class="line">splay(x),splay(y,x);</span><br><span class="line">Output(ch[y][<span class="number">0</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Insert(inf),Insert(-inf); <span class="comment">//先形成树形 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P3369 【模板】普通平衡树/P3391 【模板】文艺平衡树（Splay）</title>
      <link href="2019/05/05/(Luogu)%20P3369%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>2019/05/05/(Luogu)%20P3369%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="p3369-模板普通平衡树"><a class="markdownIt-Anchor" href="#p3369-模板普通平衡树"></a> <a href="https://www.luogu.org/problemnew/show/P3369">P3369 【模板】普通平衡树</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">/* TDD */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">2</span>],val[N],cnt[N],par[N],sz[N];</span><br><span class="line"><span class="comment">//x节点的左右儿子；x存储的权值；x存储的重复权值的个数；x的父亲节点；x子树下储存的权值数（包括重复） </span></span><br><span class="line"><span class="keyword">int</span> root,ncnt;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;sz[x]=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]]+cnt[x];&#125; </span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ws</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[par[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f],k=ws(x),w=ch[x][k^<span class="number">1</span>];</span><br><span class="line">ch[f][k]=w,par[w]=f;</span><br><span class="line">ch[ff][ws(f)]=x,par[x]=ff;</span><br><span class="line">ch[x][k^<span class="number">1</span>]=f,par[f]=x;</span><br><span class="line">pushup(f),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> goal=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(par[x]!=goal)&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f];</span><br><span class="line"><span class="keyword">if</span>(ff!=goal)&#123;</span><br><span class="line"><span class="keyword">if</span>(ws(x)==ws(f)) rotate(f);</span><br><span class="line"><span class="keyword">else</span> rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!goal) root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(ch[cur][x&gt;val[cur]] &amp;&amp; x!=val[cur])&#123;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line">splay(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=root,p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cur &amp;&amp; val[cur]!=x)&#123;</span><br><span class="line">p=cur;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur) cnt[cur]++;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cur=++ncnt;</span><br><span class="line"><span class="keyword">if</span>(p) ch[p][x&gt;val[p]]=cur;</span><br><span class="line">ch[cur][<span class="number">0</span>]=ch[cur][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">par[cur]=p,val[cur]=x;</span><br><span class="line">cnt[cur]=sz[cur]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">splay(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*查询*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">//第k-1大 </span></span><br><span class="line"><span class="keyword">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[cur][<span class="number">0</span>] &amp;&amp; k&lt;=sz[ch[cur][<span class="number">0</span>]])cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;sz[ch[cur][<span class="number">0</span>]]+cnt[cur])&#123;</span><br><span class="line">k-=sz[ch[cur][<span class="number">0</span>]]+cnt[cur];</span><br><span class="line">cur=ch[cur][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的rank </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sz[ch[root][<span class="number">0</span>]]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的前驱 </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="keyword">if</span>(val[root]&lt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> cur=ch[root][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">1</span>]) cur=ch[cur][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的后继 </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="keyword">if</span>(val[root]&gt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> cur=ch[root][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">0</span>]) cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//删除x </span></span><br><span class="line"><span class="keyword">int</span> last=Pre(x),beh=Back(x);</span><br><span class="line">splay(last),splay(beh,last);</span><br><span class="line"><span class="keyword">int</span> del=ch[beh][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(cnt[del]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cnt[del]--;</span><br><span class="line">splay(del);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ch[beh][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,op,x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">sc(n);</span><br><span class="line">Insert(inf),Insert(-inf);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">SC(op,x);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>) Insert(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) Remove(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>) Rank(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[Kth(x+<span class="number">1</span>)]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[Pre(x)]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[Back(x)]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="p3391-模板文艺平衡树splay"><a class="markdownIt-Anchor" href="#p3391-模板文艺平衡树splay"></a> <a href="https://www.luogu.org/problemnew/show/P3391">P3391 【模板】文艺平衡树（Splay）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">/* TDD */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">2</span>],val[N],cnt[N],par[N],sz[N],rev[N];</span><br><span class="line"><span class="comment">//x节点的左右儿子；x存储的权值；x存储的重复权值的个数；x的父亲节点；x子树下储存的权值数（包括重复） </span></span><br><span class="line"><span class="keyword">int</span> root,ncnt;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;sz[x]=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]]+cnt[x];&#125; </span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">ws</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[par[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[x])&#123;</span><br><span class="line">swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">rev[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">rev[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>;</span><br><span class="line">rev[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f],k=ws(x),w=ch[x][k^<span class="number">1</span>];</span><br><span class="line">ch[f][k]=w,par[w]=f;</span><br><span class="line">ch[ff][ws(f)]=x,par[x]=ff;</span><br><span class="line">ch[x][k^<span class="number">1</span>]=f,par[f]=x;</span><br><span class="line">pushup(f),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> goal=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(par[x]!=goal)&#123;</span><br><span class="line"><span class="keyword">int</span> f=par[x],ff=par[f];</span><br><span class="line"><span class="keyword">if</span>(ff!=goal)&#123;</span><br><span class="line"><span class="keyword">if</span>(ws(x)==ws(f)) rotate(f);</span><br><span class="line"><span class="keyword">else</span> rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!goal) root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=root,p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cur &amp;&amp; val[cur]!=x)&#123;</span><br><span class="line">p=cur;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur) cnt[cur]++;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cur=++ncnt;</span><br><span class="line"><span class="keyword">if</span>(p) ch[p][x&gt;val[p]]=cur;</span><br><span class="line">ch[cur][<span class="number">0</span>]=ch[cur][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">par[cur]=p,val[cur]=x;</span><br><span class="line">cnt[cur]=sz[cur]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">splay(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(ch[cur][x&gt;val[cur]] &amp;&amp; x!=val[cur])&#123;</span><br><span class="line">cur=ch[cur][x&gt;val[cur]];</span><br><span class="line">&#125;</span><br><span class="line">splay(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*查询*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的rank </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sz[ch[root][<span class="number">0</span>]]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的前驱 </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="keyword">if</span>(val[root]&lt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> cur=ch[root][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">1</span>]) cur=ch[cur][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的后继 </span></span><br><span class="line">Find(x);</span><br><span class="line"><span class="keyword">if</span>(val[root]&gt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> cur=ch[root][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">0</span>]) cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//删除x </span></span><br><span class="line"><span class="keyword">int</span> last=Pre(x),beh=Back(x);</span><br><span class="line">splay(last),splay(beh,last);</span><br><span class="line"><span class="keyword">int</span> del=ch[beh][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(cnt[del]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cnt[del]--;</span><br><span class="line">splay(del);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ch[beh][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">//第k-1大 </span></span><br><span class="line"><span class="keyword">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">pushdown(cur);</span><br><span class="line"><span class="keyword">if</span>(ch[cur][<span class="number">0</span>] &amp;&amp; k&lt;=sz[ch[cur][<span class="number">0</span>]])cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;sz[ch[cur][<span class="number">0</span>]]+cnt[cur])&#123;</span><br><span class="line">k-=sz[ch[cur][<span class="number">0</span>]]+cnt[cur];</span><br><span class="line">cur=ch[cur][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=Kth(l),y=Kth(r+<span class="number">2</span>);</span><br><span class="line">splay(x),splay(y,x);</span><br><span class="line">rev[ch[y][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//中序遍历输出 </span></span><br><span class="line">pushdown(x);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>]) Output(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(val[x]&gt;=<span class="number">1</span> &amp;&amp; val[x]&lt;=n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,val[x]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>]) Output(ch[x][<span class="number">1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SC(n,m);</span><br><span class="line">Insert(inf),Insert(-inf);</span><br><span class="line">rep(i,<span class="number">1</span>,n) Insert(i);</span><br><span class="line"><span class="keyword">int</span> x,y,l,r;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">SC(x,y);</span><br><span class="line">Reverse(x,y);</span><br><span class="line">&#125;</span><br><span class="line">Output(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 2182 Lost Cows （贪心 or 树状数组）</title>
      <link href="2019/05/05/(POJ)%202182%20Lost%20Cows/"/>
      <url>2019/05/05/(POJ)%202182%20Lost%20Cows/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://poj.org/problem?id=2182">传送门</a></h1><p><em><strong>题意</strong></em> ：n头牛，每头牛有[1，n]的独立的编号，现在这些牛杂乱的站在一排，给出在第i头牛之前，并且比第i头牛编号小的个数，i属于2到n。求解现在的每头牛的编号</p><p><em><strong>思路</strong></em> ：我们从后往前考虑即可，其实最后一头牛的id都是可以直接确定的，贪心递推(不知道该不该称这个为贪心)即可，点然我们也许可以用树状数组，我是直接用的别人的了，也是从后往前考虑，然后二分当前牛的编号，通过前面比它小的牛和后面比它小的牛来判断即可，树状数组维护的就是当前牛后面比它小的数字。最终该牛的id 是要满足id-1=k(前边比他小的数字个数，已知)+num(后面比它小的数字，树状数组维护)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//贪心</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,r[maxn],ans[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(sc(n)!=EOF) &#123;</span><br><span class="line">tt.resize(n+<span class="number">5</span>);</span><br><span class="line">tt[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">2</span>,n)sc(r[i]),tt[i]=i;</span><br><span class="line">drep(i,n,<span class="number">1</span>) &#123;</span><br><span class="line">ans[i]=tt[r[i]+<span class="number">1</span>];</span><br><span class="line">tt.erase(tt.begin()+r[i]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">tt.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树状数组</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 8005</span></span><br><span class="line"><span class="keyword">int</span> a[MAX],ans[MAX],tree[MAX],n;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos&gt;<span class="number">0</span>)ans+=tree[pos],pos-=pos&amp;(-pos);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos&lt;=n)tree[pos]+=val,pos+=pos&amp;(-pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">1</span>,right=n;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num=ask(mid);</span><br><span class="line"><span class="keyword">if</span>(mid<span class="number">-1</span>&lt;num+k) left=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> right=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(sc(n)!=EOF)&#123;</span><br><span class="line">ms(tree,<span class="number">0</span>);</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">2</span>,n)sc(a[i]);</span><br><span class="line">drep(i,n,<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> k=solve(a[i]);</span><br><span class="line">add(k,<span class="number">1</span>);</span><br><span class="line">ans[i]=k;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的线段树是坨屎(线段树专题)</title>
      <link href="2019/04/27/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98/"/>
      <url>2019/04/27/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="不了解线段树的可以从这个入门写的超棒"><a class="markdownIt-Anchor" href="#不了解线段树的可以从这个入门写的超棒"></a> <a href="https://blog.csdn.net/zearot/article/details/48299459">不了解线段树的可以从这个入门，写的超棒</a></h1><h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1><h1 id="线段树基础模板"><a class="markdownIt-Anchor" href="#线段树基础模板"></a> <a href="https://blog.csdn.net/TDD_Master/article/details/84193014">线段树基础模板</a>：查询区间和和区间最值</h1><p>不要care我下面时而数组线段树时而结构体线段树。</p><h2 id="ahdu-1166-敌兵布阵"><a class="markdownIt-Anchor" href="#ahdu-1166-敌兵布阵"></a> A.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166">hdu 1166 敌兵布阵</a></h2><p><strong>:线段树板子题，单点修改区间查询。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> Sum[maxn&lt;&lt;<span class="number">2</span>],Add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> A[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;Sum[rt]=Sum[rt&lt;&lt;<span class="number">1</span>]+Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">Sum[rt]=A[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Add[rt])&#123;</span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>]+=Add[rt];</span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt];</span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>]+=Add[rt]*ln;</span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt]*rn;</span><br><span class="line">Add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">Sum[rt]+=C;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>       Update(L,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> Sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m); </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ANS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) ANS+=Query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) ANS+=Query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ANS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i)&#123;</span><br><span class="line">ms(Sum,<span class="number">0</span>),ms(Add,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">Build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;End&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;Query&quot;</span>)<span class="built_in">cout</span>&lt;&lt;Query(x,y,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Add&quot;</span>) Update(x,y,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Sub&quot;</span>) Update(x,-y,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bhdu-1754-i-hate-it"><a class="markdownIt-Anchor" href="#bhdu-1754-i-hate-it"></a> B.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754">hdu 1754 I Hate It</a></h2><p><strong>:板子单点更新，区间最值问题。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line">ll Sum[maxn&lt;&lt;<span class="number">2</span>],Add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">Sum[rt]=max(Sum[rt&lt;&lt;<span class="number">1</span>],Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">Sum[rt]=A[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">Sum[rt]=C;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>       Update(L,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> Sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ANS=-inf;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) ANS=max(ANS,Query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) ANS=max(ANS,Query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ANS;</span><br><span class="line">&#125; </span><br><span class="line">ll n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">ms(Add,<span class="number">0</span>),ms(Sum,<span class="number">0</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">Build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">char</span> x;</span><br><span class="line"><span class="keyword">int</span> y,z;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="string">&#x27;Q&#x27;</span>)<span class="built_in">cout</span>&lt;&lt;Query(y,z,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="string">&#x27;U&#x27;</span>) Update(y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="chdu-1394-minimum-inversion-number"><a class="markdownIt-Anchor" href="#chdu-1394-minimum-inversion-number"></a> C.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1394">hdu 1394 Minimum Inversion Number</a></h2><p><strong>题意:本题就是求循环移位后逆序数的最小值</strong></p><p><strong>思路:先用线段树求出原来序列的逆序对个数,线段树维护1<sub>n的数出现的个数，将给的序列从后往前放，然后每次查询1</sub>a[i]这个区间已经出现的数字个数，出现了几个那就有几个逆序对，说明本应出现在a[i]前面的数字，出现在了a[i]之后。然后每次加上，在更新这个位置上的数字出现次数。然后再从头到尾将那个元素放到最后，这样的改变量是-(a[i]-1) 取消因为a[i]放在最前的产生的逆序对，+(n-a[i])因为a[i]放在最后新产生的逆序对。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n,b[maxn&lt;&lt;<span class="number">2</span>],a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">b[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">b[rt]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v&lt;=mid)    add(l,mid,rt&lt;&lt;<span class="number">1</span>,v);</span><br><span class="line"><span class="keyword">else</span>    add(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ll&lt;=l &amp;&amp; r&lt;=rr) <span class="keyword">return</span> b[rt];</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ll&lt;=mid)     ans+=sum(l,mid,rt&lt;&lt;<span class="number">1</span>,ll,rr);</span><br><span class="line"><span class="keyword">if</span>(rr&gt;mid)    ans+=sum(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,ll,rr);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">++a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">ans+=sum(<span class="number">1</span>,n,<span class="number">1</span>,a[i],n);</span><br><span class="line">add(<span class="number">1</span>,n,<span class="number">1</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mmin=ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">ans-=a[i]<span class="number">-1</span>;</span><br><span class="line">ans+=n-a[i];</span><br><span class="line">mmin=min(ans,mmin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mmin&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dhdu-2795-billboard"><a class="markdownIt-Anchor" href="#dhdu-2795-billboard"></a> D.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2795">hdu 2795 Billboard</a></h2><p><strong>题意：有个公告板，大小为h*w,要贴n张公告，每个公告的长度是k，高度固定为1，公告放的要尽可能靠上并尽可能靠左，每给出一张公告，要求这个公告在满足要求的情况下放在了第几层。</strong></p><p><strong>思路：线段树维护h行公告板的最长连续区间，查询的时候尽量往左就行了。h很大但是最大只要满足n张海报就行了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,h,w;</span><br><span class="line">ll Sum[maxn&lt;&lt;<span class="number">2</span>],A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">Sum[rt]=max(Sum[rt&lt;&lt;<span class="number">1</span>],Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">Sum[rt]=w;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">Sum[rt]+=C;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>       Update(L,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> num,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;num&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R &amp;&amp; r-l==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(Sum[rt]&gt;=num)<span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> inf;</span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>,ans=inf;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;ls &quot;&lt;&lt;Sum[rt&lt;&lt;1]&lt;&lt;&quot; rs &quot;&lt;&lt;Sum[rt&lt;&lt;1|1]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= m &amp;&amp; Sum[rt&lt;&lt;<span class="number">1</span>]&gt;=num)ans=min(ans,Query(L,R,num,l,m,rt&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(R &gt; m &amp;&amp; Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=num)ans=min(ans,Query(L,R,num,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;h&gt;&gt;w&gt;&gt;n) &#123;</span><br><span class="line">ms(Sum,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(h&gt;n)h=n;</span><br><span class="line">Build(<span class="number">1</span>,h,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> num,cnt;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line"><span class="keyword">if</span>(Sum[<span class="number">1</span>]&lt;num)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cnt=Query(<span class="number">1</span>,h,num,<span class="number">1</span>,h,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(cnt==inf)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Update(cnt,-num,<span class="number">1</span>,h,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="ehdu-1698-just-a-hook"><a class="markdownIt-Anchor" href="#ehdu-1698-just-a-hook"></a> E.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698">hdu 1698 Just a Hook</a></h2><p><strong>题意：连续n个棍棒，现进行m次操作，把a~b的棍棒换成c材质的，求总价值，（铜（1初始），银（2），金（3））</strong></p><p><strong>思路：线段树的区间更新就行了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>],cg[maxn&lt;&lt;<span class="number">2</span>],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cg[rt])&#123;</span><br><span class="line">cg[rt&lt;&lt;<span class="number">1</span>]=cg[rt];</span><br><span class="line">cg[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=cg[rt];</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>]=ln*cg[rt];</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=rn*cg[rt];</span><br><span class="line">cg[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">sum[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">sum[rt]=(ll)C*(r-l+<span class="number">1</span>);</span><br><span class="line">cg[rt]=C;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,m-l+<span class="number">1</span>,r-m);</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) update(L,R,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) update(L,R,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T,q,x,y,z;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">rep(i,<span class="number">1</span>,T)&#123;</span><br><span class="line">ms(cg,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">update(x,y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;: The total value of the hook is &quot;</span>&lt;&lt;sum[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fpoj-3468-a-simple-problem-with-integers"><a class="markdownIt-Anchor" href="#fpoj-3468-a-simple-problem-with-integers"></a> F.<a href="http://poj.org/problem?id=3468">poj 3468 A Simple Problem with Integers</a></h2><p><strong>:板子题区间更新。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll Sum[maxn&lt;&lt;<span class="number">2</span>],Add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;Sum[rt]=Sum[rt&lt;&lt;<span class="number">1</span>]+Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">Sum[rt]=A[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Add[rt])&#123;</span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>]+=Add[rt];</span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt];</span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>]+=Add[rt]*ln;</span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt]*rn;</span><br><span class="line">Add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123; </span><br><span class="line">Sum[rt]+=C;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>       Update(L,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">Sum[rt]+=C*(r-l+<span class="number">1</span>);</span><br><span class="line">Add[rt]+=C;</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m);</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,R,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) Update(L,R,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> Sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m); </span><br><span class="line"></span><br><span class="line">ll ANS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) ANS+=Query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) ANS+=Query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ANS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q)&#123;</span><br><span class="line">ms(Add,<span class="number">0</span>),ms(Sum,<span class="number">0</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">Build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">char</span> tp;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Query(x,y,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">Update(x,y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gpoj-2528-mayors-posters"><a class="markdownIt-Anchor" href="#gpoj-2528-mayors-posters"></a> G.<a href="http://poj.org/problem?id=2528">poj 2528 Mayor’s posters</a></h2><p><strong>题意：有一块足够长的墙了给竞选人贴海报，后贴的可能会把衣面贴的给覆盖掉，问最有多少不同的海报是能看到的。</strong></p><p><strong>思路：首先海报l，r的范围很大，但是只有10000张海报，所以我们先需要离散化l和r，线段树维护的就是区间是否被全部覆盖。</strong></p><p><strong>贴海报的顺序我们从后往前贴，每次query一下该海报的l，r区间是否被全部覆盖，就可知最后能不能被看见了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn&lt;&lt;<span class="number">2</span>],cg[maxn&lt;&lt;<span class="number">2</span>],fg=<span class="number">0</span>;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">vis[rt]=vis[rt&lt;&lt;<span class="number">1</span>] &amp;&amp; vis[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cg[rt])&#123;</span><br><span class="line">cg[rt&lt;&lt;<span class="number">1</span>]=cg[rt];</span><br><span class="line">cg[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=cg[rt];</span><br><span class="line">vis[rt&lt;&lt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">vis[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">cg[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">vis[rt]=<span class="number">1</span>;</span><br><span class="line">cg[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,m-l+<span class="number">1</span>,r-m);</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) update(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) update(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[rt])<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R &amp;&amp; !vis[rt])&#123;</span><br><span class="line">fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,m-l+<span class="number">1</span>,r-m);</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(fg)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T,n,x,y;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,x;</span><br><span class="line">&#125;pp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">recmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.id==b.id)<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.id&gt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">sc(T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">sc(n);</span><br><span class="line">ms(vis,<span class="number">0</span>),ms(cg,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">SC(pp[i].x,pp[i+<span class="number">1</span>].x);</span><br><span class="line">pp[i].id=pp[i+<span class="number">1</span>].id=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(pp,pp+<span class="number">2</span>*n,cmp);</span><br><span class="line"><span class="keyword">int</span> pre=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(pp[i].x==pre)pp[i].x=cnt;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pre=pp[i].x;</span><br><span class="line">pp[i].x=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(pp,pp+<span class="number">2</span>*n,recmp);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,le,ri;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">fg=<span class="number">0</span>;</span><br><span class="line">le=pp[i].x,ri=pp[i+<span class="number">1</span>].x;</span><br><span class="line">query(le,ri,<span class="number">1</span>,<span class="number">2</span>*n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(fg)ans++;</span><br><span class="line">update(le,ri,<span class="number">1</span>,<span class="number">2</span>*n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hpoj-3225-help-with-intervals"><a class="markdownIt-Anchor" href="#hpoj-3225-help-with-intervals"></a> H.<a href="http://poj.org/problem?id=3225">poj 3225 Help with Intervals</a></h2><p><strong>题意：就是根据题目给你的运算法则，完成集合的运算最后输出集合的运算。</strong></p><p><strong>思路：这个题感觉有很多难点，闭合区间可以+1，-1来完成，但是我们发现我们无法表示(1,2)，这里的解决方案就是将l和r都乘2，喵呀。区间操作大家都是一样的，如下。</strong></p><p><strong>对于区间的交并补问题，可以转化为区间覆盖问题，若T区间为[a,b]。</strong></p><p><strong>U T:[a,b]覆盖为1.</strong></p><p><strong>I T:[0,a-1] [b+1,maxn] 覆盖为0</strong></p><p><strong>D T:[a,b]覆盖为0</strong></p><p><strong>C T:[0,a-1] [b+1,maxn] 覆盖为0,[a,b]取反</strong></p><p><strong>S T:[a,b]取反</strong></p><p><strong>还有就是异或操作了，对于一个区间如果值全都一样，那我们就直接异或了，反之我们就不能用一个值去代表这个区间的值，即不能直接异或。还有就是两次异或就相当于没异或。</strong></p><p><strong>所以我们在线段树的结构体里定义了l,r,cov,rev;</strong></p><p><strong>//代表区间 ，是否被覆盖 ，异或标记</strong></p><p><strong>//cov 0：区间全是0，1：区间全是1，-1：区间都有</strong></p><p><strong>//rev 0: 不需要异或 ，1：需要异或</strong></p><p><strong>对于我们不能直接异或的区间，我们就去异或他的异或标记，pushdown的话就是往下传递了，如果当前父亲节点区间被覆盖，那孩子节点也是被覆盖，并且抹除异或标记，将该父亲cov先标记为-1,因为下面的操作可能会改变父亲节点的覆盖状态。query那就把该是1的地方都标记到数组上就行了，最后输出不要忘了一开始的*2操作了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx=<span class="number">150000</span>;</span><br><span class="line"><span class="keyword">bool</span> la[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,cov,rev;<span class="comment">//代表区间 ，是否被覆盖 ，异或标记 </span></span><br><span class="line"><span class="comment">//cov 0：区间全是0，1：区间全是1，-1：区间都有 </span></span><br><span class="line"><span class="comment">//rev 0: 不需要异或 ，1：需要异或 </span></span><br><span class="line">&#125;tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">tree[rt].l=l,tree[rt].r=r;</span><br><span class="line">tree[rt].cov=tree[rt].rev=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].l==tree[rt].r)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].cov!=<span class="number">-1</span>)&#123;</span><br><span class="line">tree[rt&lt;&lt;<span class="number">1</span>].cov=tree[rt].cov;</span><br><span class="line">tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cov=tree[rt].cov;</span><br><span class="line">tree[rt].cov=<span class="number">-1</span>;</span><br><span class="line">tree[rt].rev=<span class="number">0</span>;</span><br><span class="line">tree[rt&lt;&lt;<span class="number">1</span>].rev=<span class="number">0</span>;</span><br><span class="line">tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[rt].rev)&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[rt&lt;&lt;<span class="number">1</span>].cov!=<span class="number">-1</span>) tree[rt&lt;&lt;<span class="number">1</span>].cov^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>tree[rt&lt;&lt;<span class="number">1</span>].rev^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cov!=<span class="number">-1</span>)  tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cov^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rev^=<span class="number">1</span>;</span><br><span class="line">tree[rt].rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;rt&lt;&lt;&quot; &quot;&lt;&lt;id&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].l&gt;=l &amp;&amp; tree[rt].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">0</span> || id==<span class="number">1</span>)&#123;</span><br><span class="line">tree[rt].cov=id;</span><br><span class="line">tree[rt].rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(id==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].cov!=<span class="number">-1</span>)tree[rt].cov^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>tree[rt].rev^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m=(tree[rt].l+tree[rt].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=m) update(l,r,rt&lt;&lt;<span class="number">1</span>,id);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;m) update(l,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,id);</span><br><span class="line"><span class="keyword">else</span> update(l,m,rt&lt;&lt;<span class="number">1</span>,id),update(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,id);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].cov==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tree[rt].l;i&lt;=tree[rt].r;++i)la[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].cov==<span class="number">0</span> || tree[rt].l==tree[rt].r)<span class="keyword">return</span> ;</span><br><span class="line">pushdown(rt);</span><br><span class="line">query(rt&lt;&lt;<span class="number">1</span>),query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> t,x,y;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">build(<span class="number">0</span>,mx,<span class="number">1</span>); </span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c %c%d,%d%c&quot;</span>,&amp;t,&amp;x,&amp;a,&amp;b,&amp;y)!=EOF)&#123;</span><br><span class="line"><span class="keyword">int</span> le=a*<span class="number">2</span>,ri=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="string">&#x27;(&#x27;</span>)le++;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="string">&#x27;)&#x27;</span>)ri--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t==<span class="string">&#x27;U&#x27;</span>)update(le,ri,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="string">&#x27;I&#x27;</span>)&#123;</span><br><span class="line">update(<span class="number">0</span>,le<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">update(ri+<span class="number">1</span>,mx,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="string">&#x27;D&#x27;</span>)update(le,ri,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">update(<span class="number">0</span>,le<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">update(ri+<span class="number">1</span>,maxn,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">update(le,ri,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="string">&#x27;S&#x27;</span>)update(le,ri,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">query(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mx;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(la[i] == <span class="number">1</span> &amp;&amp; (i == <span class="number">0</span> || la[i<span class="number">-1</span>] == <span class="number">0</span>)) l = i;</span><br><span class="line"><span class="keyword">if</span>(la[i] == <span class="number">1</span> &amp;&amp; (i == mx<span class="number">-1</span> || la[i+<span class="number">1</span>] == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l%<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;l/<span class="number">2</span>&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;(i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;empty set&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ipoj-3667-hotel"><a class="markdownIt-Anchor" href="#ipoj-3667-hotel"></a> I.<a href="http://poj.org/problem?id=3667">poj 3667 Hotel</a></h2><p><strong>题意：n个连续的房间m个操作。操作分两种，第一种以1 x形式给出，找到最左的能连续容下x个人的连续房间，并输出左端点的编号，如果找不到就输出0.第二种以2 l x的形式给出，表示以l为起点的x个房间都清空。</strong></p><p><strong>思路：用线段树来维护区间最大连续即可，一个区间的连续可能是从左开始的连续，也可能是从右开始，也可能是中间的。所以线段树需要同时维护区间的最大左连续，最大右连续，最大连续。这样父节点的最大连续才能从三种可能的最大连续得出。查询的时候能左就左就好了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>],lz[maxn&lt;&lt;<span class="number">2</span>],lc[maxn&lt;&lt;<span class="number">2</span>],rc[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum[rt&lt;&lt;<span class="number">1</span>]==(m-l+<span class="number">1</span>) &amp;&amp; sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]==(r-m))&#123;</span><br><span class="line">sum[rt]=lc[rt]=rc[rt]=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">sum[rt]=max(sum[rt&lt;&lt;<span class="number">1</span>],sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">lc[rt]=lc[rt&lt;&lt;<span class="number">1</span>],rc[rt]=rc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(sum[rt&lt;&lt;<span class="number">1</span>]==(m-l+<span class="number">1</span>)) lc[rt]+=lc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];<span class="comment">//左连续 右连续</span></span><br><span class="line"><span class="keyword">if</span>(sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]==(r-m))rc[rt]+=rc[rt&lt;&lt;<span class="number">1</span>];</span><br><span class="line">sum[rt]=max(max(sum[rt],rc[rt&lt;&lt;<span class="number">1</span>]+lc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]),max(lc[rt],rc[rt]));</span><br><span class="line"><span class="comment">//中间连续 ，左连续 ，右连续 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lz[rt]==<span class="number">1</span>)&#123; <span class="comment">//1为占据操作 ，2为清空操作 </span></span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>]=lc[rt&lt;&lt;<span class="number">1</span>]=rc[rt&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=rc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lz[rt&lt;&lt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lz[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lz[rt]==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>]=lc[rt&lt;&lt;<span class="number">1</span>]=rc[rt&lt;&lt;<span class="number">1</span>]=m-l+<span class="number">1</span>;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=rc[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=r-m;</span><br><span class="line">lz[rt&lt;&lt;<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">lz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">lz[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">sum[rt]=lc[rt]=rc[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">pushup(rt,l,r);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">bool</span> id)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">0</span>)&#123; <span class="comment">//占据 </span></span><br><span class="line">sum[rt]=lc[rt]=rc[rt]=<span class="number">0</span>;</span><br><span class="line">lz[rt]=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(id==<span class="number">1</span>)&#123; <span class="comment">//清空 </span></span><br><span class="line">sum[rt]=lc[rt]=rc[rt]=r-l+<span class="number">1</span>;</span><br><span class="line">lz[rt]=<span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,l,r);</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) update(L,R,l,m,rt&lt;&lt;<span class="number">1</span>,id);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) update(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,id); </span><br><span class="line">pushup(rt,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> num,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,l,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lson=rt&lt;&lt;<span class="number">1</span>,rson=rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum[lson]&gt;=num)<span class="keyword">return</span> query(l,m,num,lson);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rc[lson]+lc[rson]&gt;=num) <span class="keyword">return</span> m-rc[lson]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sum[rson]&gt;=num) <span class="keyword">return</span> query(m+<span class="number">1</span>,r,num,rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">SC(n,m);</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">sc(x);</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">sc(y);</span><br><span class="line"><span class="keyword">if</span>(sum[<span class="number">1</span>]&lt;y)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> tp=query(<span class="number">1</span>,n,y,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tp==inf)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">update(tp,tp+y<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>)&#123;</span><br><span class="line">SC(y,z);</span><br><span class="line">update(y,y+z<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="线段树扫描线"><a class="markdownIt-Anchor" href="#线段树扫描线"></a> 线段树+扫描线</h1><h3 id="一篇讲的很不错的博客"><a class="markdownIt-Anchor" href="#一篇讲的很不错的博客"></a> <a href="https://blog.csdn.net/xianpingping/article/details/83032798">一篇讲的很不错的博客</a></h3><h2 id="jhdu-1542-atlantis"><a class="markdownIt-Anchor" href="#jhdu-1542-atlantis"></a> J.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542">hdu 1542 Atlantis</a></h2><p><strong>题意：就是求矩阵的面积并。</strong></p><p><strong>思路：我在做这题时还没有看到上面那篇博客，看的另一篇<a href="https://blog.csdn.net/Merry_hj/article/details/77100290">戳我</a>，也讲很好，不过就是扫描的方式有点不同，就是先按照出现的y坐标将横向分为一个个单元部分(不可再分)，然后由x从小到大，用竖线扫描。结构体中的x就是上一个来到这个区间的x。线段树的每个节点的cnt，如果cnt=0时,表示该节点控制的范围没有被覆盖,只要cnt!=0(cnt不可能小于0，其实就是大于0) 就表示该节点控制的几块区间仍然被覆盖。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>;</span><br><span class="line"><span class="keyword">double</span> y[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> low,up,x;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">bool</span> fg;</span><br><span class="line">&#125;tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tdd</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y_low,y_up;</span><br><span class="line"><span class="keyword">int</span> fg;</span><br><span class="line">&#125;line[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">tree[rt].cnt=<span class="number">0</span>,tree[rt].x=<span class="number">0</span>,tree[rt].fg=<span class="number">0</span>;</span><br><span class="line">tree[rt].low=y[l],tree[rt].up=y[r];</span><br><span class="line"><span class="comment">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;rt&lt;&lt;&quot; lowup &quot;&lt;&lt;tree[rt].low&lt;&lt;&quot; &quot;&lt;&lt;tree[rt].up&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>((l+<span class="number">1</span>)==r)&#123;</span><br><span class="line">tree[rt].fg=<span class="number">1</span>; <span class="comment">//最小区间 </span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(m,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">double</span> nx,<span class="keyword">double</span> nlow,<span class="keyword">double</span> nup,<span class="keyword">int</span> rt,<span class="keyword">int</span> nfg)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;query &quot;&lt;&lt;tree[rt].low&lt;&lt;&quot; &quot;&lt;&lt;tree[rt].up&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(nlow&gt;=tree[rt].up || nup&lt;=tree[rt].low)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(tree[rt].fg)&#123;</span><br><span class="line"><span class="keyword">double</span> rs=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[rt].cnt&gt;<span class="number">0</span>)&#123;</span><br><span class="line">rs=(nx-tree[rt].x)*(tree[rt].up-tree[rt].low);</span><br><span class="line">tree[rt].cnt+=nfg;</span><br><span class="line">tree[rt].x=nx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[rt].cnt+=nfg;</span><br><span class="line">tree[rt].x=nx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">ans+=query(nx,nlow,nup,rt&lt;&lt;<span class="number">1</span>,nfg);</span><br><span class="line">ans+=query(nx,nlow,nup,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,nfg);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(tdd a,tdd b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">y[++cnt]=y1;</span><br><span class="line">line[cnt]=tdd&#123;x1,y1,y2,<span class="number">1</span>&#125;;</span><br><span class="line">y[++cnt]=y2;</span><br><span class="line">line[cnt]=tdd&#123;x2,y1,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(y+<span class="number">1</span>,y+<span class="number">1</span>+cnt);</span><br><span class="line">sort(line+<span class="number">1</span>,line+<span class="number">1</span>+cnt,cmp);</span><br><span class="line">build(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,cnt)&#123;</span><br><span class="line">ans+=query(line[i].x,line[i].y_low,line[i].y_up,<span class="number">1</span>,line[i].fg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Test case #&quot;</span>&lt;&lt;(++count)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total explored area: %.2lf\n\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="khdu-1828-picture"><a class="markdownIt-Anchor" href="#khdu-1828-picture"></a> K.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1828">hdu 1828 Picture</a></h2><p><strong>题意：矩形的周长并。</strong></p><p><strong>思路：只会蠢得扫两遍的方法，一遍算横向的长，一遍算纵向的长。先将y坐标投影到y轴，然后按照x从小到大，用竖线扫描。</strong></p><p><strong>第一条线的结果直接加上，之后答案加上每次tree[1].sum的变化值即可。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn&lt;&lt;<span class="number">1</span>],y[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> k,l,r,fg;</span><br><span class="line">&#125; a[maxn&lt;&lt;<span class="number">1</span>],b[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(rec a,rec b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.k&lt;b.k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> sum,l,r,cnt;</span><br><span class="line">&#125; tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)tree[rt].sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[rt].cnt&gt;<span class="number">0</span>)tree[rt].sum=tree[rt].r-tree[rt].l;</span><br><span class="line"><span class="keyword">else</span> tree[rt].sum=tree[rt&lt;&lt;<span class="number">1</span>].sum+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> *t)</span> </span>&#123;</span><br><span class="line">tree[rt].cnt=<span class="number">0</span>;</span><br><span class="line">tree[rt].l=t[l],tree[rt].r=t[r];</span><br><span class="line">pushup(rt,l,r);</span><br><span class="line"><span class="keyword">if</span>(l==r || (l+<span class="number">1</span>)==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,m,rt&lt;&lt;<span class="number">1</span>,t);</span><br><span class="line">build(m,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> fg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==tree[rt].l &amp;&amp; r==tree[rt].r) &#123; </span><br><span class="line">tree[rt].cnt+=fg;</span><br><span class="line">pushup(rt,l,r);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l) update(l,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,fg);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r&lt;=tree[rt&lt;&lt;<span class="number">1</span>].r) update(l,r,rt&lt;&lt;<span class="number">1</span>,fg);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">update(l,tree[rt&lt;&lt;<span class="number">1</span>].r,rt&lt;&lt;<span class="number">1</span>,fg);</span><br><span class="line">update(tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,fg);</span><br><span class="line">&#125;</span><br><span class="line">pushup(rt,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,x1,x2,y1,y2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(sc(n)!=EOF) &#123;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">SC(x1,y1),SC(x2,y2);</span><br><span class="line">x[i]=x1,x[i+n]=x2;</span><br><span class="line">y[i]=y1,y[i+n]=y2;</span><br><span class="line">a[i<span class="number">-1</span>]=rec &#123;x1,y1,y2,<span class="number">1</span>&#125;;</span><br><span class="line">a[i+n<span class="number">-1</span>]=rec &#123;x2,y1,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">b[i<span class="number">-1</span>]=rec &#123;y1,x1,x2,<span class="number">1</span>&#125;;</span><br><span class="line">b[i+n<span class="number">-1</span>]=rec &#123;y2,x1,x2,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">sort(y+<span class="number">1</span>,y+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">sort(a,a+<span class="number">2</span>*n,cmp);</span><br><span class="line">sort(b,b+<span class="number">2</span>*n,cmp);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,pre;</span><br><span class="line"><span class="keyword">int</span> leny=unique(y+<span class="number">1</span>,y+<span class="number">2</span>*n+<span class="number">1</span>)-(y+<span class="number">1</span>),lenx=unique(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>)-(x+<span class="number">1</span>);</span><br><span class="line">build(<span class="number">1</span>,leny,<span class="number">1</span>,y);</span><br><span class="line">update(a[<span class="number">0</span>].l,a[<span class="number">0</span>].r,<span class="number">1</span>,a[<span class="number">0</span>].fg);</span><br><span class="line">ans+=tree[<span class="number">1</span>].sum;</span><br><span class="line">pre=tree[<span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">2</span>*n; ++i) &#123;</span><br><span class="line">update(a[i].l,a[i].r,<span class="number">1</span>,a[i].fg);</span><br><span class="line">ans+=<span class="built_in">abs</span>(tree[<span class="number">1</span>].sum-pre);</span><br><span class="line">pre=tree[<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">build(<span class="number">1</span>,lenx,<span class="number">1</span>,x);</span><br><span class="line">update(b[<span class="number">0</span>].l,b[<span class="number">0</span>].r,<span class="number">1</span>,b[<span class="number">0</span>].fg);</span><br><span class="line">ans+=tree[<span class="number">1</span>].sum;</span><br><span class="line">pre=tree[<span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">2</span>*n; ++i) &#123;</span><br><span class="line">update(b[i].l,b[i].r,<span class="number">1</span>,b[i].fg);</span><br><span class="line">ans+=<span class="built_in">abs</span>(tree[<span class="number">1</span>].sum-pre);</span><br><span class="line">pre=tree[<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) E. Maximum Subsequence (折半搜索)</title>
      <link href="2019/04/18/(CodeForces)%20E.%20Maximum%20Subsequence/"/>
      <url>2019/04/18/(CodeForces)%20E.%20Maximum%20Subsequence/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/contest/888/problem/E">传送门</a></h1><p><em><strong>解题思路：</strong></em> 一开始并不知道折半搜索这个算法，无论如何都不知道将2^35 这么多种情况压缩，在1e9的复杂度解决出来，折半搜索就是将序列a分成两个部分，分别去解决每个部分的子集，那也就最多2^18中情况。然后当我们选中一部分的一个子集x时，去第二个部分中找小于m-x最大的(二分)，这样就完美解决了，喵啊。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1</span>&lt;&lt;<span class="number">18</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,a[<span class="number">40</span>],ta[maxn],tb[maxn],cnta,cntb;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll sum,ll step,<span class="keyword">bool</span> fg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fg &amp;&amp; step==n/<span class="number">2</span>+<span class="number">1</span>) &#123;</span><br><span class="line">ta[cnta++]=sum%m;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(!fg &amp;&amp; step==n+<span class="number">1</span>) &#123;</span><br><span class="line">tb[cntb++]=sum%m;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">dfs(sum+a[step],step+<span class="number">1</span>,fg);</span><br><span class="line">dfs(sum,step+<span class="number">1</span>,fg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">dfs(<span class="number">0</span>,n/<span class="number">2</span>+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">ll ans=<span class="number">0</span>,tp;</span><br><span class="line">sort(ta,ta+cnta),sort(tb,tb+cntb);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cnta; ++i) &#123;</span><br><span class="line">tp=m-ta[i];</span><br><span class="line">ll x=lower_bound(tb,tb+cntb,tp)-tb;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)ans=max(ta[i],ans);</span><br><span class="line"><span class="keyword">else</span> ans=max(ans,ta[i]+tb[x<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折半搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) F. Clique in the Divisibility Graph （dp）</title>
      <link href="2019/04/12/(CodeForces)%20F.%20Clique%20in%20the%20Divisibility%20Graph/"/>
      <url>2019/04/12/(CodeForces)%20F.%20Clique%20in%20the%20Divisibility%20Graph/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/problemset/problem/566/F">传送门</a></h1><p><em><strong>题目大意：</strong></em> 给出一个数组序列，要求最长的成倍增长(倍数不需要相同)的序列。</p><p><em><strong>解题思路：</strong></em> 首先这肯定是个dp，首先我们可以将整个序列先排序，如果我们考虑a[i],那他可以从他的因子转移过来，但是这样每个都要算个因子，成本太大，我们不如从当前这个a[i]往后推，倍数的增长，知道超过序列的最大值，这样就是一个log的复杂度了，num[j]代表以j结尾的满足题意的最长长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn],a[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">num[a[i]]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>*a[i]; j&lt;=a[n]; j+=a[i])&#123;</span><br><span class="line">num[j]=max(num[j],num[a[i]]);</span><br><span class="line">&#125;</span><br><span class="line">ans=max(ans, num[a[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) D. Kefa and Dishes (状压dp)</title>
      <link href="2019/04/12/(CodeForces)%20D.%20Kefa%20and%20Dishes/"/>
      <url>2019/04/12/(CodeForces)%20D.%20Kefa%20and%20Dishes/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/problemset/problem/580/D">传送门</a></h1><p><em><strong>题目大意：</strong></em> 有n个菜，每个菜只能吃一次，最多吃m个，每盘菜都有一个快乐值，吃菜的先后顺序也会增加快乐值。</p><p><em><strong>解题思路：</strong></em> 一开始尝试用最小费用最大流，最后建了一个很复杂的图，发现并不是很好建出来，遂放弃，后来看了别人的写法状压dp，太菜了啊。dp[i] [j],i二进制代表现在吃的菜的状态，1代表吃了，0代表没吃，j代表最后吃的j，这样达到的最高快乐值。</p><p>由当前的dp[s] [j],可以去更新后面的状态，在s中选一个已吃的i，再在没吃的中选一个j尝试更新，动态转移方程就是 ns=s|(1&lt;&lt;j);</p><p>dp[ns] [j]=max(dp[ns] [j],dp[s] [i]+st[j]+add[i] [j]); 当s中有m个1时就可以更新答案了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">20</span>],add[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">ll dp[(<span class="number">1</span>&lt;&lt;<span class="number">18</span>)+<span class="number">5</span>][<span class="number">20</span>]; <span class="comment">//状态，最后吃的是j的最高快乐 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">cin</span>&gt;&gt;st[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">add[x<span class="number">-1</span>][y<span class="number">-1</span>]=z;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)dp[(<span class="number">1</span>&lt;&lt;i)][i]=st[i];</span><br><span class="line">ll ans=<span class="number">0</span>,tot=(<span class="number">1</span>&lt;&lt;<span class="number">18</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;tot;++s)&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123; <span class="comment">//未选的j放在i后面吃 </span></span><br><span class="line"><span class="keyword">if</span>((s&amp;(<span class="number">1</span>&lt;&lt;j))==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> ns=s|(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">dp[ns][j]=max(dp[ns][j],dp[s][i]+st[j]+add[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==m)&#123;</span><br><span class="line">rep(j,<span class="number">0</span>,n<span class="number">-1</span>)ans=max(ans,dp[s][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分解质因子</title>
      <link href="2019/04/08/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E5%AD%90/"/>
      <url>2019/04/08/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>求一个数分解质因数，要从最小的质数除起，一直除到结果为质数为止。然后超过根号n的素因子最多只有一个，因为两个就超过n了。所以i*i&lt;=tn即可，最后在看一下这个tn是不是1，不是的话，那它也是个素因子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resolve</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">ll tn=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=tn;++i)&#123;</span><br><span class="line"><span class="keyword">while</span>(tn%i==<span class="number">0</span>)&#123;</span><br><span class="line">p.push_back(i);</span><br><span class="line">tn/=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tn!=<span class="number">1</span>)p.push_back(tn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">p.clear();</span><br><span class="line">resolve(n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;素因子个数 &quot;</span>&lt;&lt;p.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p.size();++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) Round 550 (Div. 3) (全)</title>
      <link href="2019/04/01/(CodeForces)%20Round550/"/>
      <url>2019/04/01/(CodeForces)%20Round550/</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/contest/1144">传送门</a></h1><h3 id="a-diverse-strings"><a class="markdownIt-Anchor" href="#a-diverse-strings"></a> A. Diverse Strings</h3><p><em><strong>解题思路：</strong></em> 先对字符串排序然后判断一下就行了。B. Parity Alternated Deletions</p><p>***解题思路：***如果奇数个数和偶数个数相差不超过1，那就是可以取完的，反之我们去不掉的，那就剩下小的就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">sort(s.begin(),s.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;sz(s);++i) <span class="keyword">if</span> (s[i]!=s[i<span class="number">-1</span>]+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(pd(s)? <span class="string">&quot;Yes\n&quot;</span> : <span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-parity-alternated-deletions"><a class="markdownIt-Anchor" href="#b-parity-alternated-deletions"></a> B. Parity Alternated Deletions</h3><p><em><strong>解题思路：</strong></em> 如果奇数个数和偶数个数相差不超过1，那就是可以取完的，反之我们去不掉的，那就剩下小的就好了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; even,odd;</span><br><span class="line"><span class="keyword">int</span> n,tp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp&amp;<span class="number">1</span>)odd.pb(tp);</span><br><span class="line"><span class="keyword">else</span> even.pb(tp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(sz(odd)-sz(even))&lt;=<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">sort(odd.begin(),odd.end());</span><br><span class="line">sort(even.begin(),even.end());</span><br><span class="line"><span class="keyword">if</span>(sz(odd)&gt;sz(even))rep(i,<span class="number">0</span>,sz(odd)-sz(even)<span class="number">-2</span>)sum+=odd[i];</span><br><span class="line"><span class="keyword">else</span>rep(i,<span class="number">0</span>,sz(even)-sz(odd)<span class="number">-2</span>)sum+=even[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-two-shuffled-sequences"><a class="markdownIt-Anchor" href="#c-two-shuffled-sequences"></a> C. Two Shuffled Sequences</h3><p><em><strong>解题思路：</strong></em> 一个元素个数超过3个那肯定不能分成两个满足条件的序列，如果两个一样的元素那就每个序列放一个，反之放哪个都是一样的，最后排个序就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,tp;</span><br><span class="line"><span class="keyword">bool</span> f1,f2;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; num; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; de,inde;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(++num[tp]&gt;=<span class="number">3</span>)f1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[tp]==<span class="number">2</span>)f2=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(f1)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!f2)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;num.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=num.begin();it!=num.end();++it)<span class="built_in">cout</span>&lt;&lt;it-&gt;fi&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=num.begin();it!=num.end();++it)&#123;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;se==<span class="number">2</span>)de.pb(it-&gt;fi),inde.pb(it-&gt;fi);</span><br><span class="line"><span class="keyword">else</span>de.pb(it-&gt;fi);</span><br><span class="line">&#125;</span><br><span class="line">sort(de.begin(),de.end());</span><br><span class="line">sort(inde.begin(),inde.end(),greater&lt;<span class="keyword">int</span>&gt;() );</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;de.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,sz(de)<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;de[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;inde.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,sz(inde)<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;inde[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d-equalize-them-all"><a class="markdownIt-Anchor" href="#d-equalize-them-all"></a> D. Equalize Them All</h3><p><em><strong>解题思路：</strong></em> 让所有的数字变成那个出现频率最高的数无疑是步数最少的，题干中的那步操作，其实就是使两个数字相同，大了那就减去差，小了那就加上差，所有只要从出现频率最高的那个数字开始往两边走就行了，大了就2操作，小了就1操作。（不需要像代码还找个区间，写烦了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],le=<span class="number">1</span>,ri=<span class="number">1</span>,num,id;</span><br><span class="line"><span class="keyword">int</span> co[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i,j;</span><br><span class="line">&#125;ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">co[a[i]]++;</span><br><span class="line"><span class="keyword">if</span>(co[a[i]]&gt;num)&#123;</span><br><span class="line">num=co[a[i]];</span><br><span class="line">id=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==id)&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;=n;++j)<span class="keyword">if</span>(a[j]!=id)<span class="keyword">break</span>;</span><br><span class="line">le=i,ri=j<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=le<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;id)ans[++cnt]=node&#123;<span class="number">2</span>,i,i+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;id)ans[++cnt]=node&#123;<span class="number">1</span>,i,i+<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=ri+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;id) ans[++cnt]=node&#123;<span class="number">2</span>,i,i<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;id)ans[++cnt]=node&#123;<span class="number">1</span>,i,i<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,cnt)<span class="built_in">cout</span>&lt;&lt;ans[i].x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i].i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i].j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e-median-string"><a class="markdownIt-Anchor" href="#e-median-string"></a> E. Median String</h3><p><em><strong>解题思路：</strong></em> 如果给我们两个数求他们中间的那个数，我们都会求，加起来除2就行了，我们可以把字符串看成26进制不就行了嘛。模拟26进制计算，最后在转化回字符串就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,sum[maxn];</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> x=<span class="string">&#x27;a&#x27;</span>;x&lt;=<span class="string">&#x27;z&#x27;</span>;++x)&#123;</span><br><span class="line">mp[x]=i,mp[i]=x,++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cur=<span class="number">0</span>,tp,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=sz(a)<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">tp=mp[a[i]]+mp[b[i]]+cur;</span><br><span class="line">sum[cnt]=tp%<span class="number">26</span>;</span><br><span class="line">cur=tp/<span class="number">26</span>;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur)sum[cnt]=cur;</span><br><span class="line"><span class="keyword">else</span>cnt--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i]&amp;<span class="number">1</span>)sum[i<span class="number">-1</span>]+=<span class="number">26</span>;</span><br><span class="line">sum[i]/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;n<span class="number">-1</span>)cnt--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">0</span>;--i)<span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(mp[sum[i]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="f-graph-without-long-directed-paths"><a class="markdownIt-Anchor" href="#f-graph-without-long-directed-paths"></a> F. Graph Without Long Directed Paths</h3><p><em><strong>解题思路：</strong></em> 分析题意，不能有&gt;=2的路径，其实就是每个点的边，要不就是全部指向它，要不然就是全部从它出去。这样就不会有&gt;=2的路径出现了。然后我们用搜索就可以解决这个问题，我写的比较啰嗦…丧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> ans[maxn],vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,x,y;</span><br><span class="line"><span class="keyword">bool</span> fg;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; mp[maxn];</span><br><span class="line"><span class="keyword">bool</span> pd=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> np,<span class="keyword">bool</span> fg)</span></span>&#123; <span class="comment">//当前点，fg=0代表所有的边都是出边，反之入边</span></span><br><span class="line">rep(i,<span class="number">0</span>,sz(mp[np])<span class="number">-1</span>)&#123;</span><br><span class="line">edge tp=mp[np][i];</span><br><span class="line"><span class="keyword">if</span>(pd)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[tp.id])&#123;</span><br><span class="line">vis[tp.id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tp.x==np &amp;&amp; fg==<span class="number">1</span>)ans[tp.id]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tp.x==np &amp;&amp; fg==<span class="number">0</span>)ans[tp.id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tp.x!=np &amp;&amp; fg==<span class="number">1</span>)ans[tp.id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tp.x!=np &amp;&amp; fg==<span class="number">0</span>)ans[tp.id]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tp.x!=np)  solve(tp.x,fg^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> solve(tp.y,fg^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fg==<span class="number">1</span> &amp;&amp; tp.x==np &amp;&amp; ans[tp.id]==<span class="number">1</span>)&#123;</span><br><span class="line">pd=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(fg==<span class="number">1</span> &amp;&amp; tp.x!=np &amp;&amp; ans[tp.id]==<span class="number">0</span>)&#123;</span><br><span class="line">pd=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(fg==<span class="number">0</span> &amp;&amp; tp.x==np &amp;&amp; ans[tp.id]==<span class="number">0</span>)&#123;</span><br><span class="line">pd=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(fg==<span class="number">0</span> &amp;&amp; tp.x!=np &amp;&amp; ans[tp.id]==<span class="number">1</span>)&#123;</span><br><span class="line">pd=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">mp[x].pb(edge&#123;i,x,y,<span class="number">0</span>&#125;);</span><br><span class="line">mp[y].pb(edge&#123;i,x,y,<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">solve(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(pd)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,m)<span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="g-two-merged-sequences"><a class="markdownIt-Anchor" href="#g-two-merged-sequences"></a> G. Two Merged Sequences</h3><p><em><strong>解题思路：</strong></em> 对于一个数如果它只能放两个队列之一，那我就将其放入，如果两个都不能，那这个数列构造肯定就失败了。</p><p>如果它两个队列都能放入呢，那我们就看它的下一个元素，会有三种情况，1.相同，那就每个队列塞一个。2.下一个元素比它大，那就把他放到递增序列。3.下一个元素比它小，那就把它放到递减序列。这样考虑其实对当前元素不作选择了，因为我们这样放，它不影响下一个元素选择摆放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line"><span class="keyword">bool</span> ans[maxn];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; inde; <span class="comment">//下降</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt; de; <span class="comment">//上升序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">de.push(-inf),inde.push(inf);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>]&gt;a[i])de.push(a[i]),ans[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>]&lt;a[i])inde.push(a[i]),ans[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> de.push(a[i]),inde.push(a[++i]),ans[i<span class="number">-1</span>]=<span class="number">0</span>,ans[i]=<span class="number">1</span>;</span><br><span class="line">++i;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;de.top() &amp;&amp; a[i]&lt;inde.top()) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>]&gt;a[i])de.push(a[i]),ans[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>]&lt;a[i])inde.push(a[i]),ans[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> de.push(a[i]),inde.push(a[++i]),ans[i<span class="number">-1</span>]=<span class="number">0</span>,ans[i]=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;de.top())de.push(a[i]),ans[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;inde.top())inde.push(a[i]),ans[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) E. Maximize Mex (匈牙利)</title>
      <link href="2019/03/30/(CodeForce)%20E.%20Maximize%20Mex/"/>
      <url>2019/03/30/(CodeForce)%20E.%20Maximize%20Mex/</url>
      
        <content type="html"><![CDATA[<h3 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/contest/1139/problem/E">传送门</a></h3><p><em><strong>题目大意：</strong></em> 每个人都有一个潜力值和所属的俱乐部，但是呢，学校每天要一个人滚出俱乐部，然后在所有的俱乐部各选一人，组成一个序列求mex，就是组成的序列中没出现的最小自然数。</p><p><em><strong>解题思路：</strong></em> 我们可以建一个潜力值和俱乐部的二分图，我们潜力值从低到高匹配，如果有一个潜力值无法被匹配，那这次所求的mex不就是它了嘛。所有我们可以将查询的序列倒着处理，从后往前逐个往里面加人，连边。每次跑匈牙利去尝试匹配就行了，从后往前肯定是一个不降序列了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> match[maxn&lt;&lt;<span class="number">2</span>],belone[maxn],po[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn&lt;&lt;<span class="number">2</span>],pd[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)mp[x].size();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[mp[x][i]])&#123;</span><br><span class="line">vis[mp[x][i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(match[mp[x][i]]==<span class="number">-1</span> || dfs(match[mp[x][i]]))&#123;</span><br><span class="line">match[mp[x][i]]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k,qu[maxn],ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">ms(match,<span class="number">-1</span>); <span class="comment">//有0置成-1</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;po[i]; <span class="comment">//潜力值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;belone[i]; <span class="comment">//属于哪个俱乐部</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)<span class="built_in">cin</span>&gt;&gt;qu[i],pd[qu[i]]=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123; <span class="comment">//没有被踢的同学先连边</span></span><br><span class="line"><span class="keyword">if</span>(!pd[i])&#123;</span><br><span class="line">mp[po[i]].pb(belone[i]+m);</span><br><span class="line">mp[belone[i]+m].pb(po[i]); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;m;++j)&#123; <span class="comment">//先跑匈牙利</span></span><br><span class="line">ms(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!dfs(j))<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans[i]=j; </span><br><span class="line">mp[po[qu[i]]].pb(belone[qu[i]]+m); <span class="comment">//加人连边</span></span><br><span class="line">mp[belone[qu[i]]+m].pb(po[qu[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 匈牙利 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap 堆</title>
      <link href="2019/03/29/heap%E5%A0%86/"/>
      <url>2019/03/29/heap%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h3 id="不用自己写堆啦懒人必备比如我"><a class="markdownIt-Anchor" href="#不用自己写堆啦懒人必备比如我"></a> 不用自己写堆啦，懒人必备，比如我。</h3><p>整理了操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y;&#125;<span class="comment">//小堆 或者用 greater&lt;int&gt;()</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CMP</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&lt;y;&#125;<span class="comment">//大堆 </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">-199</span>,<span class="number">122</span>,<span class="number">88</span>&#125;;</span><br><span class="line">vector&lt;int&gt; mx(a,a+5),mi(a,a+5);</span><br><span class="line"><span class="comment">//建堆 </span></span><br><span class="line">make_heap(mx.begin(),mx.end());<span class="comment">//默认大堆</span></span><br><span class="line">make_heap(mi.begin(),mi.end(),cmp);<span class="comment">//小堆 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出堆顶</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mx.front()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mi.front()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素 </span></span><br><span class="line">mx.pb(<span class="number">77</span>),push_heap(mx.begin(),mx.end());</span><br><span class="line">mi.pb(<span class="number">77</span>),push_heap(mi.begin(),mi.end(),cmp); <span class="comment">//更新也要cmp哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出堆顶元素</span></span><br><span class="line">pop_heap(mx.begin(),mx.end()),mx.pop_back(); </span><br><span class="line">pop_heap(mi.begin(),mi.end(),cmp),mi.pop_back(); <span class="comment">//也要加 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="还想多多了解"><a class="markdownIt-Anchor" href="#还想多多了解"></a> <a href="https://blog.csdn.net/zsc2014030403015/article/details/45872737">还想多多了解</a></h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) C. Edgy Trees (并查集)</title>
      <link href="2019/03/28/(CodeForce)%20C.%20Edgy%20Trees/"/>
      <url>2019/03/28/(CodeForce)%20C.%20Edgy%20Trees/</url>
      
        <content type="html"><![CDATA[<h3 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> <a href="http://codeforces.com/contest/1139/problem/C">传送门</a></h3><p><em><strong>题目大意：</strong></em> 给你一棵树，有黑边和紫边，一种k个元素的集合，a1到a2走最短路径…只要经过黑边那就是好的，问有多少个这种集合。</p><p><em><strong>解题思路：</strong></em> 不考虑紫边黑边，就k个元素的集合，那有n^k个。考虑到如果那个集合都是一个全是紫边联通块里的元素，那如何也是不可能走到黑边的，或者是只和黑边连接的点，这也算是一个联通块。那只要把总共的减去这些不合法的，那就是正确的了。减去每个不合法联通块的个数的k次方即可(就是集合元素全在这个联通块中选)。所以合并的时候，只将紫边的两段合并即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,fa[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)fa[i]=i;&#125;</span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> fa[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mpow</span><span class="params">(ll x,ll n)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=(ans*x)%mod;</span><br><span class="line">x=(x*x)%mod;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">init(n);</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="keyword">if</span>(!z)unite(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)mp[find(i)]++;</span><br><span class="line">ll ans=mpow(n,k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();++it)&#123;</span><br><span class="line">ans=(ans+mod-mpow(it-&gt;se,k))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛选素数</title>
      <link href="2019/03/27/%E7%AD%9B%E9%80%89%E7%B4%A0%E6%95%B0/"/>
      <url>2019/03/27/%E7%AD%9B%E9%80%89%E7%B4%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>第一种：简单好记，一般够用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fg[<span class="number">0</span>]=fg[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!fg[i])&#123;</span><br><span class="line">prime[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j*i&lt;maxn;++j)&#123;</span><br><span class="line">fg[i*j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：稍微难记一点，但是更快<a href="https://www.cnblogs.com/A-S-KirigiriKyoko/articles/6034572.html">原理可以参考一下这篇</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fg[<span class="number">0</span>]=fg[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!fg[i])prime[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt &amp;&amp; i*prime[j]&lt;maxn;++j)&#123;</span><br><span class="line">fg[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 2566 Bound Found (尺取法)</title>
      <link href="2019/03/27/(POJ)%202566%20Bound%20Found/"/>
      <url>2019/03/27/(POJ)%202566%20Bound%20Found/</url>
      
        <content type="html"><![CDATA[<p><em><strong>题目大意：</strong></em> 就是在给你的数列中取一段，使它和的绝对值最接近于t，并输出他的和的绝对值，区间l和r。</p><p><em><strong>解题思路：</strong></em> 一开始说这是一道尺取题，我是不信的，因为没有发现单调性，那我怎么尺取呢，看了别人的题解，才恍然大悟，居然可以对前缀和sum排序，当然下标id是要记住的。然后这时候的sum就有单调性了，我们就可以在sum上进行尺取。l与r，a[r].sum-a[l].sum 就是 a[l].id+1与a[r].id对应的区间的和的绝对值（因为求的是绝对值嘛，那就可以直接大的减小的，和小的减大的取绝对值同效果），如果a[r].sum-a[l].sum&gt;t, l++,反之 r++，并且每次尝试更新。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id,sum;</span><br><span class="line">&#125; a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k,t;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.sum&lt;y.sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1</span>, al, ar, ans, minn = inf;</span><br><span class="line"><span class="keyword">while</span> (l&lt;=n &amp;&amp; r&lt;=n &amp;&amp; minn!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> temp=a[r].sum-a[l].sum;<span class="comment">//这里不能用算的时候 l-1 因为这里的l是排序后的数组，已经没有前后逻辑关系</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(temp-t) &lt; minn) &#123;</span><br><span class="line">minn=<span class="built_in">abs</span>(temp-t);</span><br><span class="line">ar=a[r].id,al=a[l].id;</span><br><span class="line">ans=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; t)l++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; t)r++;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (r == l)r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(al&gt;ar)swap(al,ar);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;al+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ar&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//最后再将al+1  </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k)!=EOF) &#123;</span><br><span class="line"><span class="keyword">if</span>(!n &amp;&amp; !k)<span class="keyword">break</span>;</span><br><span class="line">a[<span class="number">0</span>].sum=<span class="number">0</span>,a[<span class="number">0</span>].id=<span class="number">0</span>; <span class="comment">//这里0要加进去，因为算的时候不能l-1了 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].sum);</span><br><span class="line">a[i].sum+=a[i<span class="number">-1</span>].sum;</span><br><span class="line">a[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 尺取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2015蓝桥杯 垒骰子 （动态规划+矩阵快速幂）</title>
      <link href="2019/03/23/2015%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E5%9E%92%E9%AA%B0%E5%AD%90/"/>
      <url>2019/03/23/2015%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E5%9E%92%E9%AA%B0%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p><em><strong>解题思路</strong></em> ：动态转移方程，先考虑底面应该是挺好想的，放第n个骰子，可以由n-1个骰子推出，为了方便将他的冲突面，改成都是朝向的那个面，比如1 2 冲突，那对应的两个骰子的底面是1，5；第n个骰子底面是1，可能第n-1骰子底面是1~6，这样的话，就可能有36种转移，当然最后要乘以4*n，因为我们只考虑了底面，但是题目的n有1e9，我们不能直接for循环。这里需要矩阵快速幂，</p><p>An=An-1*X X是一个六阶矩阵，Xij=1代表可以i面j面这样叠着放(对应的都是朝下的那个面)，反之则不可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,pd[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">pd[<span class="number">1</span>]=<span class="number">4</span>,pd[<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">pd[<span class="number">2</span>]=<span class="number">5</span>,pd[<span class="number">5</span>]=<span class="number">2</span>;</span><br><span class="line">pd[<span class="number">3</span>]=<span class="number">6</span>,pd[<span class="number">6</span>]=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> m[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">matrix()&#123;ms(m,<span class="number">0</span>);&#125;</span><br><span class="line">matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> matrix &amp;tp)<span class="keyword">const</span>&#123;</span><br><span class="line">matrix res;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">6</span>;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">6</span>;++k)&#123;</span><br><span class="line">res.m[i][j]=(res.m[i][j]+m[i][k]*tp.m[k][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">matrix <span class="title">matpow</span><span class="params">(matrix x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">matrix ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;++i)ans.m[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*x;</span><br><span class="line">x=x*x;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=(ans*x)%mod;</span><br><span class="line">x=(x*x)%mod;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">matrix a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">6</span>;++j)a.m[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y; </span><br><span class="line">a.m[x][pd[y]]=<span class="number">0</span>;</span><br><span class="line">a.m[y][pd[x]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">matrix ta=matpow(a,n<span class="number">-1</span>);</span><br><span class="line">ll t=<span class="built_in">pow</span>(<span class="number">4</span>,n);</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">6</span>;++j)&#123;</span><br><span class="line">res=(res+ta.m[i][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(t*res)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流例题</title>
      <link href="2019/03/01/%E7%BD%91%E7%BB%9C%E6%B5%81%E4%B8%93%E9%A2%98/"/>
      <url>2019/03/01/%E7%BD%91%E7%BB%9C%E6%B5%81%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="对于网络流的基础知识可以戳这里"><a class="markdownIt-Anchor" href="#对于网络流的基础知识可以戳这里"></a> 对于网络流的基础知识可以<a href="https://blog.csdn.net/txl199106/article/details/64441994">戳这里</a></h3><p>我就不多bb了，讲的没人家好，还可能讲错( ఠൠఠ )ﾉ</p><blockquote><h1 id="一模板题目"><a class="markdownIt-Anchor" href="#一模板题目"></a> 一,模板题目:</h1></blockquote><h3 id="1p1343-地震逃生"><a class="markdownIt-Anchor" href="#1p1343-地震逃生"></a> 1.<a href="https://www.luogu.org/problemnew/show/P1343">P1343 地震逃生</a></h3><h3 id="2p2740-usaco42草地排水drainage-ditches"><a class="markdownIt-Anchor" href="#2p2740-usaco42草地排水drainage-ditches"></a> 2.[P2740 <a href="https://www.luogu.org/problemnew/show/P2740">USACO4.2]草地排水Drainage Ditches</a></h3><p>*<strong>模板题就不贴代码了*</strong></p><blockquote><h1 id="二初识最小割"><a class="markdownIt-Anchor" href="#二初识最小割"></a> 二,初识最小割：</h1></blockquote><p>如果你对最小割了解的仅仅只是一个概念(最小割=最大流)，那你可以看一下以下几张图帮你更加了解一下。</p><p><img src="https://img-blog.csdnimg.cn/20190301103108637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="" /></p><p><img src="https://img-blog.csdnimg.cn/20190301103119600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="" /></p><p>几张图了解网络流的割是个什么东西…:所谓网络流的割就是将点划分为连到S与连到T的两个点集合…割就是这两个点集相连的边…但注意…割的容量只记从S点集到T点集的…T点集到S点集的不算…所以割的容量等于这从S点集到T点集所有边的容量之和…而网络流的最小割就是这些割中容量最小的…</p><h3 id="1p4001-icpc-beijing-2006狼抓兔子"><a class="markdownIt-Anchor" href="#1p4001-icpc-beijing-2006狼抓兔子"></a> 1.[P4001 <a href="https://www.luogu.org/problemnew/show/P4001">ICPC-Beijing 2006]狼抓兔子</a></h3><p><strong>思路</strong>：裸题 最小割。vector存边dinic可能过不了，不是T最后一个点就是MLE，如果有用vector写的可以交流一下ε(┬┬﹏┬┬)3(一定是评测机的问题)</p><h3 id="2p1345-usaco54奶牛的电信telecowmunication"><a class="markdownIt-Anchor" href="#2p1345-usaco54奶牛的电信telecowmunication"></a> 2.[P1345 <a href="https://www.luogu.org/problemnew/show/P1345">USACO5.4]奶牛的电信Telecowmunication</a></h3><p><strong>思路</strong>：初步认识拆点，将求最小割点变成求最小割。将一个点拆成出点和入点，然后两点之间连边的权值是1，这样跑最小割，他割的是这条边实际是这个点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data) memset(_data,0,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,c1,c2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;<span class="comment">//除了起始点外，全部拆点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=c1 &amp;&amp; i!=c2)add(i,i+n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123; </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a!=c1 &amp;&amp; a!=c2)add(a+n,b,inf);</span><br><span class="line"><span class="keyword">else</span>add(a,b,inf);</span><br><span class="line"><span class="keyword">if</span>(b!=c1 &amp;&amp; b!=c2)add(b+n,a,inf);</span><br><span class="line"><span class="keyword">else</span>add(b,a,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dinic(c1,c2)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="3p1361-小m的作物-最大流最小割"><a class="markdownIt-Anchor" href="#3p1361-小m的作物-最大流最小割"></a> 3.<a href="https://www.luogu.org/problemnew/show/P1361">P1361 小M的作物 (最大流最小割)</a></h3><p><strong>思路</strong>：最小割就是花最少的力气使得所有的点分成两个集合，我们将A地看出源点s，B地看成汇点t，每个植物都可能向某一块地做出贡献，即A地向1有一条边，1向B有一条边。要选出一条边作为割边隔断。还有就是组合的情况了，新开一个点，s点指向新点为A贡献，新点指向他集合的点权值都为inf(使其不可能成为割边)，B同理，答案就是收益总和-最小割(割掉的就是不要的收益)，具体建图方式见图。</p><p><img src="https://img-blog.csdnimg.cn/20190301104119783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> tp,s=n+<span class="number">1</span>,t=n+<span class="number">2</span>,a,b,cnt=n+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;tp,add(s,i,tp),sum+=tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;tp,add(i,t,tp),sum+=tp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k&gt;&gt;a&gt;&gt;b;</span><br><span class="line">sum+=a+b;</span><br><span class="line"><span class="keyword">int</span> pa=++cnt,pb=++cnt;</span><br><span class="line">add(s,pa,a),add(pb,t,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line">add(pa,tp,inf);</span><br><span class="line">add(tp,pb,inf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum-dinic(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><h1 id="三拆点裂点"><a class="markdownIt-Anchor" href="#三拆点裂点"></a> 三,拆点裂点</h1></blockquote><h3 id="1p1231-教辅的组成"><a class="markdownIt-Anchor" href="#1p1231-教辅的组成"></a> 1.<a href="https://www.luogu.org/problemnew/show/P1231">P1231 教辅的组成</a></h3><p><strong>思路</strong>：要保证1本书只和一本教材和一本答案配对，即通过一本书的流量为1，故将书本拆成两个点。书的左边放练习册，右边放答案(反着放也无所谓),源点，汇点搞一搞就行了。建图详见洛谷第一篇题解图片，我的编号和图不一样。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cdd8dfe71977bcb7e4f93573b71d37b4.png" alt="" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data) memset(_data,0,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(&#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(&#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n1,n2,n3;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n1&gt;&gt;n2&gt;&gt;n3;</span><br><span class="line"><span class="keyword">int</span> tot=n1+n2+n3;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,t=tot*<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;++i)add(i,i+n1,<span class="number">1</span>); <span class="comment">//对书拆点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n1*<span class="number">2</span>+<span class="number">1</span>;i&lt;=n1*<span class="number">2</span>+n2;++i)add(s,i,<span class="number">1</span>); <span class="comment">//练习册 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n1*<span class="number">2</span>+n2+<span class="number">1</span>;i&lt;=n1*<span class="number">2</span>+n2+n3;++i)add(i,t,<span class="number">1</span>); <span class="comment">//答案 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">add(b+n1*<span class="number">2</span>,a,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">add(a+n1,b+n1*<span class="number">2</span>+n2,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dinic(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2p1402-酒店之王"><a class="markdownIt-Anchor" href="#2p1402-酒店之王"></a> 2.<a href="https://www.luogu.org/problemnew/show/P1402">P1402 酒店之王</a></h3><p><strong>思路</strong>：与上题相同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data) memset(_data,0,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,p,q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,t=(n+p+q)*<span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)add(i,i+n,<span class="number">1</span>); <span class="comment">//人 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>+n*<span class="number">2</span>;i&lt;=n*<span class="number">2</span>+p;++i)add(s,i,<span class="number">1</span>);<span class="comment">//房 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>+n*<span class="number">2</span>+p;i&lt;=q+n*<span class="number">2</span>+p;++i)add(i,t,<span class="number">1</span>); <span class="comment">//菜</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tp; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">1</span>)add(j+n*<span class="number">2</span>,i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=q;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">1</span>)add(i+n,j+n*<span class="number">2</span>+p,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dinic(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3p2472-scoi2007蜥蜴略难"><a class="markdownIt-Anchor" href="#3p2472-scoi2007蜥蜴略难"></a> 3.[P2472 <a href="https://www.luogu.org/problemnew/show/P2472">SCOI2007]蜥蜴</a>（略难）</h3><p><strong>思路</strong>：开始正儿巴金的建模了，任何时刻不能有两只蜥蜴在同一个石柱上，这句话是句屁话。用流的方式去思考，如果我们跳过去的石柱有蜥蜴，如果能往外跳，那可以让他先流出去，反之，一起流不去回到原来位置或者换方向跳，将每个点拆成两个点，他们之间的权值就是，石头的高度h，因为路过h个之后，石头的高度就会变成0，从而不能再有蜥蜴通过了。在能跳出矩阵的石头，都给他们的出点连一条边到t，权值为inf，而在能互通的点也连一条inf的边，在有蜥蜴的地方，从s连一条权值为1的边，然后跑最大流就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data) memset(_data,0,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r,c,d;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">gid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*c+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">double</span> <span class="title">js</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>(<span class="keyword">double</span>)<span class="built_in">sqrt</span>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> len[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=r;++k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=c;++t)&#123;</span><br><span class="line">len[i][j][k][t]=js(i,j,k,t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,t=r*c*<span class="number">10</span>; </span><br><span class="line"><span class="keyword">char</span> tp;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line">num=tp-<span class="string">&#x27;0&#x27;</span>; <span class="comment">//题目没说不超过10，但数据是不超过10的</span></span><br><span class="line">add(gid(i,j),gid(i,j)+r*c,num); <span class="comment">//拆点，容量为高度 </span></span><br><span class="line"><span class="keyword">if</span>(i+d&gt;r || i-d&lt;<span class="number">1</span> || j+d&gt;c || j-d&lt;<span class="number">1</span> )&#123;</span><br><span class="line">add(gid(i,j)+r*c,t,inf); <span class="comment">//可以跳出去，向汇点连边 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> up=max(<span class="number">1</span>,i-d),low=min(i+d,r),le=max(j-d,<span class="number">1</span>),ri=min(c,j+d);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=up;k&lt;=low;++k)&#123; <span class="comment">//向可能跳出的点连边 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=le;t&lt;=ri;++t)&#123;</span><br><span class="line"><span class="keyword">if</span>(len[i][j][k][t]&lt;=d)add(gid(i,j)+r*c,gid(k,t),inf);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;L&#x27;</span>)add(s,gid(i,j),<span class="number">1</span>),sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum-dinic(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4p2944-usaco09mar地震损失2earthquake-damage-2"><a class="markdownIt-Anchor" href="#4p2944-usaco09mar地震损失2earthquake-damage-2"></a> 4.[P2944 <a href="https://www.luogu.org/problemnew/show/P2944">USACO09MAR]地震损失2Earthquake Damage 2</a></h3><p><strong>思路</strong>：问题转化建模，拆点变成求最小割。题目就是说有些村庄不能到牛棚，而有些能到，那不就是将集合分成两个部分嘛，就是我们最少破坏几个村庄使得已知条件满足，就是拆点，求最小割（就是求最小割点p1345）。对于已经确定没坏但不能到达牛棚的点，我们给他的两点之间连inf，并且将它的出点连inf到t，因为他必不能到牛棚s(这点需注意)，起点和汇点也是确定的点，不能被割。而对于不确定的点就给他的两点之间连1.最后跑个最小割。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data) memset(_data,0,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p,c,n;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p&gt;&gt;c&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>,t=p*<span class="number">10</span>,a,b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">add(a+p,b,inf),add(b+p,a,inf); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">add(a,a+p,inf),vis[a]=<span class="number">1</span>;</span><br><span class="line">add(a+p,t,inf);</span><br><span class="line">&#125;</span><br><span class="line">add(s,s+p,inf),add(s+p,s,inf);</span><br><span class="line">add(t,t+p,inf),add(t+p,t,inf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=p;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])add(i,i+p,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dinic(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="5p2764-最小路径覆盖问题最小路径覆盖原图的结点数-新图的最大匹配数"><a class="markdownIt-Anchor" href="#5p2764-最小路径覆盖问题最小路径覆盖原图的结点数-新图的最大匹配数"></a> 5.<a href="https://www.luogu.org/problemnew/show/P2764">P2764 最小路径覆盖问题</a>（最小路径覆盖=原图的结点数-新图的最大匹配数）</h3><p><strong>思路</strong>：我们可以先认为每个点都是一个路径，我们每次将两条路径合并就会少一条路径，当然又向无环图，点只能在一条路径中出现，所以经过每个点的流量只能为1。将每个点拆点为出点和入点，s到每个出点的值为1，入点到t的值为1，保证每个点经过的流量为1，然后再给能到的点，连一下出点到入点(就是个二分图，出点在左，入点在右)，这样每个点都只能选一个方向流出，也只能选一个方向流入。我们每次在二分图里找一条匹配边就相当于把两条路径合成了一条路径，也就相当于路径数减少了1。所以找到了几条匹配边，路径数就减少了多少。所以有最小路径覆盖=原图的结点数-新图的最大匹配数，这是一个定理，不理解但要记住。输出路径的话，我们只需要知道头头，然后记录下一个。还有就是这题前向星，比vector快10倍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两种代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data) memset(_data,0,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> nxt[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], arc[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(s);</span><br><span class="line">dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">v=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[e.to]==<span class="number">-1</span>) &#123;</span><br><span class="line">dep[e.to]=dep[v]+<span class="number">1</span>;</span><br><span class="line">q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v==t) &#123;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=arc[v]; i&lt;(<span class="keyword">int</span>)eg[v].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=eg[v][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dep[v]+<span class="number">1</span>==dep[e.to]) &#123;</span><br><span class="line">d=dfs(e.to,t,min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span> (d&gt;<span class="number">0</span>) &#123;</span><br><span class="line">nxt[v]=e.to; <span class="comment">//存一下当前节点的下一个</span></span><br><span class="line"><span class="keyword">if</span>(v!=s)vis[e.to-n]=<span class="number">1</span>; <span class="comment">//不是头节点，置为1</span></span><br><span class="line"></span><br><span class="line">e.cap-=d;</span><br><span class="line">eg[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span> (dep[t]==<span class="number">-1</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(arc,<span class="number">0</span>,<span class="keyword">sizeof</span>(arc));</span><br><span class="line"><span class="keyword">while</span> ((d=dfs(s,t,inf))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">flow+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">s=<span class="number">0</span>,t=n*<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">add(s,i,<span class="number">1</span>),add(i+n,t,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">add(x,y+n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=n-dinic(s,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) &#123; <span class="comment">//是头节点，就一直输出到尾</span></span><br><span class="line"><span class="keyword">int</span> now=i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(nxt[now] &amp;&amp; nxt[now]!=t)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;nxt[now]-n&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">now=nxt[now]-n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],hd[maxn],cur[maxn],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]; </span><br><span class="line"><span class="keyword">int</span> nxt[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,c;</span><br><span class="line">&#125; eg[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[++cnt]=edge&#123;t,hd[f],w&#125;,hd[f]=cnt;</span><br><span class="line">eg[++cnt]=edge&#123;f,hd[t],<span class="number">0</span>&#125;,hd[t]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)dep[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(s),dep[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> now,to;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">now=q.front(),q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hd[now]; i; i=eg[i].nxt) &#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dep[to] &amp;&amp; eg[i].c&gt;<span class="number">0</span>) &#123;</span><br><span class="line">dep[to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> to,tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[v]; i; i=eg[i].nxt)&#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(eg[i].c&gt;<span class="number">0</span> &amp;&amp; dep[to]==dep[v]+<span class="number">1</span>)&#123;</span><br><span class="line">tp=dfs(to,t,min(flow,eg[i].c));</span><br><span class="line"><span class="keyword">if</span>(tp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">nxt[v]=to;</span><br><span class="line"><span class="keyword">if</span>(v!=s)vis[to-n]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">eg[i].c-=tp,eg[i^<span class="number">1</span>].c+=tp;</span><br><span class="line"><span class="keyword">return</span> tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)cur[i]=hd[i];  </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> tp=dfs(s,t,inf))flow+=tp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">s=<span class="number">0</span>,t=n*<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">add(s,i,<span class="number">1</span>),add(i+n,t,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">add(x,y+n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=n-dinic(s,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> now=i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(nxt[now] &amp;&amp; nxt[now]!=t)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;nxt[now]-n&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">now=nxt[now]-n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6p2765-魔术球问题"><a class="markdownIt-Anchor" href="#6p2765-魔术球问题"></a> 6.<a href="https://www.luogu.org/problemnew/show/P2765">P2765 魔术球问题</a></h3><p><strong>思路</strong>：此题就是上题的变种。就是一堆数，然后他们有的数之间有平方的关系(有边)，然后你用最小路径覆盖，路径就是柱子，知道最小路径覆盖=原图的结点数-新图的最大匹配数，这个我们是知道的。点我们一个一个的加，每次加都给他的入点和t连权值为1的边，s和出点连边。然后在给可以和他组成平方数的点之间连一条权值为1的边，跑最大流，得到最小路径数如果大于柱子数，那就直接停了，而且我们知道最大的数是比现在这个数小1.再用上面的方法输出路径。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],hd[maxn],cur[maxn],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num,p=<span class="number">10000</span>,nxt[maxn];</span><br><span class="line"><span class="keyword">bool</span> pd[maxn],vis[maxn];</span><br><span class="line"><span class="keyword">int</span> s,t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,c;</span><br><span class="line">&#125; eg[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[++cnt]= &#123;t,hd[f],w&#125;,hd[f]=cnt;</span><br><span class="line">eg[++cnt]= &#123;f,hd[t],<span class="number">0</span>&#125;,hd[t]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s; i&lt;=t; ++i)dep[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(s),dep[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> now,to;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">now=q.front(),q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hd[now]; i; i=eg[i].nxt) &#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dep[to] &amp;&amp; eg[i].c&gt;<span class="number">0</span>) &#123;</span><br><span class="line">dep[to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> to,tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[v]; i; i=eg[i].nxt) &#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(eg[i].c&gt;<span class="number">0</span> &amp;&amp; dep[to]==dep[v]+<span class="number">1</span>) &#123;</span><br><span class="line">tp=dfs(to,t,min(flow,eg[i].c));</span><br><span class="line"><span class="keyword">if</span>(tp&gt;<span class="number">0</span>) &#123;</span><br><span class="line">nxt[v]=to;</span><br><span class="line"><span class="keyword">if</span>(v!=s)vis[to-p]=<span class="number">1</span>;</span><br><span class="line">eg[i].c-=tp,eg[i^<span class="number">1</span>].c+=tp;</span><br><span class="line"><span class="keyword">return</span> tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; ; ++i) &#123;</span><br><span class="line">add(s,i,<span class="number">1</span>),add(i+p,t,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(pd[i+j])add(j,i+p,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(bfs(s,t)) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s; i&lt;=t; ++i)cur[i]=hd[i];</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> tp=dfs(s,t,inf))flow+=tp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i-flow&gt;num)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j]) &#123;</span><br><span class="line"><span class="keyword">int</span> now=j;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(nxt[now] &amp;&amp; nxt[now]!=t) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;nxt[now]-p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">now=nxt[now]-p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;maxn; ++i)pd[i*i]=<span class="number">1</span>;</span><br><span class="line">s=<span class="number">0</span>,t=<span class="number">100000</span>;</span><br><span class="line">dinic(s,t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="四二分图匹配匈牙利网络流"><a class="markdownIt-Anchor" href="#四二分图匹配匈牙利网络流"></a> 四,二分图匹配(匈牙利/网络流)</h1></blockquote><h3 id="了解匈牙利"><a class="markdownIt-Anchor" href="#了解匈牙利"></a> <a href="https://blog.csdn.net/Arabic1666/article/details/79824390">了解匈牙利</a>有趣易懂</h3><p>二分图最大匹配 变种:(匹配数量)</p><ol><li>最小顶点覆盖 = 最大匹配数<br />在二分图中求最少的点，让每条边都至少和其中的一个点关联，这就是：“二分图的最小顶点覆盖”<br />二分图的最小顶点覆盖数=最大匹配数</li><li>最小路径覆盖 = 节点数（n）- 最大匹配数（m）<br />用尽量少的不相交简单路径覆盖有向无环图(DAG)的所有顶点，这就是DAG图的最小路径覆盖问题<br />DAG图的最小路径覆盖数 = 节点数（n）- 最大匹配数（m）</li><li>二分图最大独立集 = 节点数（n）- 最大匹配数（m）<br />从无向图中的顶点中选出k个并且k个顶点之间互不相邻，最大的k就是最大独立集<br />二分图的最大独立集数 = 节点数（n）- 最大匹配数（m）</li></ol><h3 id="1p2756-飞行员配对方案问题"><a class="markdownIt-Anchor" href="#1p2756-飞行员配对方案问题"></a> 1.<a href="https://www.luogu.org/problemnew/show/P2756">P2756 飞行员配对方案问题</a></h3><p><strong>思路</strong>：二分图匹配裸题。也可以网络流搞一下，差不多的速度，但明显匈牙利更加好写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匈牙利</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> mp[maxn][maxn],vis[maxn];</span><br><span class="line"><span class="keyword">int</span> match[maxn];</span><br><span class="line"><span class="keyword">int</span> k,m,n;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[x][i] &amp;&amp; !vis[i])&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(match[i]==<span class="number">0</span> || dfs(match[i],n))&#123;</span><br><span class="line">match[i]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">ms(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(dfs(i,n))ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">ms(match,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y &amp;&amp; (x!=<span class="number">-1</span> &amp;&amp; y!=<span class="number">-1</span>))&#123;</span><br><span class="line">mp[x][y-m]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;solve(m,n)&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(match[i])<span class="built_in">cout</span>&lt;&lt;match[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i+m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//网络流</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],hd[maxn],cur[maxn],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> match[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,c;</span><br><span class="line">&#125; eg[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[++cnt]=edge&#123;t,hd[f],w&#125;,hd[f]=cnt;</span><br><span class="line">eg[++cnt]=edge&#123;f,hd[t],<span class="number">0</span>&#125;,hd[t]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)dep[i]=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(s),dep[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> now,to;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">now=q.front(),q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hd[now]; i; i=eg[i].nxt) &#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dep[to] &amp;&amp; eg[i].c&gt;<span class="number">0</span>) &#123;</span><br><span class="line">dep[to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> to,tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[v]; i; i=eg[i].nxt)&#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(eg[i].c&gt;<span class="number">0</span> &amp;&amp; dep[to]==dep[v]+<span class="number">1</span>)&#123;</span><br><span class="line">tp=dfs(to,t,min(flow,eg[i].c));</span><br><span class="line"><span class="keyword">if</span>(tp&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(v!=s &amp;&amp; to!=t)match[v]=to;</span><br><span class="line">eg[i].c-=tp,eg[i^<span class="number">1</span>].c+=tp;</span><br><span class="line"><span class="keyword">return</span> tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)cur[i]=hd[i]; </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> tp=dfs(s,t,inf))flow+=tp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">s=<span class="number">0</span>,t=m+n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)add(s,i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=n+m;++i)add(i,t,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y &amp;&amp; (x!=<span class="number">-1</span> &amp;&amp; y!=<span class="number">-1</span>))&#123;</span><br><span class="line">add(x,y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dinic(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(match[i])<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;match[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2p2055-zjoi2009假期的宿舍"><a class="markdownIt-Anchor" href="#2p2055-zjoi2009假期的宿舍"></a> 2.[P2055 <a href="https://www.luogu.org/problemnew/show/P2055">ZJOI2009]假期的宿舍</a></h3><p><strong>思路</strong>：讲两种建模方式吧。</p><p><em><strong>网络流建模</strong></em> ：对于每个点拆点(也可以认为一边是人，一边是床)，对于在校生，从他们的床连一条权值为1的边到汇点t，而对于不回家的在校生或者非校生(这些都是想要住学校的人)，从源点连一条权值为1的边到他们，同时不回家的在校生当然也可以睡自己床了，连一条到自己的床。然后就是认识的关系，i认识j就可以从i连一条到j的床的边。<br /><em><strong>匈牙利建模</strong></em> ：不回家而且是在校生，mp[i][i]=1，可以和自己的床匹配。对于有关系的，不回家的在校生或者不是在校生，并且对方是在校生，建立mp[i][j]=1,此二分图要保证左边的人都需要床住，而右边的都有床才能匹配，否则建立的边就是无效的(不要床的你给他连边出来，可能就会多分配，对于没有床的，你连过来也可能多匹配)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网络流</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],hd[maxn],cur[maxn],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,c;</span><br><span class="line">&#125; eg[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">eg[++cnt]=edge&#123;t,hd[f],w&#125;,hd[f]=cnt;</span><br><span class="line">eg[++cnt]=edge&#123;f,hd[t],<span class="number">0</span>&#125;,hd[t]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)dep[i]=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(s),dep[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> now,to;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">now=q.front(),q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hd[now]; i; i=eg[i].nxt) &#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dep[to] &amp;&amp; eg[i].c&gt;<span class="number">0</span>) &#123;</span><br><span class="line">dep[to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> to,tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[v]; i; i=eg[i].nxt)&#123;</span><br><span class="line">to=eg[i].to;</span><br><span class="line"><span class="keyword">if</span>(eg[i].c&gt;<span class="number">0</span> &amp;&amp; dep[to]==dep[v]+<span class="number">1</span>)&#123;</span><br><span class="line">tp=dfs(to,t,min(flow,eg[i].c));</span><br><span class="line"><span class="keyword">if</span>(tp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">eg[i].c-=tp,eg[i^<span class="number">1</span>].c+=tp;</span><br><span class="line"><span class="keyword">return</span> tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)cur[i]=hd[i];  </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> tp=dfs(s,t,inf))flow+=tp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,T;</span><br><span class="line"><span class="keyword">int</span> sch[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">int</span> tp;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n; </span><br><span class="line">s=<span class="number">0</span>,t=n*<span class="number">2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123; <span class="comment">//在校生 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;sch[i];</span><br><span class="line"><span class="keyword">if</span>(sch[i]==<span class="number">1</span>)add(i+n,t,<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123; <span class="comment">//回家 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>((tp==<span class="number">0</span> &amp;&amp; sch[i]==<span class="number">1</span>) || (sch[i]==<span class="number">0</span>))add(s,i,<span class="number">1</span>),num++;</span><br><span class="line"><span class="comment">//不回家而且是在校生 或者 不是在校生</span></span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">0</span> &amp;&amp; sch[i]==<span class="number">1</span>)add(i,i+n,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//不回家的在校生当然也可以睡自己床了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">1</span> &amp;&amp; i!=j)add(i,j+n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=dinic(s,t);</span><br><span class="line"><span class="keyword">if</span>(res&gt;=num)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;^_^&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;T_T&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">cnt=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;++i)hd[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//匈牙利</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> mp[maxn][maxn],vis[maxn];</span><br><span class="line"><span class="keyword">int</span> match[maxn];</span><br><span class="line"><span class="keyword">int</span> n,sch[maxn],back[maxn];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[x][i] &amp;&amp; !vis[i])&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(match[i]==<span class="number">0</span> || dfs(match[i],n))&#123;</span><br><span class="line">match[i]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">ms(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(dfs(i,n))ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">int</span> tp; </span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;sch[i];<span class="comment">//在校生 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;<span class="comment">//回家 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;back[i];</span><br><span class="line"><span class="keyword">if</span>(back[i]==<span class="number">0</span> &amp;&amp; sch[i]==<span class="number">1</span>)mp[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//不回家而且是在校生</span></span><br><span class="line"><span class="keyword">if</span>((back[i]==<span class="number">0</span> &amp;&amp; sch[i]==<span class="number">1</span>) || sch[i]==<span class="number">0</span>)tot++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">1</span> &amp;&amp; i!=j)&#123;</span><br><span class="line"><span class="keyword">if</span>(((sch[i]==<span class="number">1</span> &amp;&amp; back[i]==<span class="number">0</span>) || sch[i]==<span class="number">0</span>) &amp;&amp; sch[j]==<span class="number">1</span>)mp[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//不回家而且是在校生或者不是在校生，并且对方是在校生 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> num=solve(n,n);</span><br><span class="line"><span class="keyword">if</span>(num&gt;=tot) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;^_^&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;T_T&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">ms(back,<span class="number">0</span>),ms(sch,<span class="number">0</span>),ms(mp,<span class="number">0</span>),ms(vis,<span class="number">0</span>),ms(match,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><h1 id="五最小费用最大流dijkstra稠密图spfa稀疏图"><a class="markdownIt-Anchor" href="#五最小费用最大流dijkstra稠密图spfa稀疏图"></a> 五,最小费用最大流（Dijkstra稠密图/Spfa稀疏图）</h1></blockquote><h3 id="1p4016-负载平衡问题"><a class="markdownIt-Anchor" href="#1p4016-负载平衡问题"></a> 1.<a href="https://www.luogu.org/problemnew/show/P4016">P4016 负载平衡问题</a></h3><p><strong>思路</strong>：最后都是一样的数量，那先将每一个仓库的数量先减去平均数，看看要往外搬出去多少个，搬进来多少个，源点s向每个是正值(假设现仓库为v)的仓库连一条权值为v的边，说明要从他这总共要流出v的流量，再对每个是负值的仓库(假设现仓库为-u)，连一条值为u的边到t，它差u的流量所以流出u的流量到t，说明它得到了u的流量。再对相邻的点连权值为inf的边。单位流量的费用为1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spfa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,cap,cost,rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn],pre[maxn],preid[maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=t; ++i)pre[i]=preid[i]=inq[i]=<span class="number">0</span>,eg[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">eg[f].pb(edge &#123;t,w,c,(<span class="keyword">int</span>)eg[t].size()&#125;);</span><br><span class="line">eg[t].pb(edge &#123;f,<span class="number">0</span>,-c,(<span class="keyword">int</span>)eg[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=t; ++i)dis[i]=inf;</span><br><span class="line">dis[st]=<span class="number">0</span>,inq[st]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(st);</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line">edge e;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">u=q.front(),q.pop();</span><br><span class="line">inq[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[u].size(); ++i) &#123;</span><br><span class="line">e=eg[u][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span> &amp;&amp; dis[e.to]&gt;dis[u]+e.cost) &#123;</span><br><span class="line">dis[e.to]=dis[u]+e.cost, pre[e.to]=u, preid[e.to]=i;</span><br><span class="line"><span class="keyword">if</span>(!inq[e.to]) &#123;</span><br><span class="line">q.push(e.to);</span><br><span class="line">inq[e.to]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>,cost=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">costflow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">spfa(s);</span><br><span class="line"><span class="keyword">if</span>(dis[t]==inf)<span class="keyword">break</span>;</span><br><span class="line">d=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=t; v!=s; v=pre[v]) &#123;</span><br><span class="line">d=min(d,eg[pre[v]][preid[v]].cap);</span><br><span class="line">&#125;</span><br><span class="line">flow+=d,cost+=d*dis[t];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=t; v!=s; v=pre[v]) &#123;</span><br><span class="line">eg[pre[v]][preid[v]].cap-=d;</span><br><span class="line">eg[v][eg[pre[v]][preid[v]].rev].cap+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,ave;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;a[i],sum+=a[i];</span><br><span class="line">ave=sum/n;</span><br><span class="line">s=<span class="number">0</span>,t=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">a[i]-=ave;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>)add(s,i,a[i],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;<span class="number">0</span>)add(i,t,-a[i],<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)add(i,i+<span class="number">1</span>,inf,<span class="number">1</span>),add(i,n,inf,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">if</span>(i==n)add(i,i<span class="number">-1</span>,inf,<span class="number">1</span>),add(i,<span class="number">1</span>,inf,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>add(i,i+<span class="number">1</span>,inf,<span class="number">1</span>),add(i,i<span class="number">-1</span>,inf,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">costflow(s,t);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cost&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to, cap, cost, rev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn],pre[maxn], prid[maxn],h[maxn];</span><br><span class="line"><span class="keyword">int</span> n,s,t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=t; ++i)pre[i]=prid[i]=h[i]=<span class="number">0</span>,G[i].clear();</span><br><span class="line">&#125; <span class="comment">//暂默认t坐标最大</span></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">G[f].pb(edge &#123;t,w,c,(<span class="keyword">int</span>)G[t].size()&#125;);</span><br><span class="line">G[t].pb(edge &#123;f,<span class="number">0</span>,-c,(<span class="keyword">int</span>)G[f].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pdis</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> p,val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> pdis &amp;pd) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;pd.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=t; ++i)dis[i]=inf;</span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;pdis&gt; q;</span><br><span class="line">q.push(&#123;st,dis[st]&#125;);</span><br><span class="line"><span class="keyword">int</span> now;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">now=q.top().p,q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)G[now].size(); ++i) &#123;</span><br><span class="line">edge &amp;e=G[now][i];</span><br><span class="line"><span class="keyword">if</span> (e.cap&gt;<span class="number">0</span> &amp;&amp; dis[e.to]&gt;dis[now]+e.cost+h[now]-h[e.to]) &#123;</span><br><span class="line">dis[e.to]=dis[now]+e.cost+h[now]-h[e.to];</span><br><span class="line">pre[e.to]=now,prid[e.to]=i;</span><br><span class="line">q.push(&#123;e.to,dis[e.to]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t]!=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>,cost=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">costflow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (dijkstra(s)) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=t; ++i)h[i]+=dis[i];</span><br><span class="line"><span class="keyword">int</span> d=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=t; v!=s; v=pre[v])d=min(d,G[pre[v]][prid[v]].cap);</span><br><span class="line">flow+=d,cost+=d*h[t];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=t; v!=s; v=pre[v]) &#123;</span><br><span class="line">G[pre[v]][prid[v]].cap-=d;</span><br><span class="line">G[v][G[pre[v]][prid[v]].rev].cap+=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,ave;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="built_in">cin</span>&gt;&gt;a[i],sum+=a[i];</span><br><span class="line">ave=sum/n;</span><br><span class="line">s=<span class="number">0</span>,t=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">a[i]-=ave;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>)add(s,i,a[i],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;<span class="number">0</span>)add(i,t,-a[i],<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)add(i,i+<span class="number">1</span>,inf,<span class="number">1</span>),add(i,n,inf,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">if</span>(i==n)add(i,i<span class="number">-1</span>,inf,<span class="number">1</span>),add(i,<span class="number">1</span>,inf,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>add(i,i+<span class="number">1</span>,inf,<span class="number">1</span>),add(i,i<span class="number">-1</span>,inf,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">costflow(s,t);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cost&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) Codeforces Round 541 (Div. 2) A,B,C,D,F</title>
      <link href="2019/02/25/(CodeForce)%20Codeforces%20Round541/"/>
      <url>2019/02/25/(CodeForce)%20Codeforces%20Round541/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1131">传送门</a></p><h3 id="a-sea-battle"><a class="markdownIt-Anchor" href="#a-sea-battle"></a> A. Sea Battle</h3><p>：围成的不规则图像的周长(就是矩形的周长)，在加四个角重复的部分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll w1,h1,w2,h2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w1&gt;&gt;h1&gt;&gt;w2&gt;&gt;h2;</span><br><span class="line">ll sum=(h1+h2)*<span class="number">2</span>+(max(w1,w2))*<span class="number">2</span>+<span class="number">4</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-draw"><a class="markdownIt-Anchor" href="#b-draw"></a> B. Draw!</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">50</span>;</span><br><span class="line">ll a[maxn],b[maxn],le,ri;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll ans=<span class="number">0</span>,tdd=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">le=max(a[i<span class="number">-1</span>],b[i<span class="number">-1</span>]);</span><br><span class="line">ri=min(a[i],b[i]);</span><br><span class="line"><span class="keyword">if</span>(ri&gt;=le) ans+=ri-max(le<span class="number">-1</span>,tdd),tdd=max(le,ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="c-birthday"><a class="markdownIt-Anchor" href="#c-birthday"></a> C. Birthday</h3><p>：只要序列高度(大小)是一个山字形就行了，所以排个序，操作一下就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a,a+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>)ans.insert(ans.begin(),a[i]);</span><br><span class="line"><span class="keyword">else</span>ans.insert(ans.end(),a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)ans.size(); ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d-gourmet-choice"><a class="markdownIt-Anchor" href="#d-gourmet-choice"></a> D. Gourmet choice</h3><p><em><strong>题目大意：</strong></em> 第一天n个菜，第二天m个菜，一个n*m的矩阵代表他们之间的优劣关系，根据这个矩阵用数字来给每一个菜品打分，使得最大的数字最小。比如 Aij 是&gt; 说明第一天的 i菜 比第二天的 j菜好。</p><p><em><strong>解题思路：</strong></em> 根据题目的描述，两道菜之间的优劣情况，我们可以连一条权值为1的单向边，而哪些没有指向他的点，那就是最小的数为1。从入度为0的点开始，一步步往里面走，我们自然可以想到拓扑排序，但这题目还有 = ，说明两个菜的优劣程度相同 那么考虑到，如果两个菜优劣程度相同，其实我们可以将他们认为是一个点(放到一个集合中)，他们满足的条件是共通的，所以我们可以用一个并查集去维护，我们把一个集合里的点都用一个点来代替，然后拓扑就行了，有环说明就矛盾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],rk[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eg[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; ++i) &#123;</span><br><span class="line">fa[i]=i,rk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> fa[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x!=y) &#123;</span><br><span class="line"><span class="keyword">if</span>(rk[x]&gt;rk[y])fa[y]=x;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(rk[x]==rk[y])rk[y]++;</span><br><span class="line">fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> in[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; <span class="comment">//拓扑排序</span></span><br><span class="line"><span class="keyword">int</span> tp,sz=num.size(),cnt=sz;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(<span class="keyword">int</span>)eg[num[i]].size(); ++j) &#123;</span><br><span class="line">tp=eg[num[i]][j];</span><br><span class="line">in[tp]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!in[num[i]])q.push(num[i]),ans[num[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">tp=q.front(),q.pop();</span><br><span class="line">cnt--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[tp].size(); ++i) &#123;</span><br><span class="line">to=eg[tp][i];</span><br><span class="line">in[to]--;</span><br><span class="line">ans[to]=max(ans[to],ans[tp]+<span class="number">1</span>); <span class="comment">//更新ans</span></span><br><span class="line"><span class="keyword">if</span>(!in[to]) &#123;</span><br><span class="line">q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//说明有环，矛盾</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[find(i)]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[find(i+n)]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">char</span> tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;&gt;&#x27;</span>)eg[j+n].push_back(i);</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;&lt;&#x27;</span>)eg[i].push_back(j+n);</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;=&#x27;</span>)unite(i,j+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m+n; ++i) &#123; <span class="comment">//这一步就是用点来代表集合，这里感觉写繁琐了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(<span class="keyword">int</span>)eg[i].size(); ++j) &#123; <span class="comment">//将指出去的边都指向集合的父亲</span></span><br><span class="line"><span class="keyword">int</span> p=eg[i][j];</span><br><span class="line"><span class="keyword">if</span>(find(p)!=p)eg[i][j]=find(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(find(i)!=i) &#123; <span class="comment">//用父亲代表这个集合</span></span><br><span class="line">eg[find(i)].insert(eg[find(i)].end(),eg[i].begin(),eg[i].end());</span><br><span class="line">&#125; <span class="keyword">else</span>num.push_back(i); <span class="comment">//现在的点放到num数组中</span></span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="f-asya-and-kittens"><a class="markdownIt-Anchor" href="#f-asya-and-kittens"></a> F. Asya And Kittens</h3><p>：这也是一个并查集的题目，我们只需将每次合并的东西维护一下，这题就迎刃而解了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">155000</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],rk[maxn]; <span class="comment">//这里的rk是 以i为父亲为集合的元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> fa[x];</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unity</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(rk[x]&lt;rk[y]) swap(x,y);</span><br><span class="line">fa[y]=x,rk[x]+=rk[y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=rk[y]<span class="number">-1</span>; ++i) &#123; <span class="comment">//每次合并我们把集合的元素也并一下</span></span><br><span class="line">G[x].push_back(G[y][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">fa[i]=i,G[i].push_back(i),rk[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">unity(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st=find(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n<span class="number">-2</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;G[st][i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;G[st][n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1993 小K的农场 (差分约束)</title>
      <link href="2019/02/24/(Luogu)%20P1993%20%E5%B0%8FK%E7%9A%84%E5%86%9C%E5%9C%BA/"/>
      <url>2019/02/24/(Luogu)%20P1993%20%E5%B0%8FK%E7%9A%84%E5%86%9C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1993">传送门</a></p><p><em><strong>解题思路：</strong></em> 这是一道差分约束的裸题，我也是第一次接触差分约束，（<a href="https://blog.csdn.net/whereisherofrom/article/details/78922648">详细解说戳我</a>）简单来说，就是将不等式 与 spfa里的松弛操作联系起来，给予他意义，这样就可以用图的方式来解决他了，观察等式 a-b&lt;=k ,这个式子可以变成 a&lt;=b+k 这个式子是不很像</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spfa里的松弛操作</span><br><span class="line"><span class="keyword">if</span>(d[v] &lt; d[u] + w(u,v) ) &#123;</span><br><span class="line">        d[v] = d[u] + w(u, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将a看成d[v], b看成d[u], 那么k就是u到v这条边上的权值了，然后就可以建图。</p><p>而这个题目，他给的至多和至少就是这样的不等式（都化简成小于等于），而等于，那就建两条权值为0的边，然后可以还是不可以呢，那就判断有没有环，有环那就矛盾了。深搜判断环比宽搜快很多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; eg[maxn];</span><br><span class="line"><span class="keyword">int</span> dist[maxn],vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</span><br><span class="line">vis[st]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> to,w;</span><br><span class="line">node tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)eg[st].size(); ++i) &#123;</span><br><span class="line">tp=eg[st][i];</span><br><span class="line">to=tp.to,w=tp.w;</span><br><span class="line"><span class="keyword">if</span>(dist[to]&gt;dist[st]+w) &#123;</span><br><span class="line">dist[to]=dist[st]+w;</span><br><span class="line"><span class="keyword">if</span>(vis[to] || spfa(to))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,a,b,c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">eg[a].push_back(node &#123;b,-c&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">eg[b].push_back(node &#123;a,c&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">eg[a].push_back(node &#123;b,<span class="number">0</span>&#125;);</span><br><span class="line">eg[b].push_back(node &#123;a,<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(spfa(i))&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P2024 [NOI2001]食物链 (并查集)</title>
      <link href="2019/02/19/(Luogu)%20P2024%20%5BNOI2001%5D%E9%A3%9F%E7%89%A9%E9%93%BE/"/>
      <url>2019/02/19/(Luogu)%20P2024%20%5BNOI2001%5D%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2024">传送门</a></p><p><em><strong>解题思路：</strong></em> 将并查集分为三个部分 分别是同类，猎物 ，天敌，取x(x属于1~n)举个栗子，与x一块的为x的同类，与x+n为一块的为x的猎物，与x+2*n为一块的为x的天敌。我们只需要同时维护这三个部分，并用来判断假话即可。由于只有A，B，C三种动物，那么A猎物的猎物就是A的天敌这需要注意维护。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn*<span class="number">3</span>],rk[maxn*<span class="number">3</span>]; <span class="comment">//一部分代表同类， 二猎物 ，三天敌 </span></span><br><span class="line"><span class="keyword">int</span> n,k,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn*<span class="number">3</span>;++i)</span><br><span class="line">fa[i]=i,rk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> fa[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(rk[x]&lt;rk[y])fa[x]=y;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rk[x]==rk[y])rk[x]++;</span><br><span class="line">fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;z&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(x&gt;n || y&gt;n)&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">1</span>)&#123; <span class="comment">//同类 </span></span><br><span class="line"><span class="keyword">if</span>(find(x+n)==find(y) || find(x+<span class="number">2</span>*n)==find(y) )&#123;</span><br><span class="line">                <span class="comment">//y是x的猎物 或者 y是x的天敌 即为假话</span></span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; </span><br><span class="line">unite(x,y),unite(x+n,y+n),unite(x+<span class="number">2</span>*n,y+<span class="number">2</span>*n);</span><br><span class="line">            <span class="comment">//x的同类也是y的同类合并，猎物和天敌同理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(z==<span class="number">2</span>)&#123; <span class="comment">//x吃y </span></span><br><span class="line"><span class="keyword">if</span>(find(x)==find(y) || find(x)==find(y+n))&#123;</span><br><span class="line">                <span class="comment">//x与y是同类 或者 y的猎物有x</span></span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">unite(x+n,y),unite(x,y+<span class="number">2</span>*n),unite(x+<span class="number">2</span>*n,y+n);</span><br><span class="line">            <span class="comment">//x的猎物与y是同类 x的同类是y的天敌 x的天敌是y的猎物 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——悬线法 （P1169 棋盘制作 p4147 玉蟾宫 p2701 巨大的牛棚 p1387 最大正方形）</title>
      <link href="2019/02/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%82%AC%E7%BA%BF%E6%B3%95/"/>
      <url>2019/02/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%82%AC%E7%BA%BF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/solution/P1169">学习于luogu p1169 第一篇题解</a></p><h2 id="悬线法"><a class="markdownIt-Anchor" href="#悬线法"></a> 悬线法</h2><h3 id="用途"><a class="markdownIt-Anchor" href="#用途"></a> 用途:</h3><p>​    解决给定矩阵中满足各种条件的最大子矩阵</p><h3 id="做法"><a class="markdownIt-Anchor" href="#做法"></a> 做法:</h3><p>用一条线(横竖貌似都行)左右移动直到不满足约束条件或者到达边界</p><h3 id="定义数组"><a class="markdownIt-Anchor" href="#定义数组"></a> 定义数组:</h3><p><strong>le[i] [j]</strong>: 代表从(i,j)能到达的<strong>最左位置</strong></p><p><strong>ri[i] [j]</strong>: 代表从(i,j)能到达的<strong>最右位置</strong></p><p><strong>up[i] [j]</strong>: 代表从(i,j)向上扩展<strong>最长长度</strong>.</p><p>预处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">up[i][j]=<span class="number">1</span>;  <span class="comment">//向上的宽度为1</span></span><br><span class="line">ri[i][j]=le[i][j]=j; <span class="comment">//到达的最左最右都是本身</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递推公式"><a class="markdownIt-Anchor" href="#递推公式"></a> 递推公式：</h3><p>先处理le和ri数组：(以p1169举例，条件为相邻的不相同)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)&#123;<span class="comment">//处理左边界le </span></span><br><span class="line"><span class="keyword">if</span>(mp[i][j]!=mp[i][j<span class="number">-1</span>])le[i][j]=le[i][j<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//如果满足条件，那le[i][j]就可以往左挪一挪 等于le[i][j-1]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)&#123;<span class="comment">//处理右边界ri</span></span><br><span class="line"><span class="keyword">if</span>(mp[i][j]!=mp[i][j+<span class="number">1</span>])ri[i][j]=ri[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理up数组的同时，再一次处理le和ri数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; mp[i][j]!=mp[i<span class="number">-1</span>][j])&#123; <span class="comment">//向上满足条件</span></span><br><span class="line">le[i][j]=max(le[i][j],le[i<span class="number">-1</span>][j]); <span class="comment">//le代表从该坐标点 厚度/宽度 为up[i][j]的最大左边界</span></span><br><span class="line">ri[i][j]=min(ri[i][j],ri[i<span class="number">-1</span>][j]); <span class="comment">//同理</span></span><br><span class="line">up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>; <span class="comment">//向上的宽度在up[i-1][j]的基础上+1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a=ri[i][j]-le[i][j]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=min(a,up[i][j]);</span><br><span class="line">res1=max(res1,b*b);</span><br><span class="line">res2=max(res2,a*up[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h1><p><strong>[P1169 <a href="https://www.luogu.org/problemnew/show/P1169">ZJOI2007]棋盘制作</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ri[maxn][maxn],le[maxn][maxn],up[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">up[i][j]=<span class="number">1</span>;</span><br><span class="line">ri[i][j]=le[i][j]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)&#123;<span class="comment">//处理左边界le </span></span><br><span class="line"><span class="keyword">if</span>(mp[i][j]!=mp[i][j<span class="number">-1</span>])le[i][j]=le[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)&#123;<span class="comment">//处理右边界ri</span></span><br><span class="line"><span class="keyword">if</span>(mp[i][j]!=mp[i][j+<span class="number">1</span>])ri[i][j]=ri[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res1=-inf,res2=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; mp[i][j]!=mp[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">le[i][j]=max(le[i][j],le[i<span class="number">-1</span>][j]);</span><br><span class="line">ri[i][j]=min(ri[i][j],ri[i<span class="number">-1</span>][j]);</span><br><span class="line">up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a=ri[i][j]-le[i][j]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=min(a,up[i][j]);</span><br><span class="line">res1=max(res1,b*b);</span><br><span class="line">res2=max(res2,a*up[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res1&lt;&lt;<span class="built_in">endl</span>&lt;&lt;res2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong><a href="https://www.luogu.org/problemnew/show/P4147">P4147 玉蟾宫</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> le[maxn][maxn],ri[maxn][maxn],up[maxn][maxn],ans=-inf;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">char</span> tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line"><span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;F&#x27;</span>)le[i][j]=ri[i][j]=j,up[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j<span class="number">-1</span>]==<span class="string">&#x27;F&#x27;</span> &amp;&amp; mp[i][j]==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">le[i][j]=le[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j+<span class="number">1</span>]==<span class="string">&#x27;F&#x27;</span> &amp;&amp; mp[i][j]==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">ri[i][j]=ri[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; mp[i<span class="number">-1</span>][j]==<span class="string">&#x27;F&#x27;</span> &amp;&amp; mp[i][j]==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">le[i][j]=max(le[i][j],le[i<span class="number">-1</span>][j]);</span><br><span class="line">ri[i][j]=min(ri[i][j],ri[i<span class="number">-1</span>][j]);</span><br><span class="line">up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a=ri[i][j]-le[i][j]+<span class="number">1</span>;</span><br><span class="line">ans=max(ans,a*up[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans*<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>[P2701 <a href="https://www.luogu.org/problemnew/show/P2701">USACO5.3]巨大的牛棚Big Barn</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,T,ans=-inf;</span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn],ri[maxn][maxn],le[maxn][maxn],up[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;T;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">mp[x][y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!mp[i][j])le[i][j]=ri[i][j]=j,up[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!mp[i][j] &amp;&amp; !mp[i][j<span class="number">-1</span>])le[i][j]=le[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!mp[i][j] &amp;&amp; !mp[i][j+<span class="number">1</span>])ri[i][j]=ri[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; !mp[i][j] &amp;&amp; !mp[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">le[i][j]=max(le[i][j],le[i<span class="number">-1</span>][j]);</span><br><span class="line">ri[i][j]=min(ri[i][j],ri[i<span class="number">-1</span>][j]);</span><br><span class="line">up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!mp[i][j])&#123;</span><br><span class="line"><span class="keyword">int</span> a=ri[i][j]-le[i][j]+<span class="number">1</span>;</span><br><span class="line">a=min(a,up[i][j]);</span><br><span class="line">ans=max(ans,a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong><a href="https://www.luogu.org/problemnew/show/P1387">P1387 最大正方形</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=-inf;</span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn],ri[maxn][maxn],le[maxn][maxn],up[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line"><span class="keyword">if</span>(mp[i][j])le[i][j]=ri[i][j]=j,up[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] &amp;&amp; mp[i][j<span class="number">-1</span>])le[i][j]=le[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] &amp;&amp; mp[i][j+<span class="number">1</span>])ri[i][j]=ri[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; mp[i][j] &amp;&amp; mp[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">le[i][j]=max(le[i][j],le[i<span class="number">-1</span>][j]);</span><br><span class="line">ri[i][j]=min(ri[i][j],ri[i<span class="number">-1</span>][j]);</span><br><span class="line">up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j])&#123;</span><br><span class="line"><span class="keyword">int</span> a=ri[i][j]-le[i][j]+<span class="number">1</span>;</span><br><span class="line">a=min(a,up[i][j]);</span><br><span class="line">ans=max(ans,a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tarjan 求强连通分量 / 割点</title>
      <link href="2019/02/13/Tarjan%20%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E5%89%B2%E7%82%B9/"/>
      <url>2019/02/13/Tarjan%20%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E5%89%B2%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="视频讲解戳我"><a class="markdownIt-Anchor" href="#视频讲解戳我"></a> <a href="https://www.bilibili.com/video/av41752079/?p=1">视频讲解戳我</a></h1><p><strong>tarjan 求强连通分量 基础模板：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn];</span><br><span class="line"><span class="keyword">bool</span> ins[maxn];</span><br><span class="line"><span class="keyword">int</span> tim,cnt;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> color[maxn],colornum[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">++tim;</span><br><span class="line">dfn[u]=low[u]=tim;</span><br><span class="line">s.push(u);</span><br><span class="line">ins[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> tp:mp[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[tp]==<span class="number">0</span>)&#123;</span><br><span class="line">tarjan(tp);</span><br><span class="line">low[u]=min(low[u],low[tp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ins[tp]==<span class="literal">true</span>)&#123;</span><br><span class="line">low[u]=min(low[u],dfn[tp]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">while</span>(s.top()!=u)&#123;</span><br><span class="line"><span class="keyword">int</span> tp=s.top();</span><br><span class="line">s.pop();</span><br><span class="line">color[tp]=cnt;</span><br><span class="line">colornum[cnt]++;</span><br><span class="line">ins[tp]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s.pop();</span><br><span class="line">color[u]=cnt;</span><br><span class="line">colornum[cnt]++;</span><br><span class="line">ins[u]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">mp[x].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[i]==<span class="number">0</span>)&#123;</span><br><span class="line">tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>tarjan 求割点 基础模板：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> low[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn];</span><br><span class="line"><span class="keyword">int</span> tim;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">++tim;</span><br><span class="line">low[u]=dfn[u]=tim;</span><br><span class="line"><span class="keyword">int</span> child=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:mp[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[v]==<span class="number">0</span>)&#123;</span><br><span class="line">child++;</span><br><span class="line">tarjan(v,fa);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line"><span class="keyword">if</span>(u!=fa &amp;&amp; low[v]&gt;=dfn[u])&#123;</span><br><span class="line">ans.insert(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(child&gt;=<span class="number">2</span> &amp;&amp; u==fa)ans.insert(fa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">mp[x].push_back(y);</span><br><span class="line">mp[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[i]==<span class="number">0</span>)tarjan(i,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:ans)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) D. Flood Fill</title>
      <link href="2019/02/11/(CodeForces)%20D.%20Flood%20Fill/"/>
      <url>2019/02/11/(CodeForces)%20D.%20Flood%20Fill/</url>
      
        <content type="html"><![CDATA[<h3 id="视频题解戳我"><a class="markdownIt-Anchor" href="#视频题解戳我"></a> <a href="https://www.bilibili.com/video/av43216980">视频题解戳我</a></h3><p><a href="http://codeforces.com/contest/1114/problem/D">传送门</a></p><p><em><strong>题目大意：</strong></em> 选择一个初始点，同色的为一个块，每一次可以将包含起始点块的左或右的那个方块变色，问最少操作次数。</p><p><em><strong>解题思路：</strong></em> 对数据已经存在的同色块，留一个就好了，不影响结果。考虑若是1 2 3 4，都是不同色的，那要操作size-1次3次；若有1 2 1这种类似回文的，那就操作一次就行了，所有我们求出序列中最长的回文子序列长度/2 ，那就是我们可以节省的操作次数，我们可以将原序列倒序再和原序列求一个最长公共子序列即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fir;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sec;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> tp;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tp;</span><br><span class="line"><span class="keyword">if</span> (fir.empty() || fir.back() != tp)</span><br><span class="line">fir.push_back(tp);</span><br><span class="line">&#125;</span><br><span class="line">sec = fir;</span><br><span class="line">reverse(sec.begin(), sec.end());</span><br><span class="line">fir.insert(fir.begin(), <span class="number">0</span>);  <span class="comment">//为方便多插入了个0</span></span><br><span class="line">sec.insert(sec.begin(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)fir.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; (<span class="keyword">int</span>)sec.size(); ++j) &#123;</span><br><span class="line">dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span> (fir[i] == sec[j])</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//所以这里是size-2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sec.size()<span class="number">-2</span>-dp[fir.size()<span class="number">-1</span>][sec.size()<span class="number">-1</span>]/<span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) C. Trailing Loves (or L&#39;oeufs?)</title>
      <link href="2019/02/11/(CodeForces)%20C.%20Trailing%20Loves%20(or%20L&#39;oeufs)/"/>
      <url>2019/02/11/(CodeForces)%20C.%20Trailing%20Loves%20(or%20L&#39;oeufs)/</url>
      
        <content type="html"><![CDATA[<h3 id="视频题解戳我"><a class="markdownIt-Anchor" href="#视频题解戳我"></a> <a href="https://www.bilibili.com/video/av43216980">视频题解戳我</a></h3><p><a href="http://codeforces.com/contest/1114/problem/C">传送门</a></p><p><em><strong>题目大意：</strong></em> 求n！在b进制下末尾有多少个0.</p><p><em><strong>解题思路：</strong></em> n！可以化成  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><msup><mi>b</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">x*b^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> ,k就代表了末尾0的个数，x不是b的倍数，即他的末尾不是0，每乘一个b相当于左移一位多一个0（就像2进制那样，都是一样的)。所以就是求n！总有多少个b，求出b的质因子，求出所有质因子在n！中的 <strong>个数/每一组b所需这个质因子个数</strong> 最少的那个( 质因子会重复，组成一个b可能需要多个相同的t )，那就是末尾0的个数，例如 12的质因子是2 2 3，那 n！中 <strong>2的个数/2</strong> 为res1, <strong>3的个数</strong> 为res2，那末尾0的个数就是min(res1,res2); 那个的数量少就决定了12出现的次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll n,b,res=<span class="number">1e18</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll x,ll num)</span></span>&#123;  <span class="comment">//每个质因子  拥有的数量</span></span><br><span class="line">ll tp=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tp&lt;=n/x)&#123; <span class="comment">//不能用tp*x会爆精度，有多少个x，就是先看有多少个x，再x^2,x^3,直到&gt;n</span></span><br><span class="line">tp*=x;</span><br><span class="line">ans+=n/tp;</span><br><span class="line">&#125;</span><br><span class="line">res=min(res,ans/num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;b;</span><br><span class="line">ll t=b;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=t;++i)&#123; <span class="comment">//分解质因子</span></span><br><span class="line"><span class="keyword">if</span>(t%i==<span class="number">0</span>)&#123;</span><br><span class="line">ll num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(t%i==<span class="number">0</span>)&#123;</span><br><span class="line">t/=i;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">solve(i,num); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">1</span>)solve(t,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 牛客寒假算法基础集训营4 E Applese 涂颜色 (费马小定理)</title>
      <link href="2019/01/31/(Nowcoder)%20%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54%20E%20Applese%20%E6%B6%82%E9%A2%9C%E8%89%B2/"/>
      <url>2019/01/31/(Nowcoder)%20%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54%20E%20Applese%20%E6%B6%82%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这"><a class="markdownIt-Anchor" href="#视频讲解戳这"></a> <a href="https://www.bilibili.com/video/av42137189/?p=4">视频讲解戳这</a></h3><p><a href="https://ac.nowcoder.com/acm/contest/330/E">传送门</a></p><p><em><strong>解题思路</strong></em> ：很容易分析出每行只有两种涂法，每行又互不影响，所以就是求2^n % p,但是这里的n，m非常的大，不能直接求，这就需要费马小定理了，求a^n%p, 当a与p互素时，a^(p-1) = 1 (%p情况下) ，所以我们只需要知道n%(p-1)为多少，求个2的取模快速幂就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="function">ll <span class="title">mpow</span><span class="params">(ll x,ll n)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=(ans*x)%mod;</span><br><span class="line">x=(x*x)%mod;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">ll n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.size();++i)&#123;</span><br><span class="line">n=(n*<span class="number">10</span>+s1[i]-<span class="string">&#x27;0&#x27;</span>)%(mod<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mpow(<span class="number">2</span>,n)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 2513 Colored Sticks (字典树/map+并查集+欧拉路径)</title>
      <link href="2019/01/29/(POJ)%202513%20Colored%20Sticks/"/>
      <url>2019/01/29/(POJ)%202513%20Colored%20Sticks/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=2513">传送门</a></p><p><em><strong>题目大意：</strong></em> 给你两段有颜色的木棒，只有相同的颜色才能连接起来，问你最后给你的木棒最后能不能拼成一根长木棒。</p><p><em><strong>解题思路：</strong></em> 这里字典树只是返回了不同颜色的编号，用map&lt;string,int&gt;也是可以的，我们可以记录每个颜色的度，一个木棒的两个颜色可以相连，所以这里可以用并查集将不同的颜色并起来，最后如果，有颜色的祖先和其他不一样，那肯定不能连起来，反之那就要判断欧拉路径 了，如果奇数度的点为0或者2，那这个图就可以一笔走完，即可以连接成一根木棒。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tree[maxn][<span class="number">30</span>],sum[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn],num[maxn];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn],r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!tree[root][id])tree[root][id]=++tot;</span><br><span class="line">root=tree[root][id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis[root])vis[root]=++cnt;</span><br><span class="line"><span class="keyword">return</span> vis[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; ++i) &#123;</span><br><span class="line">f[i]=i;</span><br><span class="line">r[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x=f[x])<span class="keyword">return</span> f[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(r[x]&lt;r[y])f[x]=y;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">f[y]=x;</span><br><span class="line"><span class="keyword">if</span>(r[x]==r[y])r[y]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">20</span>],s2[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tp1,tp2;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s1,s2)!=EOF) &#123;</span><br><span class="line">tp1=add(s1);</span><br><span class="line">tp2=add(s2);</span><br><span class="line">num[tp1]++;</span><br><span class="line">num[tp2]++;</span><br><span class="line">unite(tp1,tp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag=find(<span class="number">1</span>),tt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]%<span class="number">2</span>)tt++;</span><br><span class="line"><span class="keyword">if</span>(find(i)!=flag) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Impossible&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tt==<span class="number">0</span>||tt==<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Possible&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Impossible&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 欧拉路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 1816 Wild Words (字典树+搜索)</title>
      <link href="2019/01/29/(POJ)%201816%20Wild%20Words/"/>
      <url>2019/01/29/(POJ)%201816%20Wild%20Words/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1816">传送门</a></p><p><em><strong>题目大意：</strong></em> 给你n个模板字符串和m个待匹配字符串，模板字符串中有‘?’可以匹配任意一个字符，‘*’可以匹配0个1个或者多个字符串。问待匹配字符串可以和哪些模板字符串相匹配。</p><p><em><strong>解题思路：</strong></em> 我们可以将‘*’和‘?’分别放在26和27两个位置，存储字符串的时候，将每个字符串的最后一个节点返回存储起来，find不在和原来一样，而是一个搜索，当搜索的位置==len，而且当且节点为字符串的尾节点(flag标记)，那把vis置成true。然后对于‘ *’，‘?’，和字符分别搜素下去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tree[maxn][<span class="number">30</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag[maxn],vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;*&#x27;</span>)id=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>)id=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">else</span> id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!tree[root][id])tree[root][id]=++tot;</span><br><span class="line">root=tree[root][id];</span><br><span class="line">&#125;</span><br><span class="line">flag[root]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> nroot,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=nroot,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">if</span>(pos&gt;len)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(pos==len &amp;&amp; flag[root]) &#123;</span><br><span class="line">vis[root]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[root][<span class="number">26</span>]) &#123; <span class="comment">//有*</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=pos; j&lt;=len; ++j) &#123;</span><br><span class="line">find(s,tree[root][<span class="number">26</span>],j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[root][<span class="number">27</span>]) &#123; <span class="comment">//有？</span></span><br><span class="line">find(s,tree[root][<span class="number">27</span>],pos+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">id=s[pos]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(s[pos]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[pos]&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;tree[root][id]) &#123;</span><br><span class="line">find(s,tree[root][id],pos+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tp[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tp);</span><br><span class="line">p[i]=add(tp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tp);</span><br><span class="line">find(tp,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[p[i]]) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Not match&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)vis[p[i]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(HDU) 1247 Hat&#39;s Words (字典树)</title>
      <link href="2019/01/29/(HDU)%201247%20Hat&#39;s%20Words/"/>
      <url>2019/01/29/(HDU)%201247%20Hat&#39;s%20Words/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1247">传送门</a></p><p><em><strong>题目大意：</strong></em> 给你字符串，输出其中能由其他两个字符串组合而成的字符串。</p><p><em><strong>解题思路：</strong></em> 建立两颗字典树，一颗正序，一颗反序，开一个vis数组，find的时候正序find一下，如果字符串的第i位有其他字符串flag标记，就vis[i]<ins>,反序find的时候，同样不过是vis[len-i-2]</ins>，标记正序的位置-1，最后从0~len-1，搜一遍，看有没有位置vis[i]&gt;=2,有的话就说明该字符串可以被其他两个字符串组合而成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tree1[maxn][<span class="number">30</span>],tree2[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="comment">//一正序，一反序 </span></span><br><span class="line"><span class="keyword">bool</span> flag1[maxn],flag2[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> tot1=<span class="number">0</span>,tot2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!tree1[root][id])tree1[root][id]=++tot1;</span><br><span class="line">root=tree1[root][id];</span><br><span class="line">&#125;</span><br><span class="line">flag1[root]=<span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!tree2[root][id])tree2[root][id]=++tot2;</span><br><span class="line">root=tree2[root][id];</span><br><span class="line">&#125;</span><br><span class="line">flag2[root]=<span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find1</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">root=tree1[root][id];</span><br><span class="line"><span class="keyword">if</span>(flag1[root])vis[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find2</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,id,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">id=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">root=tree2[root][id];</span><br><span class="line"><span class="keyword">if</span>(flag2[root])vis[len-i<span class="number">-2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">50005</span>][<span class="number">100</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ans; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[cnt++])!=EOF)&#123;</span><br><span class="line">add1(a[cnt<span class="number">-1</span>]);</span><br><span class="line">strrev(a[cnt<span class="number">-1</span>]);</span><br><span class="line">add2(a[cnt<span class="number">-1</span>]);</span><br><span class="line">strrev(a[cnt<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;++j)vis[j]=<span class="number">0</span>;</span><br><span class="line">find1(a[i]);</span><br><span class="line">strrev(a[i]);</span><br><span class="line">find2(a[i]);</span><br><span class="line">strrev(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">string</span> tp=a[i];</span><br><span class="line">ans.insert(tp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=ans.begin();it!=ans.end();++it)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stringstream切割字符串</title>
      <link href="2019/01/27/stringstream%E5%88%87%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2019/01/27/stringstream%E5%88%87%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>stringstream 是将字符串变成字符串迭代器一样，将字符串流在依次拿出，它不会将空格作为流。这样就实现了字符串的空格切割。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt; //头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str=<span class="string">&quot;nice to meet you&quot;</span>;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">stream</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(stream&gt;&gt;s)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">nice</span><br><span class="line">to</span><br><span class="line">meet</span><br><span class="line">you</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) F. MST Unification (最小生成树)</title>
      <link href="2019/01/25/(CodeForces)%20F.%20MST%20Unification/"/>
      <url>2019/01/25/(CodeForces)%20F.%20MST%20Unification/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这里"><a class="markdownIt-Anchor" href="#视频讲解戳这里"></a> <a href="https://www.bilibili.com/video/av41646140">视频讲解戳这里</a></h3><p><a href="http://codeforces.com/contest/1108/problem/F">传送门</a></p><p><em><strong>题目大意：</strong></em> 给你一个图，你可以使得一些边权值变大（一次操作+1），使得最小生成树唯一且值不变的最少操作次数。</p><p><em><strong>解题思路：</strong></em> kruscal算法的思想是每次都选权值最小的边且边的两头不在一个集合。最小生成树的值已经确定，不唯一的情况我们可以考虑到有几条权值相同的边，从中选一条或者几条起到的效果是相同的，所以我们从中选定了几条之后，后面起相同作用的我们都逐一操作数++，(为啥操纵一次就行了，因为起相同作用，那必然选权值小的，所以这些边就没啥用了，后面选中的边作用必与前面不同)代码如下，也很好懂：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn],r[maxn],n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> fr,to,cost;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> cost&lt;x.cost;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i)f[i]=i,r[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> f[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(r[x]&lt;r[y])f[x]=y;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[y]=x;</span><br><span class="line"><span class="keyword">if</span>(r[x]==r[y])r[y]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(x)==find(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruscal</span><span class="params">()</span></span>&#123;</span><br><span class="line">sort(G.begin(),G.end());</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G.size();)&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; tp;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;(<span class="keyword">int</span>)G.size()&amp;&amp;G[j].cost==G[i].cost;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!same(G[j].fr,G[j].to))tp.push_back(G[j]);</span><br><span class="line">&#125;</span><br><span class="line">i=j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)tp.size();++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!same(tp[j].fr,tp[j].to))unite(tp[j].fr,tp[j].to);</span><br><span class="line"><span class="keyword">else</span>ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">init(n);</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">G.push_back(node&#123;x,y,z&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruscal()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) E1,E2. Array and Segments (Easy / Hard version) (线段树||差分)</title>
      <link href="2019/01/25/(CodeForces)%20E1,E2Array%20and%20Segments/"/>
      <url>2019/01/25/(CodeForces)%20E1,E2Array%20and%20Segments/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这里"><a class="markdownIt-Anchor" href="#视频讲解戳这里"></a> <a href="https://www.bilibili.com/video/av41646140">视频讲解戳这里</a>（感觉我讲的还没这写的清楚）</h3><p><a href="http://codeforces.com/contest/1108">传送门</a></p><p><em><strong>题目大意：</strong></em> n个数，可选的m次操作，一次操作区间[l,r],使得区间中的数全都减1，问你选那几个操作可以使得该数组的最大值-最小值最大。E1，E2的区别就是一个数据大一个数据小。</p><ol><li><em><strong>解题思路：</strong></em> 一开始是没有头绪的，这是让你选操作而不是让你操作，但是还是很容易联想到差分和线段树操作的。我们可以考虑一顿操作之后数组中必然会出现最大值和最小值，因为操作都是-1，那每个数被操作后都有可能变成最小值，对于E1的数据我们完全可以枚举每一个数为可能的最小值，只要操作区间包含这个数，我们就操做，最后扫一遍数组求的最值相减。这为什么是对的呢，因为如果最大值在他的操作区间，那就一同减一不影响结果，不在那就是极好的。</li></ol><p>E1非常暴力的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">305</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125; t[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> mx=-inf,mi=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">mx=max(mx,a[i]);</span><br><span class="line">mi=min(mi,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t[i].l&gt;&gt;t[i].r;</span><br><span class="line">t[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> ans=mx-mi;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">tp.clear();</span><br><span class="line"><span class="built_in">memcpy</span>(b,a,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(t[j].l&lt;=i&amp;&amp;t[j].r&gt;=i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=t[j].l; k&lt;=t[j].r; ++k) &#123;</span><br><span class="line">b[k]--;</span><br><span class="line">&#125;</span><br><span class="line">tp.push_back(t[j].id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mx=-inf,mi=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">mx=max(mx,b[i]);</span><br><span class="line">mi=min(mi,b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mx-mi&gt;ans) &#123;</span><br><span class="line">v=tp;</span><br><span class="line">ans=mx-mi;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.size(); ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><em><strong>解题思路：</strong></em> E2数据n直接变成了1e5但是m还是300，直接考虑，线段树的复杂度是n*mlogn,而差分是n^2,复杂度都不容乐观，我们仔细考虑一下，如果只有一个操作区间比如 1~ 15时，我们考虑1为最低时，操作结束后，相当于1~15都考虑过了，但我们还在不辞辛劳的枚举，做了多少无用功。</li></ol><p><img src="https://img-blog.csdnimg.cn/2019012512231212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img" /></p><p>最好的应该是考虑1，2，3区间最简的，但是我们不妨直接将l1,l2,r1,r2(区间多了再去个重)加入数组，考虑这几个边界，考虑l1时，解决了1，3区间，l2时解决了2区间，虽然这样还是会有多考虑的，但是已经大大减少，而且减少了讨论，何乐不为。</p><p>线段树版代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll mx;</span><br><span class="line">ll mi;</span><br><span class="line">&#125; s[maxn&lt;&lt;<span class="number">2</span>],pres[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll add[maxn&lt;&lt;<span class="number">2</span>],preadd[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,le[maxn],ri[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">s[rt].mx=max(s[rt&lt;&lt;<span class="number">1</span>].mx,s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx);</span><br><span class="line">s[rt].mi=min(s[rt&lt;&lt;<span class="number">1</span>].mi,s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">s[rt].mx=a[l];</span><br><span class="line">s[rt].mi=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[rt]) &#123;</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>]+=add[rt],add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>].mx+=add[rt],s[rt&lt;&lt;<span class="number">1</span>].mi+=add[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx+=add[rt],s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi+=add[rt];</span><br><span class="line">add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) &#123;</span><br><span class="line">s[rt].mx+=C,s[rt].mi+=C;</span><br><span class="line">add[rt]+=C;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) &#123;</span><br><span class="line">update(L,R,C,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) &#123;</span><br><span class="line">update(L,R,C,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">ll tmx=-inf,tmi=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i);</span><br><span class="line">tmx=max(tmx,a[i]);</span><br><span class="line">tmi=min(tmi,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,le+i,ri+i);</span><br><span class="line">tt.push_back(le[i]);</span><br><span class="line">tt.push_back(ri[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(tt.begin(),tt.end());</span><br><span class="line">tt.erase(unique(tt.begin(),tt.end()),tt.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=tmx-tmi;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,tp;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">memcpy</span>(pres,s,<span class="keyword">sizeof</span>(s)),<span class="built_in">memcpy</span>(preadd,add,<span class="keyword">sizeof</span>(add));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)tt.size(); ++i) &#123;</span><br><span class="line">tp.clear();</span><br><span class="line"><span class="built_in">memcpy</span>(s,pres,<span class="keyword">sizeof</span>(pres)),<span class="built_in">memcpy</span>(add,preadd,<span class="keyword">sizeof</span>(preadd));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(le[j]&lt;=tt[i] &amp;&amp; ri[j]&gt;=tt[i]) &#123;</span><br><span class="line">update(le[j],ri[j],<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">tp.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>].mx-s[<span class="number">1</span>].mi&gt;ans) &#123;</span><br><span class="line">ans=s[<span class="number">1</span>].mx-s[<span class="number">1</span>].mi;</span><br><span class="line">v=tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.size(); ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差分版代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,le[maxn],ri[maxn],a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> mx=-inf,mi=inf,l,r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">mx=max(mx,a[i]);</span><br><span class="line">mi=min(mi,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=mx-mi;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,tp,ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;le[i]&gt;&gt;ri[i];</span><br><span class="line">v.push_back(le[i]),v.push_back(ri[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(v.begin(),v.end());</span><br><span class="line">v.erase(unique(v.begin(),v.end()),v.end());</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)v.size(); ++i) &#123;</span><br><span class="line">tp.clear();</span><br><span class="line"><span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(le[j]&lt;=v[i]&amp;&amp;ri[j]&gt;=v[i])&#123;</span><br><span class="line">tp.push_back(j);</span><br><span class="line">sum[le[j]]--;</span><br><span class="line">sum[ri[j]+<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mx=-inf,mi=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">mx=max(mx,sum[i]+a[i]);</span><br><span class="line">mi=min(mi,sum[i]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mx-mi&gt;res)&#123;</span><br><span class="line">res=mx-mi;</span><br><span class="line">ans=tp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ans.size();++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都能过，但是差分的效率比线段树高的不是一点半点(可能线段树写的烂，还有这里memcpy花的时间多)</p><p>线段树：<img src="https://img-blog.csdnimg.cn/20190125123056134.png" alt="img2" /></p><p>差分：</p><p><img src="https://img-blog.csdnimg.cn/2019012512310482.png" alt="img" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倍增 || ST-RMQ 求LCA</title>
      <link href="2019/01/24/%E5%80%8D%E5%A2%9EST-RMQ%E6%B1%82LCA/"/>
      <url>2019/01/24/%E5%80%8D%E5%A2%9EST-RMQ%E6%B1%82LCA/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这里"><a class="markdownIt-Anchor" href="#视频讲解戳这里"></a> <a href="https://www.bilibili.com/video/av41067872">视频讲解戳这里</a>(bj聚聚讲的非常好，一听就懂)</h3><p>由luogu一道模板题讲起 <a href="https://www.luogu.org/problemnew/show/P3379">传送门</a> (都9102年，这题还卡输入输出，要吸氧才能过)</p><p><em><strong>LCA：</strong></em> 求两个点的最近公共祖先</p><p><em><strong>倍增求LCA：</strong></em></p><p>有很多博客图文并茂讲的非常清楚，倍增LCA的主要思想就是，先将u，v(保证u的深度更深)两点调整到同一水平线</p><p>情况一：u==v，那就说明最近公共祖先是u，这种情况说明u,v在同一边，祖先自然是深度较浅的那一个</p><p>情况而：u，v每次往上跳2的j次方(j从小到大)，如果二者所跳到的点相同，那就不跳，反之则跳，最后就落在了最近公共祖先的下一个位置</p><p>代码结合视频看起来更香噢：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxbit=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn][maxbit],lg[maxn];</span><br><span class="line"><span class="comment">//记录每个点的深度；fa[i][j],i点往上跳2^J的父亲节点；预处理log2，向下取整</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> np,<span class="keyword">int</span> fat)</span></span>&#123; <span class="comment">//当前节点，父亲节点</span></span><br><span class="line">dep[np]=dep[fat]+<span class="number">1</span>;</span><br><span class="line">fa[np][<span class="number">0</span>]=fat;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lg[dep[np]]+<span class="number">1</span>;++j)&#123;</span><br><span class="line">fa[np][j]=fa[fa[np][j<span class="number">-1</span>]][j<span class="number">-1</span>]; </span><br><span class="line"><span class="comment">//np往上跳2^j的节点相当于先往上跳到2^(j-1)节点处再往上跳2^(j-1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[np].size();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(G[np][i]!=fat)&#123;</span><br><span class="line">dfs(G[np][i],np);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(dep[u]!=dep[v])&#123; <span class="comment">//调整平衡</span></span><br><span class="line">u=fa[u][lg[dep[u]-dep[v]]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==v)<span class="keyword">return</span> u; <span class="comment">//情况一</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[dep[u]];i&gt;=<span class="number">0</span>;--i)&#123; <span class="comment">//情况二</span></span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">G[x].push_back(y);</span><br><span class="line">G[y].push_back(x); </span><br><span class="line">&#125;</span><br><span class="line">dfs(s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lca(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯净版：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxbit=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn][maxbit],lg[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> np,<span class="keyword">int</span> fat)</span></span>&#123;</span><br><span class="line">dep[np]=dep[fat]+<span class="number">1</span>;</span><br><span class="line">fa[np][<span class="number">0</span>]=fat;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lg[dep[np]]+<span class="number">1</span>;++j)&#123;</span><br><span class="line">fa[np][j]=fa[fa[np][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[np].size();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(G[np][i]!=fat)&#123;</span><br><span class="line">dfs(G[np][i],np);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(dep[u]!=dep[v])&#123;</span><br><span class="line">u=fa[u][lg[dep[u]-dep[v]]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[dep[u]];i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">G[x].push_back(y);</span><br><span class="line">G[y].push_back(x); </span><br><span class="line">&#125;</span><br><span class="line">dfs(s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lca(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>ST-RMQ 求LCA：</strong></em></p><p>先求一个dfs序列，那求u，v的lca就是u，v在dfs序中最早出现的位置之间深度最小的那一个，st[i][j]代表i~i+2^j区间中深度最小在dfs序中的下表。</p><p>代码结合视频看起来更香噢：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxbit=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> order[maxn&lt;&lt;<span class="number">2</span>],depth[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">//深搜序列    //深度 </span></span><br><span class="line"><span class="keyword">int</span> lg[maxn&lt;&lt;<span class="number">2</span>],st[maxn&lt;&lt;<span class="number">2</span>][maxbit];</span><br><span class="line"><span class="comment">//预处理log   //st[i][j]代表i~i+2^j区间中深度最小编号 </span></span><br><span class="line"><span class="keyword">int</span> first_place[maxn];<span class="comment">//dfs序中i最早出现的下标 </span></span><br><span class="line"><span class="keyword">int</span> n,m,s,cnt=<span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>)&amp;&amp;ch!=<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> np,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">++cnt;</span><br><span class="line">first_place[np]=cnt;</span><br><span class="line">order[cnt]=np;</span><br><span class="line">depth[cnt]=dep+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[np].size();++i)&#123;</span><br><span class="line"><span class="keyword">int</span> to=G[np][i];</span><br><span class="line"><span class="keyword">if</span>(first_place[to]==<span class="number">0</span>)&#123;</span><br><span class="line">dfs(to,dep+<span class="number">1</span>);</span><br><span class="line">++cnt;</span><br><span class="line">order[cnt]=np;</span><br><span class="line">depth[cnt]=dep+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STinit</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line">st[i][<span class="number">0</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lg[cnt];++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=cnt;++i)&#123;</span><br><span class="line">a=st[i][j<span class="number">-1</span>];</span><br><span class="line">b=st[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(depth[a]&lt;depth[b])</span><br><span class="line">st[i][j]=a;</span><br><span class="line"><span class="keyword">else</span>st[i][j]=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read(),m=read(),s=read();</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn*<span class="number">2</span>;++i)lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">x=read(),y=read();</span><br><span class="line">G[x].push_back(y);</span><br><span class="line">G[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(s,<span class="number">0</span>);</span><br><span class="line">STinit();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">x=read(),y=read();</span><br><span class="line">x=first_place[x];</span><br><span class="line">y=first_place[y];</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)swap(x,y);</span><br><span class="line"><span class="keyword">int</span> k=lg[y-x];</span><br><span class="line"><span class="keyword">int</span> a=st[x][k],b=st[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k];</span><br><span class="line"><span class="keyword">if</span>(depth[a]&lt;depth[b])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,order[a]);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,order[b]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lca </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求区间内能被n整除%n==0，%n==1,%n==2....的个数</title>
      <link href="2019/01/23/%E5%8C%BA%E9%97%B4%E5%86%85%E8%83%BD%E8%A2%ABn%E6%95%B4%E9%99%A4%E4%B8%AA%E6%95%B0/"/>
      <url>2019/01/23/%E5%8C%BA%E9%97%B4%E5%86%85%E8%83%BD%E8%A2%ABn%E6%95%B4%E9%99%A4%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>以n为3举例，如果求区间[l , r]中mod3==0的个数，那就是r/3-(l-1)/3,(就是0~ r中3的倍数减去0~(l-1) 3的倍数）</p><p>那%3 == 1的个数怎么求呢，我们不妨可以将[l , r]区间中的所有数都加上2，那我们所求的%3== 1 的个数，就是在[l+2 , r+2]区间求%3==0的个数， 那就是(r+2)/3-(l+1)/3</p><p>同理%3== 2的个数，就是[l+1,r+1]中%3== 0的个数，(r+1)/3-l/3。所以求%n== m在区间里的只需转化成求%n==0即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;%3==0 :&quot;</span>&lt;&lt;r/<span class="number">3</span>-(l<span class="number">-1</span>)/<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;%3==1 :&quot;</span>&lt;&lt;(r+<span class="number">2</span>)/<span class="number">3</span>-(l+<span class="number">1</span>)/<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;%3==2 :&quot;</span>&lt;&lt;(r+<span class="number">1</span>)/<span class="number">3</span>-(l)/<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1439 【模板】最长公共子序列</title>
      <link href="2019/01/21/(Luogu)%20P1439%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>2019/01/21/(Luogu)%20P1439%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1439">传送门</a></p><p>这题怎么能叫模板呢，分明是个变种题</p><p><em><strong>解题思路：</strong></em> dp呀，这不是肯定dp嘛，dp[i] [j]指的是a串到第i个字符，b串到第j个字符的最长公共子序列，看一眼数据，还要把二维优化成一维。代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j])dp[j]=max(dp[j],dp[j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>dp[j]=max(dp[j],max(dp[j],dp[j<span class="number">-1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>50分！T的飞起(n也太大了呀)，那这题还能怎么解啊，一时之间毫无头绪。可能这题是在告诉我们不能固定思维吧；</p><p>*<strong>正解*</strong>：求最长上升子序列，这又是如何联系上的呢，由于题意说是1-n的排列(也是一开始没有注意到的),所以可以一一映射，我们只要把第一个序列映射成1，2，3…n,那在第二个序列的映射里求一个最长上升子序列就行了。就拿题目给的例子举个栗子：</p><p>3 2 1 4 5 我们将这个序列映射成1~n；那就是 3-&gt;1, 2-&gt;2, 1-&gt;3, 4-&gt;4, 5-&gt;5<br />该序列就变成了 (1) (2) (3) (4) (5)<br />1 2 3 4 5 这个序列根据映射规则同样，变成了(3) (2) (1) (4) (5)</p><p>由于映射规则相同，只需要在第二个序列中求最长上升序列 (1) (4) (5) 对应得原数就是 3，4，5这一步转化还是非常巧妙的。</p><p>这样变成了求最长上升子序列，复杂度为O(nlogn);</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,be[maxn],la[maxn],tp,len=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line">be[tp]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(be[tp]&gt;la[len])&#123;</span><br><span class="line">la[++len]=be[tp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=lower_bound(la+<span class="number">1</span>,la+len+<span class="number">1</span>,be[tp])-la;</span><br><span class="line">la[k]=be[tp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;len&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) D. Kilani and the Game (搜索)</title>
      <link href="2019/01/21/(CodeForces)%20D.%20Kilani%20and%20the%20Game/"/>
      <url>2019/01/21/(CodeForces)%20D.%20Kilani%20and%20the%20Game/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这里"><a class="markdownIt-Anchor" href="#视频讲解戳这里"></a> <a href="https://www.bilibili.com/video/av41282261">视频讲解戳这里</a></h3><p><a href="http://codeforces.com/contest/1105/problem/D">传送门</a></p><p><em><strong>题目大意：</strong></em> 一个n*m的图，有空格子’.’,也有障碍物’#’,也有各个玩家的城堡，编号对应着玩家的编号1，2，3…;每个玩家轮流开始，有他城堡的地方就可以向上下左右扩散，而且分别有一个扩散的速度si，也就是一次可以往外扩散si层，当所有玩家都不能动时，问各个玩家所有的城堡数。</p><p><em><strong>解题思路：</strong></em> 思路还是很清晰的，就是每一轮对每一个玩家宽搜一次，每个玩家宽搜si层，往外宽搜一层就是将现在队列里的元素清空一次。题目还有一个坑点就是它的si有1e9的范围，对于这种用max(m,n)代替就行了，不然会T。其他细节剪枝扣扣就行了。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p,mp[maxn][maxn],sp[<span class="number">15</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> allnum=<span class="number">0</span>; <span class="comment">//记录已经被占领的格子</span></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> dx[]= &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pbfs</span><span class="params">(<span class="keyword">int</span> np)</span> </span>&#123; <span class="comment">//每个玩家的宽搜</span></span><br><span class="line"><span class="keyword">int</span> prenum=allnum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=sp[np]; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> msize=q[np].size();</span><br><span class="line">prenum=allnum;</span><br><span class="line"><span class="keyword">while</span>(msize) &#123;</span><br><span class="line">msize--;</span><br><span class="line">node nt=q[np].front();</span><br><span class="line">q[np].pop();</span><br><span class="line"><span class="keyword">int</span> nx=nt.x,ny=nt.y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> tx=nx+dx[i],ty=ny+dy[i];</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">1</span>&amp;&amp;tx&lt;=n&amp;&amp;ty&gt;=<span class="number">1</span>&amp;&amp;ty&lt;=m&amp;&amp;mp[tx][ty]==<span class="number">0</span>) &#123;</span><br><span class="line">allnum++;</span><br><span class="line">mp[tx][ty]=np;</span><br><span class="line">q[np].push(node &#123;tx,ty&#125;);</span><br><span class="line">ans[np]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(prenum==allnum)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123; <span class="comment">//控制游戏的轮数</span></span><br><span class="line"><span class="keyword">if</span>(allnum==n*m)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> prenum=allnum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i])pbfs(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(allnum==prenum)<span class="keyword">return</span>;</span><br><span class="line">bfs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line"><span class="keyword">int</span> ms=max(n,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;sp[i];</span><br><span class="line">sp[i]=min(sp[i],ms);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tp;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">mp[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">mp[i][j]=<span class="number">-1</span>;</span><br><span class="line">allnum++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t=tp-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">mp[i][j]=t;</span><br><span class="line">q[t].push(node &#123;i,j&#125;);</span><br><span class="line">allnum++;</span><br><span class="line">ans[t]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) C.Ayoub and Lost Array (线性dp)</title>
      <link href="2019/01/21/(CodeForces)%20C.Ayoub%20and%20Lost%20Array/"/>
      <url>2019/01/21/(CodeForces)%20C.Ayoub%20and%20Lost%20Array/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这里"><a class="markdownIt-Anchor" href="#视频讲解戳这里"></a> <a href="https://www.bilibili.com/video/av41282261">视频讲解戳这里</a></h3><p><a href="http://codeforces.com/contest/1105/problem/C">传送门</a></p><p><em><strong>题目大意：</strong></em> 一个数组的大小为n，每个元素的的取值范围是[l,r];然后数组中所有数的和能被3整除，求这样数组的个数，结果mod 1e9+7.</p><p><em><strong>解题思路：</strong></em> 这题一看有两种想法，一是线性dp，二是组合数，最后还是用线性dp解决了这道题，dp的思路也挺简单的dp[i][j]代表数组里有i个数，和模3为j的个数，我们可以事先将[l,r]区间中mod3为0，1，2的数算出来，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">50</span>;</span><br><span class="line">ll cnt[<span class="number">5</span>];</span><br><span class="line">ll dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n,l,r;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">cnt[i]+=r/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(r%<span class="number">3</span>==<span class="number">1</span>) cnt[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">if</span>(r%<span class="number">3</span>==<span class="number">2</span>) cnt[<span class="number">1</span>]++,cnt[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">cnt[i]-=(l<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>((l<span class="number">-1</span>)%<span class="number">3</span>==<span class="number">1</span>) cnt[<span class="number">1</span>]--;</span><br><span class="line"><span class="keyword">if</span>((l<span class="number">-1</span>)%<span class="number">3</span>==<span class="number">2</span>) cnt[<span class="number">1</span>]--,cnt[<span class="number">2</span>]--;</span><br><span class="line"></span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>]=cnt[<span class="number">3</span>],dp[<span class="number">1</span>][<span class="number">1</span>]=cnt[<span class="number">1</span>],dp[<span class="number">1</span>][<span class="number">2</span>]=cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)  &#123;</span><br><span class="line">dp[i][<span class="number">0</span>]=(dp[i<span class="number">-1</span>][<span class="number">0</span>]*cnt[<span class="number">3</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>]*cnt[<span class="number">2</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>]*cnt[<span class="number">1</span>])%mod;</span><br><span class="line"> dp[i][<span class="number">1</span>]=(dp[i<span class="number">-1</span>][<span class="number">0</span>]*cnt[<span class="number">1</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>]*cnt[<span class="number">3</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>]*cnt[<span class="number">2</span>])%mod;</span><br><span class="line">dp[i][<span class="number">2</span>]=(dp[i<span class="number">-1</span>][<span class="number">0</span>]*cnt[<span class="number">2</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>]*cnt[<span class="number">1</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>]*cnt[<span class="number">3</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n][<span class="number">0</span>]%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 牛客练习赛18 E 出题人的数组（数学）</title>
      <link href="2019/01/19/(Nowcoder)%20%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B18%20E%20%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E6%95%B0%E7%BB%84/"/>
      <url>2019/01/19/(Nowcoder)%20%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B18%20E%20%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="视频题解戳这里"><a class="markdownIt-Anchor" href="#视频题解戳这里"></a> <a href="https://www.bilibili.com/video/av41139100">视频题解戳这里</a></h3><p><s>就是调了一手bug 丧</s></p><p><a href="https://ac.nowcoder.com/acm/contest/358/E">传送门</a></p><p><em><strong>解题思路：</strong></em> 直接单个考虑给答案的贡献，简单的将大的放前，直接归并是不对的，(比如A数组1，2222，2222，2222；B数组2，2，2，2)，这个题目重新考虑是平均值的影响，直接戳视频吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll a[maxn],b[maxn],n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll s;</span><br><span class="line">ll num;</span><br><span class="line">&#125; ta[maxn],tb[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(node a,node b)</span> </span>&#123; <span class="comment">//a比b的平均值大返回true</span></span><br><span class="line"><span class="keyword">return</span> a.s*b.num &gt; a.num*b.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> nn=<span class="number">0</span>,mm=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">ta[++nn]=node &#123;a[i],<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(nn&gt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(pd(ta[nn],ta[nn<span class="number">-1</span>])) &#123;</span><br><span class="line">ta[nn<span class="number">-1</span>].num+=ta[nn].num,ta[nn<span class="number">-1</span>].s+=ta[nn].s;</span><br><span class="line">nn--;</span><br><span class="line">&#125; <span class="keyword">else</span><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">tb[++mm]=node &#123;b[i],<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(mm&gt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(pd(tb[mm],tb[mm<span class="number">-1</span>])) &#123;</span><br><span class="line">tb[mm<span class="number">-1</span>].num+=tb[mm].num,tb[mm<span class="number">-1</span>].s+=tb[mm].s;</span><br><span class="line">mm--;</span><br><span class="line">&#125; <span class="keyword">else</span><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll i=<span class="number">1</span>,j=<span class="number">1</span>,cnt=<span class="number">1</span>,xa=<span class="number">1</span>,xb=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=nn &amp;&amp; j&lt;=mm) &#123;</span><br><span class="line"><span class="keyword">if</span>(pd(ta[i],tb[j])) &#123; <span class="comment">//a的均值大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=ta[i].num; ++k) &#123;</span><br><span class="line">ans+=a[xa++]*(cnt++);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=tb[j].num; ++k) &#123;</span><br><span class="line">ans+=b[xb++]*(cnt++);</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=nn) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=ta[i].num; ++k) &#123;</span><br><span class="line">ans+=a[xa++]*(cnt++);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=mm) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=tb[j].num; ++k) &#123;</span><br><span class="line">ans+=b[xb++]*(cnt++);</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P2258 子矩阵 (搜索+动态规划)</title>
      <link href="2019/01/18/(Luogu)%20P2258%20%E5%AD%90%E7%9F%A9%E9%98%B5/"/>
      <url>2019/01/18/(Luogu)%20P2258%20%E5%AD%90%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="视频讲解戳这里"><a class="markdownIt-Anchor" href="#视频讲解戳这里"></a> <a href="https://www.bilibili.com/video/av40748087?from=search&amp;seid=18207415671102946520">视频讲解戳这里</a> （bj聚聚讲的可好了）</h3><p><a href="https://www.luogu.org/problemnew/show/P2258">传送门</a></p><p><em><strong>解题思路：</strong></em> 这题一看和最大子矩阵很类似。但是要比那题更加的复杂，考虑时有诸多细节。思路就是先把行确定下来，这里用一个搜索，然后再去考虑列，考虑列的时候，我们需要预处理我们所选行 的竖直的分值（即题目定义的相邻元素差的绝对值）和横置的分值。需要两个数组，横置 line[i] [j]代表 第i列和第j列横向的之差的绝对值之和；竖直col[i],代表第i列竖直之差的绝对值之和。预处理结束之后，就是一个dp了。 dp[i] [j] 表示共选择了j列，最后一列是i列的最小值</p><p>递推式就是： dp[i][j]=min(dp[i] [j],dp[k] [j-1]+col[i]+line[k] [i]); 丑陋的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,c,ans=inf;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,choose[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i][j] 选择了j列，最后一列是i列的最小值 </span></span><br><span class="line"><span class="keyword">int</span> line[maxn][maxn],col[maxn];</span><br><span class="line"><span class="comment">//  行               列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//预处理竖直的列 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123; </span><br><span class="line">col[j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=s;++i)&#123;</span><br><span class="line">col[j]+=<span class="built_in">abs</span>(a[choose[i]][j]-a[choose[i<span class="number">-1</span>]][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理行 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)&#123;</span><br><span class="line">line[j][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=s;++k)&#123;</span><br><span class="line">line[j][i]+=<span class="built_in">abs</span>(a[choose[k]][i]-a[choose[k]][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123; <span class="comment">//再行确定的情况下 考虑列 </span></span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">dp[i][<span class="number">1</span>]=col[i];</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">ans=min(ans,dp[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=c;++j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=j;i&lt;=m &amp;&amp; m-i+j&gt;=c;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&lt;i;++k)&#123;</span><br><span class="line">dp[i][j]=min(dp[i][j],dp[k][j<span class="number">-1</span>]+col[i]+line[k][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==c)</span><br><span class="line">ans=min(ans,dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123; <span class="comment">//搜索所有行的组合 </span></span><br><span class="line"><span class="keyword">if</span>(num==s)&#123;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=step;num+n-i+<span class="number">1</span>&gt;=s;++i)&#123;</span><br><span class="line">num++;</span><br><span class="line">choose[num]=i;</span><br><span class="line">dfs(i+<span class="number">1</span>);</span><br><span class="line">num--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1463 [POI2002][HAOI2007]反素数 (打表 || 搜索)</title>
      <link href="2019/01/17/(Luogu)%20P1463%20%5BPOI2002%5D%5BHAOI2007%5D%E5%8F%8D%E7%B4%A0%E6%95%B0/"/>
      <url>2019/01/17/(Luogu)%20P1463%20%5BPOI2002%5D%5BHAOI2007%5D%E5%8F%8D%E7%B4%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1463">传送门</a></p><p><em><strong>解题思路：</strong></em> 这题一看数据就不可能暴力的，但是我们可以先打个表试一下，发现题目所求的反质数分布非常的稀疏。所以解法一就是打表，打表有3种方法：</p><p><strong>解法一：</strong></p><ol><li><p>直接暴力枚举因子(这种应该没什么人去做吧，太慢了)</p></li><li><p>枚举到sqrt(i),但是对于这么大的数据显然还是太慢了。</p></li><li><p>一个性质，约数个数定理：一个正整数n，可以分解成 <img src="https://latex.codecogs.com/gif.latex?p1%5E%7Bk1%7D*p2%5E%7Bk2%7D*p3%5E%7Bk3%7D*...pn%5E%7Bkn%7D" alt="img" /> (p1,p2…pn为素数)那这个数的约数个数为</p></li></ol><p>(k1+1)*(k2+1)…(kn+1),这个不难理解，考虑p1^k1 它的约数有 p1^0 ~ p1^k1 共(k1+1)个，一直到pn<sup>kn有(kn+1)个约数，根据乘法原理那n的约数个数就是(k1+1)*(k2+1)…(kn+1)，因为每个单独的部分元素(如p1</sup>2)都是n的约数，而且由于是素数的次方相乘起来唯一不重复，那搭配起来也是n的约数。</p><p>考虑到题意反质数就是约数相同的情况下数最小的那一个，那就是(k1+1)*(k2+1)…(kn+1)定，那我想要这个数小，那肯定是把大的k给小的p。所以我们可以得出k1，k2…kn一定是不递增的。当k1，k2…kn都取1时，前十个素数相乘已经大于2e9了，所以考虑前十个素数就行了。</p><p>先看打表的代码，只要表打出来了，那就非常简单明了了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=maxn<span class="number">-5</span>;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> tp=i,num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;++j)&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tp%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">tp/=prime[j];</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">num=num*(cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&gt;count)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">count=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">68</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">48</span>, <span class="number">60</span>, <span class="number">120</span>, <span class="number">180</span>,</span><br><span class="line"> <span class="number">240</span>, <span class="number">360</span>, <span class="number">720</span>, <span class="number">840</span>, <span class="number">1260</span>, <span class="number">1680</span>, <span class="number">2520</span>, <span class="number">5040</span>, <span class="number">7560</span>, <span class="number">10080</span>, </span><br><span class="line"> <span class="number">15120</span>, <span class="number">20160</span>, <span class="number">25200</span>, <span class="number">27720</span>, <span class="number">45360</span>, <span class="number">50400</span>, <span class="number">55440</span>, <span class="number">83160</span>, <span class="number">110880</span>, </span><br><span class="line"> <span class="number">166320</span>, <span class="number">221760</span>, <span class="number">277200</span>, <span class="number">332640</span>, <span class="number">498960</span>, <span class="number">554400</span>, <span class="number">665280</span>, <span class="number">720720</span>, </span><br><span class="line"> <span class="number">1081080</span>, <span class="number">1441440</span>, <span class="number">2162160</span>, <span class="number">2882880</span>, <span class="number">3603600</span>, <span class="number">4324320</span>, <span class="number">6486480</span>, </span><br><span class="line"> <span class="number">7207200</span>, <span class="number">8648640</span>, <span class="number">10810800</span>, <span class="number">14414400</span>, <span class="number">17297280</span>, <span class="number">21621600</span>, <span class="number">32432400</span>, </span><br><span class="line"> <span class="number">36756720</span>, <span class="number">43243200</span>, <span class="number">61261200</span>, <span class="number">73513440</span>, <span class="number">110270160</span>, <span class="number">122522400</span>, </span><br><span class="line"> <span class="number">147026880</span>, <span class="number">183783600</span>, <span class="number">245044800</span>, <span class="number">294053760</span>, <span class="number">367567200</span>, <span class="number">551350800</span>, </span><br><span class="line"> <span class="number">698377680</span>, <span class="number">735134400</span>, <span class="number">1102701600</span>, <span class="number">1396755360</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">67</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=n)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解法二：</strong></p><p>搜索也是用的约数定理，然后利用k1，k2…kn一定是不递增的这一条件，枚举各个质数的指数，还是很好懂的，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll prime[<span class="number">15</span>]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>&#125;; </span><br><span class="line">ll num[<span class="number">15</span>];</span><br><span class="line">ll ans,n,apnum;</span><br><span class="line"><span class="comment">//ans表示答案，apnum表示答案的约数个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll step,ll pnum,ll state)</span></span>&#123;<span class="comment">//第几个质数，现在的约数个数，现在的值 </span></span><br><span class="line"><span class="keyword">if</span>(step&gt;=<span class="number">12</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(pnum&gt;apnum || (pnum==apnum&amp;&amp;state&lt;ans))&#123;</span><br><span class="line">ans=state,apnum=pnum;</span><br><span class="line">&#125;</span><br><span class="line">num[step]=<span class="number">0</span>; <span class="comment">//每一轮都要从0开始 </span></span><br><span class="line"><span class="keyword">while</span>(state*prime[step]&lt;=n &amp;&amp; num[step]+<span class="number">1</span>&lt;=num[step<span class="number">-1</span>])&#123;</span><br><span class="line">num[step]++;</span><br><span class="line">state*=prime[step];</span><br><span class="line">dfs(step+<span class="number">1</span>,pnum*(num[step]+<span class="number">1</span>),state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">num[<span class="number">0</span>]=inf;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 打表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1052 过河 (状压dp)</title>
      <link href="2019/01/16/(Luogu)%20P1052%20%E8%BF%87%E6%B2%B3/"/>
      <url>2019/01/16/(Luogu)%20P1052%20%E8%BF%87%E6%B2%B3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1052">传送门</a></p><p><em><strong>解题思路</strong></em> ：这题的状态转移方程还是很好想的，dp[i]代表跳到第i点踩到的最少石头，dp[i]=dp[i-j]+stone[i],j位距离，即跳j个距离到i点，stone[i]表示这里是否有石子。但是这里l非常大，只是循环也会超时，所以需要状态压缩。这里压缩的方法有90缩，72缩（<a href="https://www.luogu.org/problemnew/solution/P1052">戳我</a>）还有2520缩，这里我写的是2520缩，这个很好理解，2520是1~10的最小公倍数，就是从i点出发，每个点都可以到达距离+2520处，之后又会出现重复的情况，所以只要对2520取余就行了，最大也就是2520*100。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">2520</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> stone[maxn],a[maxn];</span><br><span class="line"><span class="keyword">int</span> l,s,t,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;s&gt;&gt;t&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-a[i<span class="number">-1</span>]&gt;mod)&#123; <span class="comment">//距离大了</span></span><br><span class="line">k+=(a[i]-a[i<span class="number">-1</span>])-(a[i]-a[i<span class="number">-1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line">stone[a[i]-k]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mod*m;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=t;j&gt;=s;--j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i-j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">dp[i]=min(dp[i-j]+stone[i],dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[mod*m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForce) F. Ivan and Burgers(线性基+离线)</title>
      <link href="2019/01/15/(CodeForce)%20F.%20Ivan%20and%20Burgers/"/>
      <url>2019/01/15/(CodeForce)%20F.%20Ivan%20and%20Burgers/</url>
      
        <content type="html"><![CDATA[<h3 id="视频题解戳这里"><a class="markdownIt-Anchor" href="#视频题解戳这里"></a> <a href="https://www.bilibili.com/video/av40713052">视频题解戳这里</a></h3><p><a href="https://blog.csdn.net/TDD_Master/article/details/86489939">传送门</a></p><p><em><strong>题目大意</strong></em> ：有n个汉堡店，每个店里最贵的汉堡是ci元，q次询问，从l到r，所能花费的最多钱数（结束与开始时的金额差），但是花钱不是直接的加减，规则是手里有d元，要花费c元，那支付只后，他还有d^c元。开始是他有非常多个1（rich）。</p><p><em><strong>解题思路</strong></em> ：其实这个题稍微思考一下就可以转化成求（l,r）区间的最大异或值，这个值和他初始的钱异或，差值就是这个数。然后又要多次查询，时间复杂度如何降下来呢，就需要用到线性基的知识了（<a href="https://www.cnblogs.com/vb4896/p/6149022.html">不懂戳我</a>）主要是用到了一个关键的性质，a和b异或的值域和将a，b之一替换成a^b（a异或b）的值域是一样的。</p><p>接下离线操作，从小到大依此处理第i个汉堡店，解决右边界为i的查询。所以用线性基的时候就要多加一句</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f[j].b&lt;tmp.b)&#123; <span class="comment">//b的值是出现的位置i</span></span><br><span class="line">swap(f[j],tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 使得二进制第j位为1的数 出现的位置最大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(f[j].b&gt;=tp.a)&#123;</span><br><span class="line">ans[tp.b]=max(ans[tp.b],ans[tp.b]^f[j].a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在判断区间时，只要查询的左边界l是 小于 使得第j位为1的数的位置（好绕口）那就说明这个数可以被考虑，就try一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> tt=<span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,c[maxn],ans[maxn],q,l,r;</span><br><span class="line">node f[tt];</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; que[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">que[r].push_back(node&#123;l,i&#125;); <span class="comment">//记录左边界和第几组询问 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//f[i].a表示可以使得i位变成1的数，f[i].b表示满足条件的坐标最大的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">node tmp=node&#123;c[i],i&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=tt<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123; <span class="comment">//每一个的每一位取出 ，从高位到低位</span></span><br><span class="line"><span class="keyword">if</span>(tmp.a&gt;&gt;j&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j].a==<span class="number">0</span>)&#123;</span><br><span class="line">f[j]=tmp;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f[j].b&lt;tmp.b)&#123; <span class="comment">//该位置已经为有数，并且这个数也可以使得为 1</span></span><br><span class="line">swap(f[j],tmp);</span><br><span class="line">&#125;</span><br><span class="line">tmp.a^=f[j].a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(<span class="keyword">int</span>)que[i].size();++k)&#123; <span class="comment">//处理掉以i为右边界的查询</span></span><br><span class="line">node tp=que[i][k];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=tt<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j].b&gt;=tp.a)&#123;</span><br><span class="line">ans[tp.b]=max(ans[tp.b],ans[tp.b]^f[j].a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForce) E. Andrew and Taxi(二分+拓扑)</title>
      <link href="2019/01/14/(CodeForce)%20E.%20Andrew%20and%20Taxi/"/>
      <url>2019/01/14/(CodeForce)%20E.%20Andrew%20and%20Taxi/</url>
      
        <content type="html"><![CDATA[<h3 id="视频题解戳这里"><a class="markdownIt-Anchor" href="#视频题解戳这里"></a> <a href="https://www.bilibili.com/video/av40713052">视频题解戳这里</a></h3><p><a href="http://codeforces.com/contest/1100/problem/E">传送门</a></p><p><em><strong>题目大意：</strong></em> 一个有向图，给你m条有向边，每条边都有权值（即修改这条边方向所要付出的代价），如果确定一个代价v,则权值小于等于vv的边都可以被修改。求使得图变得没有环所需要的最小v，改变边的个数，和一种方案。</p><p><em><strong>解题思路：</strong></em> 一开始有往二分这方面考虑，但是却不知如何二分，这个题二分的是最小代价，那判断条件是什么呢，小于等于代价v的边相当于无向边，我们可以随意控制其方向，但是大于v的那一部分我们无法掌控，有环那就是无法改变的，所以我们拓扑排序只去考虑那些大于v的边，如果最后还有点的入度不为0，那就是说明有环，二分的代价太低了，l=mid+1，反之r=mid-1。最后如何输出方案呢，我们需要一个top数组，这个数组代表在拓扑序列里的先后顺序，越后输出的越大。我们可以根据这个序列去判断那些边应该被翻转，举个例子，边edge，edge的起点s指向edge的终点e,而且满足edge的权值w小于v。但是在拓扑序列里，top[s]&gt;top[e],(我们可以知道由s-&gt;e的边，在拓扑里肯定s在e之前的)，那这条边的顺序就要被我们交换顺序。这个题也算基本解决了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,in[maxn],top[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ee[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e,w;</span><br><span class="line">&#125;ed[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">ee[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[i].w&gt;mid)&#123;</span><br><span class="line">ee[ed[i].s].push_back(ed[i].e);</span><br><span class="line">in[ed[i].e]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i])&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">top[i]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ee[u].size();++i)&#123;</span><br><span class="line"><span class="keyword">int</span> t=ee[u][i];</span><br><span class="line">--in[t];</span><br><span class="line"><span class="keyword">if</span>(!in[t])q.push(t),top[t]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ed[i].s&gt;&gt;ed[i].e&gt;&gt;ed[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=inf,res;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pd(mid))r=mid<span class="number">-1</span>,res=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pd(res); <span class="comment">//抱住top序列是由res跑出 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[i].w&lt;=res &amp;&amp; top[ed[i].s] &gt; top[ed[i].e])&#123;</span><br><span class="line">ans.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(<span class="keyword">int</span>)ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ans.size();++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学习于https://blog.csdn.net/j2_o2/article/details/86469472</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 拓扑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces) Round 532 (Div. 2) A,B,C,D,E,F</title>
      <link href="2019/01/14/(CodeForces)%20Round532/"/>
      <url>2019/01/14/(CodeForces)%20Round532/</url>
      
        <content type="html"><![CDATA[<h3 id="视频题解戳这里"><a class="markdownIt-Anchor" href="#视频题解戳这里"></a> <a href="https://www.bilibili.com/video/av40713052">视频题解戳这里</a></h3><h3 id="a-roman-and-browser"><a class="markdownIt-Anchor" href="#a-roman-and-browser"></a> A. Roman and Browser</h3><p><a href="http://codeforces.com/contest/1100/problem/A">传送门</a></p><p><em><strong>解题思路：</strong></em> 暴力枚举就可以出答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,xx=<span class="number">0</span>,yy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">xx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">yy++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> tx=xx,ty=yy;</span><br><span class="line"><span class="built_in">memcpy</span>(b,a,<span class="number">1000</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=k)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]==<span class="number">1</span>)&#123;</span><br><span class="line">ty--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tx--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=max(ans,<span class="built_in">abs</span>(tx-ty));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-build-a-contest"><a class="markdownIt-Anchor" href="#b-build-a-contest"></a> B. Build a Contest</h3><p><a href="http://codeforces.com/contest/1100/problem/B">传送门</a></p><p><em><strong>解题思路：</strong></em> 这也是一个比较简单的模拟题，只要一直记录现在不同数的个数，和不同种类的数出现的次数，就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> difnum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> difnum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[a[i]]==<span class="number">0</span>)&#123;</span><br><span class="line">difnum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num[a[i]]++;</span><br><span class="line"><span class="keyword">if</span>(difnum==n)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">num[j]--;</span><br><span class="line"><span class="keyword">if</span>(num[j]==<span class="number">0</span>)&#123;</span><br><span class="line">difnum--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-nn-and-the-optical-illusion"><a class="markdownIt-Anchor" href="#c-nn-and-the-optical-illusion"></a> C. NN and the Optical Illusion</h3><p><a href="http://codeforces.com/contest/1100/problem/C">传送门</a></p><p><em><strong>解题思路:</strong></em>   一道非常简单的几何题，自己画个图用个余弦定理建立个等式就可以求出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> n,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;r;</span><br><span class="line"><span class="keyword">double</span> res=r*(<span class="built_in">sin</span>(pi/n))/(<span class="number">1</span>-<span class="built_in">sin</span>(pi/n));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.7lf\n&quot;</span>,res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d-dasha-and-chess"><a class="markdownIt-Anchor" href="#d-dasha-and-chess"></a> D. Dasha and Chess</h3><p><a href="http://codeforces.com/contest/1100/problem/D">传送门</a></p><p><em><strong>解题思路：</strong></em> 这是一道交互题，而且题干相当的长。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> nums[maxn];</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> xx[maxn];</span><br><span class="line"><span class="keyword">int</span> yy[maxn];</span><br><span class="line"><span class="keyword">int</span> nx, ny;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_location</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; nx &amp;&amp; y &lt; ny) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; nx &amp;&amp; y &gt; ny) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; nx &amp;&amp; y &gt; ny) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; nx &gt;&gt; ny;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">666</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; xx[i] &gt;&gt; yy[i];</span><br><span class="line">G[xx[i]][yy[i]] = <span class="number">1</span>;</span><br><span class="line">nums[get_location(xx[i], yy[i])]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmpsum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = nums[i] + nums[(i+<span class="number">1</span>)%<span class="number">4</span>] + nums[(i+<span class="number">3</span>)%<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span> (tmp &gt; tmpsum) &#123;</span><br><span class="line">tmpsum = tmp;</span><br><span class="line">flag = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> tx = nx + dx[flag];</span><br><span class="line"><span class="keyword">int</span> ty = ny + dy[flag];</span><br><span class="line"><span class="keyword">if</span> (tx &lt; <span class="number">1</span> || tx &gt; <span class="number">999</span>)</span><br><span class="line">tx = nx;</span><br><span class="line"><span class="keyword">if</span> (ty &lt; <span class="number">1</span> || ty &gt; <span class="number">999</span>)</span><br><span class="line">ty = ny;</span><br><span class="line"><span class="keyword">if</span> (G[tx][ty] == <span class="number">1</span>)</span><br><span class="line">ty = ny;</span><br><span class="line">nx = tx;</span><br><span class="line">ny = ty;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; nx &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ny &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>.flush();</span><br><span class="line"><span class="keyword">int</span> k, cx, cy;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; cx &gt;&gt; cy;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">G[xx[k]][yy[k]] = <span class="number">0</span>;</span><br><span class="line">G[cx][cy] = <span class="number">1</span>;</span><br><span class="line">xx[k] = cx;</span><br><span class="line">yy[k] = cy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e-andrew-and-taxi"><a class="markdownIt-Anchor" href="#e-andrew-and-taxi"></a> E. Andrew and Taxi</h3><p>这题打cf时没有做出来，赛后才知道这是一道二分+拓扑，单独写一下。</p><p><a href="https://blog.csdn.net/TDD_Master/article/details/86480160">传送</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,in[maxn],top[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ee[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e,w;</span><br><span class="line">&#125;ed[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">ee[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[i].w&gt;mid)&#123;</span><br><span class="line">ee[ed[i].s].push_back(ed[i].e);</span><br><span class="line">in[ed[i].e]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i])&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">top[i]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ee[u].size();++i)&#123;</span><br><span class="line"><span class="keyword">int</span> t=ee[u][i];</span><br><span class="line">--in[t];</span><br><span class="line"><span class="keyword">if</span>(!in[t])q.push(t),top[t]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ed[i].s&gt;&gt;ed[i].e&gt;&gt;ed[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=inf,res;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pd(mid))r=mid<span class="number">-1</span>,res=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pd(res); <span class="comment">//抱住top序列是由res跑出 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[i].w&lt;=res &amp;&amp; top[ed[i].s] &gt; top[ed[i].e])&#123;</span><br><span class="line">ans.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(<span class="keyword">int</span>)ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ans.size();++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="f-ivan-and-burgers"><a class="markdownIt-Anchor" href="#f-ivan-and-burgers"></a> F. Ivan and Burgers</h3><p><a href="https://blog.csdn.net/TDD_Master/article/details/86489939">传送</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> tt=<span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,c[maxn],ans[maxn],q,l,r;</span><br><span class="line">node f[tt];</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; que[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">que[r].push_back(node&#123;l,i&#125;); <span class="comment">//记录左边界和第几组询问 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//f[i].a表示可以使得i位变成1的数，f[i].b表示满足条件的坐标最大的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">node tmp=node&#123;c[i],i&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=tt<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123; <span class="comment">//每一个的每一位取出 ，从高位到低位</span></span><br><span class="line"><span class="keyword">if</span>(tmp.a&gt;&gt;j&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j].a==<span class="number">0</span>)&#123;</span><br><span class="line">f[j]=tmp;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f[j].b&lt;tmp.b)&#123; <span class="comment">//该位置已经为有数，并且这个数也可以使得为 1</span></span><br><span class="line">swap(f[j],tmp);</span><br><span class="line">&#125;</span><br><span class="line">tmp.a^=f[j].a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(<span class="keyword">int</span>)que[i].size();++k)&#123; <span class="comment">//处理掉以i为右边界的查询</span></span><br><span class="line">node tp=que[i][k];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=tt<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j].b&gt;=tp.a)&#123;</span><br><span class="line">ans[tp.b]=max(ans[tp.b],ans[tp.b]^f[j].a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 3279 Fliptile</title>
      <link href="2018/12/29/(POJ)%203279%20Fliptile/"/>
      <url>2018/12/29/(POJ)%203279%20Fliptile/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3279">传送门</a></p><p><em><strong>题目大意：</strong></em> 有一个m*n的格子，格子一面是白色的，一面是黑色的。现在需要将所有的格子都翻成白色的，但是由于牛蹄子很大，所以他每次翻一个都会影响到上下左右四个，现在让你求出最少的翻转次数，输出翻转矩阵。</p><p><em><strong>解题思路：</strong></em> 这个题虽然数据很小，但是如果我们简单的考虑每个格子的翻转情况，那会有2^mn种情况，直接pass，同一个格子当然是只能翻转一次，翻多次这是多余的。由于第一行的格子可以被下一行或者左右影响，那我们不如枚举第一行的所有翻转情况，那第二行的翻转情况就可以根据第一行来了，因为能修改第一行的只有第二行 了，如果第二行不去修改第一行黑色格子，那任务是不可能完成的，这显而易见，这样我们一行一行的考虑下去，最后再判断一下最后一行是否全白就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> temp[maxn][maxn],ans[maxn][maxn];</span><br><span class="line"><span class="comment">// 临时矩阵 结果矩阵</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>]= &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">5</span>]= &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=a[x][y],i;<span class="comment">//格子本身的状态在加上5个地方翻转的状态，%2就可知现在状态</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nx=x+dx[i],ny=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&gt;=<span class="number">0</span> &amp;&amp; nx&lt;m &amp;&amp; ny&gt;=<span class="number">0</span> &amp;&amp; ny&lt;n)</span><br><span class="line">s+=temp[nx][ny];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//白色状态</span></span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//黑色状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;m; ++i) &#123;<span class="comment">//从第二行开始</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(!pd(i<span class="number">-1</span>,j)) &#123;</span><br><span class="line">temp[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断最后一行是否全部白色；</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!pd(m<span class="number">-1</span>,i)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tnum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; ++j) &#123;</span><br><span class="line">tnum+=temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tnum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n)!=EOF) &#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=inf;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1</span>&lt;&lt;n; ++i) &#123; <span class="comment">//二进制枚举第一行的操作</span></span><br><span class="line"><span class="built_in">memset</span>(temp,<span class="number">0</span>,<span class="keyword">sizeof</span>(temp));</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; ++j) &#123;</span><br><span class="line">temp[<span class="number">0</span>][n-j<span class="number">-1</span>]=i&gt;&gt;j&amp;<span class="number">1</span>; <span class="comment">//将操作逐一取出放进数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num=solve();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(num&gt;=<span class="number">0</span>&amp;&amp;res&gt;num) &#123;</span><br><span class="line">res=num;</span><br><span class="line"><span class="built_in">memcpy</span>(ans,temp,<span class="keyword">sizeof</span>(temp));</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res==inf)<span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i][j]);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 3276 Face The Right Way(模拟+尺取)</title>
      <link href="2018/12/27/(POJ)%203276%20Face%20The%20Right%20Way/"/>
      <url>2018/12/27/(POJ)%203276%20Face%20The%20Right%20Way/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3276">传送门</a></p><p><em><strong>题目大意：</strong></em>  N头牛排成了一列，但有的朝前有的朝后，现在农夫买了一台机器，但是这台机器购买时必须要设置一个固定的K，每次操作都会使K头连续的牛转向，求出让所有的牛能朝向前的最少次数M和对应的K。</p><p><em><strong>解题思路：</strong></em> 显然对同一个区间翻转一次就行了，翻转多次都是多余的。我们需要从最左边的牛开始翻转，因为它只属于一个区间，如果它朝后，那就不得不翻转。所以这个题我们可以去枚举长度k去解决。但是如果我们朴素的求解，枚举每一个k，在枚举区间的起点和翻转区间的k头牛，那这总的复杂度时O(n^3)显然是不行的。区间翻转这里是可以优化的，因为头牛的情况是会收到前k-1的影响的。</p><p>s[i]:标记是否被翻转，1就是被翻转，0就是没有被翻转</p><p>我们考虑第i头牛时如果$$\sum_{j=i-k+1}^{i-1}s[j]$$为奇数，那第i头牛就是被翻转了，在结合处状态(1朝后，0朝前)就可以知道这里是否要被翻转但是每一次去计算这样显然不行，并没有优化。但是我们可以知道第i+1头牛时的状态是可以从i得来的。</p>\sum_{j=(i+1)-k+1}^{i}s[j]=\sum_{j=i-k+1}^{i-1}s[j]+s[i]-s[i-k+1]$$所以我们用一个sum就可以去更新状态了.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n,state[maxn],s[maxn];</span><br><span class="line"><span class="comment">//state记录状态，1为朝后，0为朝前 ,s标记是否被翻转 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,sum=<span class="number">0</span>,i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i+k&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>((state[i]+sum)%<span class="number">2</span>!=<span class="number">0</span>)&#123;<span class="comment">//朝后 </span></span><br><span class="line">res++;</span><br><span class="line">s[i]=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">sum+=s[i];</span><br><span class="line"><span class="keyword">if</span>(i-k+<span class="number">1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">sum-=s[i-k+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=n-k+<span class="number">1</span>;i&lt;n;++i)&#123;<span class="comment">//枚举最后不能被翻转的那一段 </span></span><br><span class="line"><span class="keyword">if</span>((state[i]+sum)%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i-k+<span class="number">1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">sum-=s[i-k+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> resm=n,resk=<span class="number">1</span>,i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)&#123;<span class="comment">//枚举k的长度 </span></span><br><span class="line"><span class="keyword">int</span> tp=pd(i);</span><br><span class="line"><span class="keyword">if</span>(tp&gt;=<span class="number">0</span>&amp;&amp;tp&lt;resm)&#123;</span><br><span class="line">resm=tp;</span><br><span class="line">resk=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,resk,resm);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> tp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tp);</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;B&#x27;</span>) </span><br><span class="line">state[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tp==<span class="string">&#x27;F&#x27;</span>) </span><br><span class="line">state[i]=<span class="number">0</span>;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 尺取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1080 国王游戏 (贪心)</title>
      <link href="2018/12/23/(Luogu)%20P1080%20%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/"/>
      <url>2018/12/23/(Luogu)%20P1080%20%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1080">传送门</a></p><p>***解题思路：***一开始单纯的直接按照左手升序或者右手降序，这种想法必然是不准确的，但是能得30分，那么应该如何判断哪些大臣应该被排在前面呢，现在我们不如直接从所有的大臣种先选出两位来判断。</p><table><thead><tr><th>属性</th><th>左手</th><th>右手</th></tr></thead><tbody><tr><td>皇上</td><td>X1</td><td>Y1</td></tr><tr><td>大臣甲</td><td>X2</td><td>Y2</td></tr><tr><td>大臣乙</td><td>X3</td><td>Y3</td></tr></tbody></table><p>如果是这样的话，那答案就是有两种排序方式max(X1/Y2,X1<em>X2/Y3),max(X1/Y3,X1</em>X3/Y2) 取个最小值即为答案。</p><p>k1=X1/Y2,k2=X1*X2/Y3</p><p>k3=X1/Y3,k4=X1<em>X3/Y2, 首先可以很容易的判断出  k4&gt;k1, k2&gt;k3的；现在假设第一种排序方式更好，即最大值最小，那就只需要k2&lt;k4就行了，那第一种排序的两个都比第二种小了。化简一下就是X2</em>Y2&lt;X3*Y3；</p><p>但是有序左右相乘乘出来的数非常大，用unsigned long long 也只有60分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ull a,b,c;</span><br><span class="line">&#125; t[<span class="number">1010</span>];</span><br><span class="line">ull s,ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t[i].a&gt;&gt;t[i].b,t[i].c=t[i].a*t[i].b;</span><br><span class="line">&#125;</span><br><span class="line">sort(t+<span class="number">1</span>,t+<span class="number">1</span>+n,cmp);</span><br><span class="line">s=t[<span class="number">0</span>].a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">ans=max(ans,s/t[i].b),s*=t[i].a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度不想写了，咕咕咕。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Nodes</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Nodes &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> l * r &lt; rhs.l * rhs.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125; s[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> L, R;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>], len;</span><br><span class="line">INT() &#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>) len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(x) &#123;</span><br><span class="line">a[len++] = x % <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> INT &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(len != rhs.len) <span class="keyword">return</span> len &lt; rhs.len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt; rhs.a[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; rhs.a[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">INT <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">INT ret;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) ret.a[i] = a[i] * rhs;</span><br><span class="line"><span class="keyword">int</span> llen;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len || ret.a[i]; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ret.a[i] / <span class="number">10</span>) &#123;</span><br><span class="line">ret.a[i + <span class="number">1</span>] += ret.a[i] / <span class="number">10</span>;</span><br><span class="line">ret.a[i] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">llen = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ret.a[llen] == <span class="number">0</span>) ret.len = llen;</span><br><span class="line"><span class="keyword">else</span> ret.len = llen + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">INT <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">INT ret;</span><br><span class="line">ret.len = len;</span><br><span class="line"><span class="keyword">int</span> rest = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">rest = rest * <span class="number">10</span> + a[i];</span><br><span class="line">ret.a[i] = rest / x;</span><br><span class="line">rest %= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ret.len &gt; <span class="number">1</span> &amp;&amp; ret.a[ret.len - <span class="number">1</span>] == <span class="number">0</span>) ret.len--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;s[i].l, &amp;s[i].r);</span><br><span class="line"><span class="built_in">std</span>::sort(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span><br><span class="line">INT temp;</span><br><span class="line">temp.init(L);</span><br><span class="line">INT ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = <span class="built_in">std</span>::max(ans, temp / s[i].r);</span><br><span class="line">temp = temp * s[i].l;</span><br><span class="line">&#125;</span><br><span class="line">ans.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1582 倒水 (简单数学)</title>
      <link href="2018/12/23/(Luogu)%20P1582%20%E5%80%92%E6%B0%B4/"/>
      <url>2018/12/23/(Luogu)%20P1582%20%E5%80%92%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1582">传送门</a></p><p><em><strong>题目描述：</strong></em> 一天，CC买了N个容量可以认为是无限大的瓶子，开始时每个瓶子里有1升水。接着~~CC发现瓶子实在太多了，于是他决定保留不超过K个瓶子。每次他选择两个当前含水量相同的瓶子，把一个瓶子的水全部倒进另一个里，然后把空瓶丢弃。(不能丢弃有水的瓶子)显然在某些情况下CC无法达到目标，比如N=3,K=1。此时CC会重新买一些新的瓶子(新瓶子容量无限，开始时有1升水)，以到达目标。现在CC想知道，最少需要买多少新瓶子才能达到目标呢？</p><p><em><strong>解题思路：</strong></em> 我们可以从题中得到，它合并的方式是取两个水量相同的合并，所以易知最后的所剩瓶子里的水应该都是2的次方，而且瓶子个数小于等于k。以13举例子，他是由2的哪些次方组存呢，用二进制就可以很容易看出来，1101，是由2<sup>3,2</sup>2,2<sup>0组成，数量为3，所以我们可以加个2</sup>0,就是使得1101变成10000，二进制有几个1，就代表需要几个瓶子，看出这一点之后，就需要用到lowbit了（就是树状数组里那个，取一个数最小的那个1），我们不停的在原n上加lowbit(n)，直到n中1的个数&lt;=k。</p><p>注：为什么要从后往前加呢？ 如11101，现在k=2，你可以选择加2^2, 变成100001，但这样是没有加2<sup>0,2</sup>1更优的，因为求的是最少需要加几个瓶子，所有因该从后往前考虑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tp)&#123;</span><br><span class="line">sum++;</span><br><span class="line">tp&amp;=(tp<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(count(n)&gt;k)&#123;</span><br><span class="line">ans+=n&amp;-n,n+=n&amp;-n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始求二进制1的个数是直接暴力的，很遗憾T了一个点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tp)&#123;</span><br><span class="line"><span class="keyword">if</span>(tp&amp;<span class="number">1</span>)sum++;</span><br><span class="line">tp&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AC代码的计数方法可以参考 <a href="https://blog.csdn.net/u013243347/article/details/52220551">戳我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1967 货车运输（kruscal + lca）</title>
      <link href="2018/12/20/(Luogu)%20P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/"/>
      <url>2018/12/20/(Luogu)%20P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1967">传送门</a></p><p><em><strong>题目大意：</strong></em> 城市与城市之间有道路相连，并且道路有着限重，q次查询问，从x到y车的最大载重量，不能到达就输出-1.</p><p><em><strong>解题思路：</strong></em> 这道题有很多种解法，但这道题放在了倍增里，自然而然想着用倍增的方法去做，对于才初步了解这个算法的我来说，还是有点困难的。其实如果城市与城市之间有多条路径可以抵达，那只要保留那条载重最大的那条路径就行了。所以我们自然而然可以在它给的图上跑kruscal，跑出一颗最大生成树。然后在这颗树上我们就可以使用lca方法了，这是用来寻找最近公共祖先的，放到这里恰恰好。如果有最近的公共祖先那这两个城市就是相通的，反之无法到达。但要求最大载重量，那就还需要一个数组w[maxn][21],w[i][j],代表i节点到i的第2^j个父亲节点之间的最小载重量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],lg[maxn],dep[maxn],n,m;</span><br><span class="line"><span class="keyword">int</span> we[maxn][<span class="number">21</span>],f[maxn][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125; ee[<span class="number">50005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge x,edge y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.w&gt;y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmb</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fa[x] = y;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruscal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; ++i)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> s=ee[i].s,e=ee[i].e,w=ee[i].w;</span><br><span class="line"><span class="keyword">if</span>(cmb(s,e)) &#123;</span><br><span class="line">G[s].push_back(node &#123;e,w&#125;);</span><br><span class="line">G[e].push_back(node &#123;s,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">dep[now]=dep[last]+<span class="number">1</span>;</span><br><span class="line">vis[now]=<span class="literal">true</span>;</span><br><span class="line">f[now][<span class="number">0</span>]=last;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;i)&lt;=dep[now]; ++i) &#123;</span><br><span class="line">we[now][i]=min(we[now][i<span class="number">-1</span>],we[f[now][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">f[now][i]=f[f[now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)G[now].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(G[now][i].to!=last) &#123;</span><br><span class="line">we[G[now][i].to][<span class="number">0</span>]=G[now][i].cost;</span><br><span class="line">dfs(G[now][i].to,now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(find(x)!=find(y)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line"><span class="keyword">int</span> ans=inf;</span><br><span class="line"><span class="keyword">while</span>(dep[x]!=dep[y]) &#123;</span><br><span class="line"><span class="keyword">int</span> len=dep[y]-dep[x];</span><br><span class="line">ans=min(ans,we[y][lg[len]<span class="number">-1</span>]);</span><br><span class="line">y=f[y][lg[len]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[dep[x]]<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span>(f[x][i]!=f[y][i]) &#123;</span><br><span class="line">ans=min(ans,min(we[x][i],we[y][i]));</span><br><span class="line">x=f[x][i];</span><br><span class="line">y=f[y][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=min(ans,min(we[x][<span class="number">0</span>],we[y][<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">ee[i]=edge &#123;x,y,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(ee,ee+m,cmp);</span><br><span class="line">kruscal();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">lg[i]=lg[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;lg[i<span class="number">-1</span>]==i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">dfs(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=t; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lca(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lca </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 1159 Palindrome</title>
      <link href="2018/12/10/(POJ)%201159%20Palindrome/"/>
      <url>2018/12/10/(POJ)%201159%20Palindrome/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1159">传送门</a></p><p><em><strong>题目大意：</strong></em> 给你一串字符串，问最少添加几个字符可以使该字符串变成回文串。</p><p><em><strong>解题思路：</strong></em> 先求出该字符串的最长回文子串。然后总长度减去最长回文子串的长度就行了。已经形成回文的我们没有必要多此一举去添加字符了，而还单着的，我们在相对的位置在给他加一个就行了。</p><p>但是直接区间dp求最长回文字串，开二维数组会MLE，而又不太好滚动（不知道可不可以滚动），不过可以直接开short 莽过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">short</span> dp[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">s.insert(s.begin(),<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)dp[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>;len&lt;=n;++len)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+len<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])dp[i][j]=dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span>dp[i][j]=max(dp[i+<span class="number">1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n-dp[<span class="number">1</span>][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样投机取巧肯定是不好的。我们还可以将原字符串颠倒，然后求两个字符串的最长公共子串，这个dp改成二维滚动还是很好改的，画图看一下它的更新方式就知道了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">char</span> s1[maxn],s2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,s1+i);</span><br><span class="line">s2[n+<span class="number">1</span>-i]=s1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(s1[i]==s2[j])dp[i%<span class="number">2</span>][j]=dp[(i<span class="number">-1</span>)%<span class="number">2</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>dp[i%<span class="number">2</span>][j]=max(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][j],dp[i%<span class="number">2</span>][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n-dp[n%<span class="number">2</span>][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CodeForces)Round408(Div.2) A,B,C,D</title>
      <link href="2018/12/10/(CodeForces)%20Round%20408(Div.2)%20A,B,C,D/"/>
      <url>2018/12/10/(CodeForces)%20Round%20408(Div.2)%20A,B,C,D/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/796">传送门</a></p><h1 id="a-buying-a-house"><a class="markdownIt-Anchor" href="#a-buying-a-house"></a> A. Buying A House</h1><p>暴力一下就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>&amp;&amp;a[i]&lt;=k)&#123;</span><br><span class="line">res=min(res,(i-m)*<span class="number">10</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>&amp;&amp;a[i]&lt;=k)&#123;</span><br><span class="line">res=min(res,(m-i)*<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="b-find-the-bone"><a class="markdownIt-Anchor" href="#b-find-the-bone"></a> B. Find The Bone</h1><p>模拟题，本题用cin有TLE的风险，跑了1996ms，而用scanf只跑了300ms+,怕了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> h[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k,xx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="literal">false</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;xx);</span><br><span class="line">h[xx]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">bool</span> ff=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(h[<span class="number">1</span>])ff=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(ff)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(x!=res&amp;&amp;y==res) &#123;</span><br><span class="line">res=x;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(y!=res&amp;&amp;x==res) &#123;</span><br><span class="line">res=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[res]) &#123;</span><br><span class="line">ff=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c-bank-hacking"><a class="markdownIt-Anchor" href="#c-bank-hacking"></a> C. Bank Hacking</h1><p><a href="http://codeforces.com/problemset/problem/796/C">传送门</a></p><p><em><strong>题目大意：</strong></em> 一个联通网络，每个点都有权值，破坏一个点，需要有&gt;=改点权值的强度，破坏一个点之后，它会给他范围为2的点都+1。问最小需要的强度大小。</p><p><em><strong>解题思路：</strong></em> 这道题我们可以贪心的来想，如果最大的点max唯一，我们肯定要先破坏最大的那个点max，如果先去破坏比较小的点，最后破坏最大点的强度会变大，我们需要的强度反而会变得更高。但是如果最大的点不唯一，那就再需要考虑一下了。</p><p>具体情形如下：</p><p>一.最大的点唯一为max；</p><p>1.次小的点为max-1，且全部出现在，max的范围1内，则需要的强度大小为max;</p><p>2.不满足1，那么需要的强度大小为max+1;</p><p>二.最大的点不唯一为max;</p><p>1.如果最大的点都出现在一个较小的点范围1内，或者其他全部最大的点都出现在一个最大的点范围1内，则需要的强度为 max+1；</p><p>2.不满足1，那么需要的强度大小为max+2；</p><p>可以自己带着画图去理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,tmp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ee[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125; a[maxn];</span><br><span class="line"><span class="keyword">int</span> lo[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>,maxnum=<span class="number">-2e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">a[i]=node &#123;i,tmp&#125;;</span><br><span class="line">maxnum=max(maxnum,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">ee[x].push_back(y);</span><br><span class="line">ee[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].w==maxnum)lo[num1++]=a[i].id;</span><br><span class="line"><span class="keyword">if</span>(a[i].w==maxnum<span class="number">-1</span>)  num2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num1==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)ee[lo[<span class="number">0</span>]].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> np=ee[lo[<span class="number">0</span>]][i];</span><br><span class="line"><span class="keyword">if</span>(a[np].w==maxnum<span class="number">-1</span>)tmp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp==num2) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxnum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxnum+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i].w==maxnum)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)ee[i].size();++j)&#123;</span><br><span class="line"><span class="keyword">int</span> np=ee[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[np].w==maxnum) tmp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp==num1<span class="number">-1</span>)&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)ee[i].size();++j)&#123;</span><br><span class="line"><span class="keyword">int</span> np=ee[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[np].w==maxnum) tmp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp==num1)&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxnum+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxnum+<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dpolice-stations"><a class="markdownIt-Anchor" href="#dpolice-stations"></a> D.Police Stations</h1><p><a href="http://codeforces.com/contest/796/problem/D">传送门</a></p><p><em><strong>题目大意：</strong></em> 一个连通图（树型）,每个点都是一个城市，有些城市是有警察局的，任何城市都可以到达d距离的警察局，即每个警察局都有一个有效范围d.问你最多可以删除多少条路，使得每个城市依然可以到达警察局。</p><p><em><strong>解题思路：</strong></em> 我们可以这样想，既然给了你k个警察局，那当然是每个都要用上才是最优的，每个城市都应该优先选择和它最近的警察局，如果它选择远的，只会多走一些没有必要的路径。所以可以从每个警察局同时开始宽搜，同时标记走过的边，如果图上所有的城市都被标记，那就宽搜结束。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,d,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">bool</span> edgevis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; added;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; ee[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node st=q.front();</span><br><span class="line"><span class="keyword">int</span> np=st.p,nstep=st.step;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(nstep&gt;d)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)ee[np].size();++i)&#123;</span><br><span class="line">edge tt=ee[np][i];</span><br><span class="line"><span class="keyword">int</span> nto=tt.to,nid=tt.id;</span><br><span class="line"><span class="keyword">if</span>(!vis[nto])&#123;</span><br><span class="line">vis[nto]=<span class="literal">true</span>;</span><br><span class="line">edgevis[nid]=<span class="literal">true</span>;</span><br><span class="line">++cnt;</span><br><span class="line">q.push(node&#123;nto,nstep+<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;k,&amp;d);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(edgevis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(edgevis));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">q.push(node&#123;tmp,<span class="number">0</span>&#125;);</span><br><span class="line">vis[tmp]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">ee[x].push_back(edge &#123;y,i&#125;);</span><br><span class="line">ee[y].push_back(edge &#123;x,i&#125;);</span><br><span class="line">&#125;</span><br><span class="line">bfs();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n<span class="number">-1</span>-cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(edgevis[i]==<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(POJ) 1050 To the Max</title>
      <link href="2018/12/10/(POJ)%201050%20To%20the%20Max/"/>
      <url>2018/12/10/(POJ)%201050%20To%20the%20Max/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1050">传送门</a></p><p><em><strong>题目大意：</strong></em> 给你一个矩阵，求里面的最大子矩阵(求和最大)。</p><p><em><strong>解题思路：</strong></em> 第一想法当然是暴力枚举了，当然立即pass，复杂度过高，那再用前缀和处理一下的，这样复杂还是过高的。直接枚举是肯定不现实的。那我们直接枚举上界呢，然后将它下面的一层一层的加上去，每加一次都算一次最大子序列和。比如枚举第i层作为上界，求出此时的最大子序列和就是以i为上界，宽为1的最大子矩阵；在将i+1层的数依此加上第i层，再求一次，此时求出的就是以i为上界，宽为2的最大子矩阵。</p><p>那样例举个栗子：</p><p>0 -2 -7 0<br />9 2 -6 2<br />-4 1 -4 1<br />-1 8 0 -2     枚举第一层为上界</p><p>tmp数组                         最长子序列和</p><ol><li><p>0 -2 -7 0                           0</p></li><li><p>9 0 -13 2 (第二层加上第一层)       9</p></li><li><p>5 1 -17 3 (继续累加)               6</p></li><li><p>-4 9 -17 -1(继续累加)               9       所以以第一层为上界的最大子矩阵和为9</p></li></ol><p>例：第三步选出的矩阵就是</p><p>0 -2</p><p>9 2</p><p>-4 1</p><p>这样枚举的复杂度就是O(n^3) (枚举上界n，枚举宽n，求最长子序列和n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> m[maxn][maxn],ttres;</span><br><span class="line"><span class="keyword">int</span> tmp[maxn],n,ans=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;++j)&#123;</span><br><span class="line">ttres=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)&#123;</span><br><span class="line">tmp[k]+=m[j][k];</span><br><span class="line">ttres+=tmp[k];</span><br><span class="line">ans=max(ans,ttres);</span><br><span class="line"><span class="keyword">if</span>(ttres&lt;<span class="number">0</span>)ttres=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1119 灾后重建</title>
      <link href="2018/12/06/(Luogu)%20P1119%20%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/"/>
      <url>2018/12/06/(Luogu)%20P1119%20%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1119">传送门</a></p><p><em><strong>题意：</strong></em>  查询q次求一个村庄到另一个村庄的最短路，但这个题目又加了一个重建的条件，只有当一条路联通的两个村庄 (规定了村庄在第几天被修好) 都被修好这条路才可以通，所以点到点的最短距离又受制于时间t。</p><p><em><strong>思路：</strong></em>  查询是点到点在第t天的最短距离。首先这是多源最短路，各个村庄之间的最短距离我们都要知道，选用floyd食用最佳。接下来去解决时间t的问题。首先这个问题好的一点就是，村庄的重建好的时间是不下降的，查询的t也是不下降的，这样就very good了。floyd的第一层循环是枚举进行松弛的点。这里因为受制于t，所以我们接受一个查询，就将重建时间小于等于t的点都拿去松弛这一张图，但是因为查询的两个村庄可能还没有被重建，所以我们要判断一下，如果被重建过了而且被更新，那就输出最短距离，反之输出-1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">200</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn][maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,t+i);</span><br><span class="line">dist[i][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">dist[x][y]=dist[y][x]=w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line"><span class="keyword">int</span> xx,yy,tt,k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;xx,&amp;yy,&amp;tt);</span><br><span class="line"><span class="keyword">while</span>(t[k]&lt;=tt&amp;&amp;k&lt;n) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n ;j++) &#123;</span><br><span class="line">dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[xx][yy]==INF||t[xx]&gt;tt||t[yy]&gt;tt)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;dist[xx][yy]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始想用Dijkstra暴力出点到点的最小距离并用记忆化存储下来。但是就是不T也会MLE。但本菜鸡还是将其实现了出来，当然是“稻花香里说丰年，听取WA声一片”。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">200</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,q,maxday=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> t[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p;</span><br><span class="line">ll dis;</span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id;</span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> dist[maxn][maxn][<span class="number">10005</span>];</span><br><span class="line"><span class="comment">// i-&gt;j 第t天的最短路</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=t[n<span class="number">-1</span>]+<span class="number">1</span>; ++k) &#123;</span><br><span class="line">dist[start][i][k]=INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[start][start][t[start]]=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(start,<span class="number">0</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])<span class="keyword">continue</span>;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nday=max(t[nto],t[np]);</span><br><span class="line"><span class="keyword">if</span>(dist[start][nto][nday]&gt;dist[start][np][t[np]]+nw) &#123;</span><br><span class="line">dist[start][nto][nday]=dist[start][np][t[np]]+nw;</span><br><span class="line"><span class="comment">//cout&lt;&lt;start&lt;&lt;&quot;-&gt;&quot;&lt;&lt;nto&lt;&lt;&quot; &quot;&lt;&lt;nday&lt;&lt;&quot; :&quot;&lt;&lt;dist[start][nto][nday]&lt;&lt;endl;</span></span><br><span class="line">q.push(node(nto,dist[start][nto][nday]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=t[n<span class="number">-1</span>]+<span class="number">1</span>; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[start][i][k]!=INF) &#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[start][i][k]==INF) &#123;</span><br><span class="line">dist[start][i][k]=dist[start][i][k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,t+i);</span><br><span class="line">&#125;</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//无向图建图</span></span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">e[y].push_back(edge(i,x,w));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">Dijkstra(i);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;q);</span><br><span class="line"><span class="keyword">int</span> xx,yy,tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;xx,&amp;yy,&amp;tt);</span><br><span class="line"><span class="keyword">if</span>(dist[xx][yy][tt]==INF) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[xx][yy][tt]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1462 通往奥格瑞玛的道路(二分 + Spfa/Dijkstra)</title>
      <link href="2018/12/05/(Luogu)%20P1462%20%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF/"/>
      <url>2018/12/05/(Luogu)%20P1462%20%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1462">传送门</a></p><p><em><strong>题意：</strong></em> 一个联通的无向图，通过每一个点会收费，通过每一条边会减少血量。求能到达终点 (即血量到终点还不为0) 的各个路径上,收费最高的最小值。</p><p><em><strong>思路：</strong></em> 首先一开始的思路是找到所有能到终点的路径，然后取每条路径上的最高收费，比较取最小值，数据量大，pass；再思考，他求的是最大的最小值，那我们可以想到二分，去二分路径上的最高消费，然后判断这样能不能走到终点。判断的函数就可以考虑Spfa和Dijkstra了,只要将这两个在跑的时候略加改变即可，如果通向的那个点，最高消费大于你枚举的最高消费，就不做考虑。最后pd一下到终点的需要消耗的最小血量是不是大于你的血量b。</p><p>这个题在同样的读入方式下Spfa是跑的比Dijkstra快的；</p><p>Spfa：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; ee[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> maxmoney)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> np=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[np]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)ee[np].size(); ++i) &#123;</span><br><span class="line">edge tt=ee[np][i];</span><br><span class="line"><span class="keyword">if</span>(cost[tt.to]&lt;=maxmoney) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[tt.to]&gt;dist[np]+tt.w) &#123;</span><br><span class="line">dist[tt.to]=dist[np]+tt.w;</span><br><span class="line"><span class="keyword">if</span>(vis[tt.to]==<span class="literal">false</span>) &#123;</span><br><span class="line">q.push(tt.to);</span><br><span class="line">vis[tt.to]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(dist[n]&gt;=b)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> le=INF,ri=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cost[i];</span><br><span class="line">le=min(le,cost[i]);</span><br><span class="line">ri=max(ri,cost[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">ee[x].push_back(edge&#123;y,z&#125;);</span><br><span class="line">ee[y].push_back(edge&#123;x,z&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(!spfa(ri))&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;AFK&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(le&lt;ri)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(spfa(mid))&#123;<span class="comment">//可达</span></span><br><span class="line">ri=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//不可达</span></span><br><span class="line">le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;le&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点</span></span><br><span class="line">ll dis; <span class="comment">//起始点到该点的最短距离</span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; ee[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> maxmoney)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ee[np].size(); ++i) &#123;</span><br><span class="line">edge ne=ee[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line"><span class="keyword">if</span>(cost[nto]&lt;=maxmoney) &#123;</span><br><span class="line"><span class="keyword">if</span>(dist[nto]&gt;dist[np]+nw) &#123;</span><br><span class="line">dist[nto]=dist[np]+nw;</span><br><span class="line">q.push(node(nto,dist[nto]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[n]&gt;=b)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> le=INF,ri=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cost[i];</span><br><span class="line">le=min(le,cost[i]);</span><br><span class="line">ri=max(ri,cost[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">ee[x].push_back(edge &#123;y,z&#125;);</span><br><span class="line">ee[y].push_back(edge &#123;x,z&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(!Dijkstra(ri)) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;AFK&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(le&lt;ri) &#123;</span><br><span class="line"><span class="keyword">int</span> mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Dijkstra(mid)) &#123;<span class="comment">//可达</span></span><br><span class="line">ri=mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//不可达</span></span><br><span class="line">le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;le&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P2921 [USACO08DEC]Trick or Treat on the Farm( Tarjan求强联通分量 )</title>
      <link href="2018/12/04/(Luogu)%20P2921%20%5BUSACO08DEC%5DTrick%20or%20Treat%20on%20the%20Farm(%20Tarjan%E6%B1%82%E5%BC%BA%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F%20)/"/>
      <url>2018/12/04/(Luogu)%20P2921%20%5BUSACO08DEC%5DTrick%20or%20Treat%20on%20the%20Farm(%20Tarjan%E6%B1%82%E5%BC%BA%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F%20)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2921">传送门</a></p><p>虽然看题解很多大佬并没有用Tarjan来做这一题，但是这个问题用Tarjan求强联通分量来解决这题还是很清晰的，如果一头牛在一个强联通分量里，那它可以拿的糖果就是这个强联通分量的点数。反之由于牛走的的方向只有一个，那就直接深搜到第一个强联通分量，加上这个强联通分量的点数就是它可以拿到的糖果。</p><p>跑强联通分量的同时，就可以知道某个点属于哪一块，并且一块有多大。</p><p>注：自环的点要先处理一下，ans为1，和可以深搜到大强联通分量的分开来，方便写深搜。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> low[maxn],dfn[maxn],cnt=<span class="number">0</span>,tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> color[maxn],sum[maxn],n;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="keyword">bool</span> added[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">low[x]=dfn[x]=++cnt;</span><br><span class="line">s.push(x);</span><br><span class="line">added[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[x].size();++i)&#123;</span><br><span class="line"><span class="keyword">int</span> np=G[x][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[np])&#123;</span><br><span class="line">tarjan(np);</span><br><span class="line">low[x]=min(low[x],low[np]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(added[np])&#123;</span><br><span class="line">low[x]=min(low[x],dfn[np]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])&#123;</span><br><span class="line">tot++;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=s.top();s.pop();</span><br><span class="line">color[tmp]=tot,sum[tot]++;</span><br><span class="line">added[tmp]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp==x)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> point,<span class="keyword">int</span> np,<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[np])&#123;</span><br><span class="line">ans[point]=ans[np]+step;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[np].size();++i)&#123;</span><br><span class="line">dfs(point,G[np][i],step+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(added,<span class="literal">false</span>,<span class="keyword">sizeof</span>(added));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">G[i].push_back(t);</span><br><span class="line"><span class="keyword">if</span>(i==t)ans[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[color[i]]!=<span class="number">1</span>)ans[i]=sum[color[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="number">0</span>) dfs(i,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1983 车站分级 (拓扑最长有效路径)</title>
      <link href="2018/12/04/(Luogu)%20P1983%20%E8%BD%A6%E7%AB%99%E5%88%86%E7%BA%A7%20(%E6%8B%93%E6%89%91%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E8%B7%AF%E5%BE%84)/"/>
      <url>2018/12/04/(Luogu)%20P1983%20%E8%BD%A6%E7%AB%99%E5%88%86%E7%BA%A7%20(%E6%8B%93%E6%89%91%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E8%B7%AF%E5%BE%84)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1983#sub">传送门</a></p><p>做这个题的第一步是先思考应该如何建图，停靠的站之间是没有严格的大于小于关系的，所以直接连边的话是不利于等级的划分的。所以再仔细考虑一下，我们应该是在起点到终点之间， 连接停靠的车站和没有停靠的车站，因为停靠的车站等级必定是严格大于未停靠车站的等级。根据这个严格的大小关系我们可以建有向图。可以从低的指向高的，也可以从高的指向低的，结果是一样的。</p><p>这里我建图是从低等级的指向高等级。然后跑一次拓扑最长路径，最长的路径就是需要的最少的标记级别，因为最长的都可以被标记出来，那那些比较短的必然也可以被标记出来。建图要用空间换时间不然会T</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];<span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn]; <span class="comment">//访问标记</span></span><br><span class="line"><span class="keyword">int</span> degree[maxn],rankk[maxn];</span><br><span class="line"><span class="comment">//度 以i为终点的最长有效路径</span></span><br><span class="line"><span class="keyword">bool</span> added[maxn][maxn]; <span class="comment">//标记是否被添加</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> s,tmp;</span><br><span class="line"><span class="keyword">int</span> start,end;</span><br><span class="line"><span class="built_in">memset</span>(added,<span class="literal">true</span>,<span class="keyword">sizeof</span>(added));</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">unstop</span><span class="params">(maxn)</span></span>; <span class="comment">//不停靠</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">stop</span><span class="params">(maxn)</span></span>; <span class="comment">//停靠</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>; t&lt;m; ++t) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">start=INF,end=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">vis[tmp]=<span class="literal">true</span>;<span class="comment">//停靠</span></span><br><span class="line">start=min(start,tmp);</span><br><span class="line">end=max(end,tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unstop.clear();</span><br><span class="line">stop.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">unstop.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[i])&#123;</span><br><span class="line">stop.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)stop.size();++i)&#123; <span class="comment">//停靠的向未停靠的连边</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)unstop.size();++j)&#123;</span><br><span class="line"><span class="keyword">int</span> be=stop[i],en=unstop[j];</span><br><span class="line"><span class="keyword">if</span>(added[be][en])&#123; <span class="comment">//是否已经被添加</span></span><br><span class="line">G[be].push_back(en);</span><br><span class="line">degree[en]++;</span><br><span class="line">added[be][en]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">true</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(degree[i]==<span class="number">0</span>) &#123;</span><br><span class="line">q.push(i);</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> np=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)G[np].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> to=G[np][i];</span><br><span class="line">degree[to]--;</span><br><span class="line">rankk[to]=max(rankk[to],rankk[np]+<span class="number">1</span>);<span class="comment">//更新有效路径</span></span><br><span class="line">res=max(rankk[to],res); <span class="comment">//更新最长有效路径</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]&amp;&amp;degree[i]==<span class="number">0</span>) &#123;</span><br><span class="line">q.push(i);</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//初始化为0，所以+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1341 无序字母对(欧拉路径)</title>
      <link href="2018/12/03/(Luogu)P1341%E6%97%A0%E5%BA%8F%E5%AD%97%E6%AF%8D%E5%AF%B9(%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84)/"/>
      <url>2018/12/03/(Luogu)P1341%E6%97%A0%E5%BA%8F%E5%AD%97%E6%AF%8D%E5%AF%B9(%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1341#sub">传送门</a></p><p>这个题是放在图论板块的，所以我们可以很容易想到建图。但是如果这道题直接给我，我肯定会认为这是一道单纯的字符串，并不会与图论扯上关系。用图的思想建个图，题目一下就变得清晰起来，这变成了一个一笔画问题，那么就要求可以走一个欧拉回路或者欧拉路径。</p><ul><li><p>第一步，判断，1.如果有不只一个联通块，pass。2.有不等于2个奇数度点，pass</p></li><li><p>第二步，确定起点，如果是有两个奇数度点，则一个是起点，一个是终点，取小的为起点就行了。如果都是偶数度点，取一个最小 的当成起点。(由于是用邻接矩阵存储的，取点的是从小到大取的，满足字典序输出)</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">257</span>;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> ans[maxn*<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) &#123;</span><br><span class="line">p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==p[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> p[x] = find(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">p[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(G[s][i]) &#123;</span><br><span class="line">G[s][i] = <span class="number">0</span>;</span><br><span class="line">G[i][s] = <span class="number">0</span>;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[n--] = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">G[tmp[<span class="number">0</span>]][tmp[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">G[tmp[<span class="number">1</span>]][tmp[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">deg[tmp[<span class="number">0</span>]]++;</span><br><span class="line">deg[tmp[<span class="number">1</span>]]++;</span><br><span class="line">unite(tmp[<span class="number">0</span>],tmp[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==i &amp;&amp; deg[i]) &#123;</span><br><span class="line">cnt++; <span class="comment">//联通块个数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt!=<span class="number">1</span>) &#123;<span class="comment">//不止一个连通块 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">&#x27;A&#x27;</span>; i&lt;=<span class="string">&#x27;z&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]&amp;<span class="number">1</span>) &#123; </span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(!head) head = i; <span class="comment">//有奇数度顶点时的起点 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!head) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">&#x27;A&#x27;</span>; i&lt;=<span class="string">&#x27;z&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]) &#123;</span><br><span class="line">head = i; <span class="comment">//全是偶数点时的起点 </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &amp;&amp; cnt!=<span class="number">2</span>) &#123;<span class="comment">//有！2个奇数点 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(head);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5750 Dertouzos（数论）</title>
      <link href="2018/12/02/(HDU)5750Dertouzos/"/>
      <url>2018/12/02/(HDU)5750Dertouzos/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5750">传送门</a></p><p><em><strong>题意</strong></em>：在小于n的范围内，找出所有最大除数为d的数。</p><p><em><strong>思路</strong></em>：假设存在一个y满足题目条件，即y=k<em>d,那么我们可以分析出来 k一定为质数，而且k&lt;=d,因为只有这样k才不能分解成两个大于1的数，如果一旦分成两个大于1的数a,b;那么a</em>d也是y的因子而且比d大了。既然这样的话，我们就可以通过素数筛预处理素数。</p><p>枚举每一个素数和d的乘积是否满足，那何时终止呢？（素数存入V数组</p><ul><li><p>1.当v[i]*d&gt;=n 不满足条件了，显然要终止了；</p></li><li><p>2.当v[i]是d的因子时（这个也保证了v[i]&lt;d）此时也要终止了，但res++；</p><p>当d不是质数时，则d可以分成两个大于1的数，一个最小质数因子和另一个数，v[i]是最小质数因子时，此时乘积的最大除数还是 d，但当v[i]再大时，v[i]就会和另一个数相乘变成一个&gt;d的数。</p><p>当d是质数时，那d只能分成1和d，当v[i]时d是， 乘积的最大除数还是 d，v[i]再大，那最大除数就成了v[i]了。</p></li></ul><p>***一点注意：*<em><em>噢，还有一点，就是素数筛的时候，筛选的上界并不是n（1e9）,这也是一开始做这个没有注意到的，以为素数筛数组开不了。因为如果d是质数那么d</em>d就结束了，而且d</em>d要小于n，如果d不是质数，那么跑的它的最小质因子就结束了；综上，所以筛选的上界是sqrt(n)，保险可以开大一点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,d,psize;</span><br><span class="line">ll v[maxn];</span><br><span class="line"><span class="keyword">bool</span> pd[maxn+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">psize=<span class="number">0</span>;</span><br><span class="line">pd[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">pd[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!pd[i]) &#123;</span><br><span class="line">v[psize++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i; j&lt;=maxn; j+=i) &#123;</span><br><span class="line">pd[j]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;d);</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;psize;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i]*d&gt;=n)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res++;</span><br><span class="line"><span class="keyword">if</span>(d%v[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4704 Sum（隔板+费马小定理）</title>
      <link href="2018/12/02/(HDU)4704Sum/"/>
      <url>2018/12/02/(HDU)4704Sum/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4704">传送门</a></p><p>题意：输入一个N，将N拆分成1-n个数，问有多少种组成方法。</p><p>思路：可以用隔板法考虑这个问题，有N个1，就有N-1个空隙，如果是拆分成1个数，那就是放0块隔板即C(N-1,0) (emmm不会打数学式子 ）  2个数字那就是C(N-1,1），以此类推到C(N-1,N-1）；那要计算得结果就是 2^(N-1),但由于这个N有100000位，直接快速幂是不可能的，这时候就需要这道题的主角登场了，费马小定理，不了解的可以百度一下。</p><p><strong>就是对任意的P,A互质，都有A的(P-1)次方取模于P等于1. 公式表示为： A^(P−1)≡1(mod P)</strong></p><p>那么在这道题里我们可以知道 2^(p-1)=1(mod p) , 那我们就只需要求出 t=(N-1)%(p-1), 求2^(t)即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> n;</span><br><span class="line"><span class="function">ll <span class="title">mypow</span><span class="params">(ll a, ll k)</span> </span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k) &#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>) &#123;</span><br><span class="line">ans=(ans*a)%mod;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">k/=<span class="number">2</span>;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line">ll k = n[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;(<span class="keyword">int</span>)n.size(); ++i)</span><br><span class="line">k = (k*<span class="number">10</span> +(n[i]-<span class="string">&#x27;0&#x27;</span>)) % (mod<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,mypow(<span class="number">2</span>,k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 3037 Saving Beans(隔板+组合数+lucas)</title>
      <link href="2018/12/02/(HDU)3037SavingBeans/"/>
      <url>2018/12/02/(HDU)3037SavingBeans/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3037">传送门</a></p><p><em><strong>题意：</strong></em> 相当于n个数的和不超过m的方案数。</p><p><em><strong>思路：</strong></em> 我们先考虑n个数和等于m的情况，即x1+x2+…xn=m（允许xi为0）有多少种可能，我们可以想到隔板法，但由于允许0的出现，我们可以用1代表果子，有m个1，在加上n-1个0代表空，然后用n-1块隔板将其分成n份。即C(m+n-1,n-1)，</p><p>又C(m+n-1,n-1)=C(m+n-1,m),这代表着和为m的方案数。那我们可以得知当和为i的方案数为C(i+n-1,i)个，所以结果res就可以写出；res=C(n-1,0)+C(n,1)+…+C(n+m-1,m) （感觉已经很接近答案了，但是由于n，m很大，这样还是不行，还需要化简）</p><p><strong>公式 C(n,k) = C(n-1,k)+C(n-1,k-1)</strong></p><p>我们就需要通过它来化简，我们可以将C(n-1,0)变成C(n,0)，这样就和C(n,1)结合变成了C(n+1,1),一直结合到最后，我们发现式子变成了C(n+m,m)，这个就是我们需要求的结果。剩下来只需要套用一下卢卡斯的板子即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,p;</span><br><span class="line">ll fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfac</span><span class="params">(ll p)</span> </span>&#123; <span class="comment">//预处理阶层</span></span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; i++)</span><br><span class="line">fac[i]=fac[i<span class="number">-1</span>]*i%p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">mypow</span><span class="params">(ll a,ll n,ll p)</span> </span>&#123; <span class="comment">//快速幂运算</span></span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">ans=ans*a%p;</span><br><span class="line">a=a*a%p;</span><br><span class="line">n/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n,ll m,ll p)</span> </span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&amp;&amp;m) &#123;</span><br><span class="line">ll a=n%p;</span><br><span class="line">ll b=m%p;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ans=(ans*fac[a]*mypow(fac[b]*fac[a-b]%p,p<span class="number">-2</span>,p))%p;</span><br><span class="line">n/=p;</span><br><span class="line">m/=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">getfac(p);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;lucas(n+m,m,p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博弈论专题</title>
      <link href="2018/11/27/%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%B8%93%E9%A2%98/"/>
      <url>2018/11/27/%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="博弈入门"><a class="markdownIt-Anchor" href="#博弈入门"></a> 博弈入门：</h1><h3 id="一巴什博弈"><a class="markdownIt-Anchor" href="#一巴什博弈"></a> （一）巴什博弈：</h3><p><strong>理论:</strong> 只有一堆n个物品,两个人轮流从这堆物品中取物,规定每次至少取一个,最多取m个.最后取光者得胜.若n%(m+1)==0，则先手必败，否则先手必胜。</p><p>显然,如果n=m+1,那么由于一次最多只能取m个,所以,无论先取者拿走多少个,后取者都能够一次拿走剩余的物品,后者取胜.因此我们发现了如何取胜的法则：如果n=(m+1)r+s,(r为任意自然数,s≤m),那么先取者要拿走s个物品,如果后取者拿走k(≤m)个,那么先取者再拿走m+1-k个,结果剩下(m+1)(r-1)个,以后保持这样的取法,那么先取者肯定获胜.总之,要保持给对手留下(m+1)的倍数,就能最后获胜.</p><p><strong>总结：n个物品，每次最多取m个，若n%（m+1）==0 则后手胜 ，反之先手胜利*</strong></p><p><em><strong>例题：</strong></em></p><ul><li>1.hdu1846 Brave Game</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> c,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line"><span class="keyword">while</span>(c--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> mod=n%(m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(mod)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;first&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;second&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.hdu 2149 Public Sale</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n) &#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&lt;=n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> mod=m%(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(mod) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;none&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.hdu 2147 kiki’s game</li></ul><p>PN图打表分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span> || m%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wonderful!\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;What a pity!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二斐波那契博弈"><a class="markdownIt-Anchor" href="#二斐波那契博弈"></a> （二）斐波那契博弈</h3><p><strong>理论:</strong> 出门左转 <a href="https://blog.csdn.net/dgq8211/article/details/7602807">传送门</a></p><p><em><strong>结论：有一堆石子，两个顶尖聪明的人玩游戏，先取者可以取走任意多个，但不能全取完，以后每人取的石子数不能超过上个人的两倍，当石子数为斐波那契数 ，先手输，反之先手赢。</strong></em></p><p><em><strong>例题：</strong></em></p><p>hdu 2516 取石子游戏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当石子的数量为斐波那契数时，先手必败 </span></span><br><span class="line"><span class="comment">//反之，先手赢 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fib[<span class="number">50</span>];</span><br><span class="line">fib[<span class="number">0</span>]=<span class="number">2</span>,fib[<span class="number">1</span>]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">50</span>;++i)&#123;</span><br><span class="line">fib[i]=fib[i<span class="number">-1</span>]+fib[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==fib[i])&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Second win&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fib[i]&gt;n)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;First win&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="三威佐夫博弈"><a class="markdownIt-Anchor" href="#三威佐夫博弈"></a> （三）威佐夫博弈</h3><p><strong>理论:</strong> 出门左转 <a href="https://blog.csdn.net/qq_34374664/article/details/52814983">传送门</a></p><p><em><strong>结论：有两堆各若干个物品，两个人轮流从任意一堆中取出至少一个或者同时从两堆中取出同样多的物品，规定每次至少取一个，至多不限，最后取光者胜利。两堆物品a,b , c=floor((b-a)*((sqrt(5.0)+1)/2)); 若a==c则后手赢，反之先手赢</strong></em></p><p><em><strong>例题：</strong></em></p><p>hdu 1527 取石子游戏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若符合奇异局势，则先手输，否则先手胜</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)swap(a,b);</span><br><span class="line">c=<span class="built_in">floor</span>((b-a)*((<span class="built_in">sqrt</span>(<span class="number">5.0</span>)+<span class="number">1</span>)/<span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span>(a==c)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="四尼姆博弈和sg函数有关"><a class="markdownIt-Anchor" href="#四尼姆博弈和sg函数有关"></a> （四）尼姆博弈（和SG函数有关）</h3><p><strong>理论:</strong> 来吧，还是出门左转 <a href="https://www.cnblogs.com/jiangjun/archive/2012/11/01/2749937.html">传送门</a></p><p><em><strong>结论：有任意堆物品，每堆物品的个数是任意的，双方轮流从中取物品，每一次只能从一堆物品中取部分或全部物品，最少取一件，取到最后一件物品的人获胜。 结论就是：把每堆物品数全部异或起来，如果得到的值为0，那么先手必败，否则先手必胜。</strong></em></p><ul><li><strong>重点</strong>：<br /><em><strong>SG函数算是博弈里最重要的部分了，菜鸡经过几天的学习也算是略有了解 ，不是太清楚的可以搜大佬的博客了解一下（等自己对SG有自己理解时再来更新</strong></em></li></ul><p><em><strong>总结：无一例外要算sg函数，如果游戏的sg值为0（即各个点的异或和为0），先手必败，反之先手胜利</strong></em></p><p><em><strong>例题：</strong></em></p><p>hdu 1850 Being a Good Boy in Spring Festival</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&amp;&amp;m)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">ans^=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> k=ans^a[i];</span><br><span class="line"><span class="keyword">if</span>(k&lt;a[i])&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>hdu 1847 Good Luck in CET-4 Everybody!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">15</span>],sg[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mex</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sg[x] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> sg[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1005</span>; ++i)</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> temp=x-a[i];</span><br><span class="line"><span class="keyword">if</span>(temp&lt;<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">sg[temp]=mex(temp);</span><br><span class="line">vis[sg[temp]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">sg[x]=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sg[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; ++i) &#123;</span><br><span class="line">a[i]=a[i<span class="number">-1</span>]*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line"><span class="built_in">memset</span>(sg,<span class="number">-1</span>,<span class="keyword">sizeof</span>(sg));</span><br><span class="line"><span class="keyword">if</span>(mex(n)) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Kiki&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Cici&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)) &#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cici\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Kiki\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poj 2960 S-Nim</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">200</span>],sg[<span class="number">10020</span>],vis[<span class="number">20000</span>];</span><br><span class="line"><span class="keyword">int</span> k,m;</span><br><span class="line"><span class="keyword">int</span> l,h[<span class="number">200</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSg</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">sg[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//主要是让终止状态的sg为0</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=k &amp;&amp; s[j] &lt;= i; j++) &#123;</span><br><span class="line">vis[sg[i-s[j]]]=i;<span class="comment">//将所有后继的sg标记为i，然后找到后继的sg没有出现过的最小正整数</span></span><br><span class="line"><span class="comment">//优化：注意这儿是标记成了i，刚开始标记成了1，这样每次需初始化mk，而标记成i就不需要了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(vis[j] == i) j++;</span><br><span class="line">sg[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k)!=EOF &amp;&amp; k) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,s+i);</span><br><span class="line">&#125;</span><br><span class="line">sort(s+<span class="number">1</span>,s+<span class="number">1</span>+k);</span><br><span class="line">getSg(<span class="number">10005</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=l; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,h+i);</span><br><span class="line">ans^=sg[h[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;W&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;L&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>luogu 1290 欧几里德的游戏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> T, m, n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!m)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (n/m == <span class="number">1</span>)<span class="keyword">return</span> !solve(m, n%m);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">if</span> (solve(max(n, m), min(n, m)))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stan wins\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Ollie wins\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><s>更新.jpg</s></p><p>💩</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树基础模板</title>
      <link href="2018/11/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/"/>
      <url>2018/11/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>重温了一遍线段树</p><p><a href="https://blog.csdn.net/zearot/article/details/48299459">https://blog.csdn.net/zearot/article/details/48299459</a></p><p>luogu板子题https://www.luogu.org/problemnew/show/P3372</p><h3 id="查询区间和"><a class="markdownIt-Anchor" href="#查询区间和"></a> 查询区间和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>],add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">sum[rt]=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[rt])&#123;</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>]+=add[rt];</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt];</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>]+=add[rt]*ln;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt]*rn;</span><br><span class="line">add[rt]=<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//range change</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line">sum[rt]+=C*(r-l+<span class="number">1</span>);</span><br><span class="line">add[rt]+=C;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">update(L,R,C,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line">update(L,R,C,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">ans+=query(L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line">ans+=query(L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i);</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">ll t,x,y,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class="line">update(x,y,k,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(x,y,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改区间查询最值"><a class="markdownIt-Anchor" href="#修改区间查询最值"></a> 修改区间查询最值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll mx;</span><br><span class="line">ll mi;</span><br><span class="line">&#125; s[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">s[rt].mx=max(s[rt&lt;&lt;<span class="number">1</span>].mx,s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx);</span><br><span class="line">s[rt].mi=min(s[rt&lt;&lt;<span class="number">1</span>].mi,s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">s[rt].mx=a[l];</span><br><span class="line">s[rt].mi=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[rt]) &#123;</span><br><span class="line">add[rt&lt;&lt;<span class="number">1</span>]+=add[rt],add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>].mx+=add[rt],s[rt&lt;&lt;<span class="number">1</span>].mi+=add[rt];</span><br><span class="line">s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx+=add[rt],s[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi+=add[rt];</span><br><span class="line">add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) &#123;</span><br><span class="line">s[rt].mx+=C,s[rt].mi+=C;</span><br><span class="line">add[rt]+=C;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) &#123;</span><br><span class="line">update(L,R,C,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) &#123;</span><br><span class="line">update(L,R,C,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;S :&quot;</span>&lt;&lt;s[<span class="number">1</span>].mx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[<span class="number">1</span>].mi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">update(l,r,<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; :&quot;</span>&lt;&lt;s[<span class="number">1</span>].mx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[<span class="number">1</span>].mi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路算法桶（Dijkstra，Floyd，Bellman-Ford，Spfa）</title>
      <link href="2018/11/14/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95%E6%A1%B6/"/>
      <url>2018/11/14/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<p><em><strong>自己对最短路的简单总结并不涉及详解</strong></em></p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h2 id="1dijkstra"><a class="markdownIt-Anchor" href="#1dijkstra"></a> 1.Dijkstra</h2><p><em><strong>算法思想</strong></em>：（求单源最短路，朴素算法复杂度O(n^2)，堆优化O(nlogn)</p><p>将点分为两类，一类为已被更新最短距离的点为“标记点”，另一类为还没有被更新最短距离的点为“未标记点”。初始dist[i]=INF</p><p>一开始将起点到起点的距离标记为0，加入优先队列（dist从小到大排序）；每次取dist最小的点（即与起始点距离最小的点）设为“标记点”，然后枚举和该点相连的点，更新他们的最短路dist[i]，更新的原则就是以该点为中转点，更新方程为dist[i]=min(dist[j]+nw,dist[i]) [ j为中转点，i为更新点，w为j到i的权值 ] 然后将与该点相关联的点都加入队列，循环往复，直到队列为空。最后全部的点都访问完毕时，dist都被更新，即起点到到该点的最短路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,ss,ee;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点 </span></span><br><span class="line">ll dis; <span class="comment">//起始点到该点的最短距离 </span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id; </span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll dist[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[start]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(start,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nid=ne.id;</span><br><span class="line"><span class="keyword">if</span>(dist[nto]&gt;dist[np]+nw) &#123;</span><br><span class="line">dist[nto]=dist[np]+nw;</span><br><span class="line">q.push(node(nto,dist[nto])); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;ss,&amp;ee);</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//无向图建图 </span></span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">e[y].push_back(edge(i,x,w));</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(ss);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[ee]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>例题：<a href="https://www.luogu.org/problemnew/show/P2384">https://www.luogu.org/problemnew/show/P2384</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">9987</span>;</span><br><span class="line">ll n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点 </span></span><br><span class="line">ll dis; <span class="comment">//起始点到该点的最短距离 </span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id; </span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll dist[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nid=ne.id;</span><br><span class="line"><span class="keyword">if</span>(dist[np]==<span class="number">0</span>)&#123;</span><br><span class="line">dist[nto]=(dist[np]+nw)%mod;</span><br><span class="line">q.push(node(nto,dist[nto]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dist[nto]&gt;dist[np]*nw) &#123;</span><br><span class="line">dist[nto]=(dist[np]*nw)%mod;</span><br><span class="line">q.push(node(nto,dist[nto])); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//有向图建图 </span></span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[n]%mod&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="2floyd"><a class="markdownIt-Anchor" href="#2floyd"></a> 2.Floyd</h2><p><em><strong>算法思想</strong></em>：(求多源最短路，算法复杂度O(n^3)</p><p>3层循环，第一层枚举中间点k(以k为中转点)，第二层与第三层枚举两个端点i，j。若有dis[i][j] &gt; dis[i][k] + dis[k][j] 则把dis[i][j]更新成dis[i][k] + dis[k][j]。不断去更新dis[i][j],就是一种dp的思想，因为算法复杂度高，一般只有数据量小的时候才用得上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=INT_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=INT_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll e[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>e[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);<span class="comment">//有向图建图</span></span><br><span class="line">e[x][y]=w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++) &#123; <span class="comment">//经过k点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; <span class="comment">//枚举起点终点，看路径能不能减少</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">if</span>(e[i][j]&gt;e[i][k]+e[k][j])</span><br><span class="line">e[i][j]=e[i][k]+e[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;<span class="comment">//从i到j的最短距离 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：<a href="https://www.luogu.org/problemnew/show/P2888">https://www.luogu.org/problemnew/show/P2888</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=INT_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=INT_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,k;</span><br><span class="line">ll e[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>e[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">e[x][y]=w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">e[i][j]=min(max(e[i][k],e[k][j]),e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(e[x][y]==INF)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;e[x][y]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3bellman-ford"><a class="markdownIt-Anchor" href="#3bellman-ford"></a> 3.Bellman-Ford</h2><p>***算法思想：**<em>Bellman-Ford也是来算单源最短路的，但是复杂度是O(v</em>e),是高于Dijkstra的，但是它可以用来检测负权回路，和带负值的最短路。</p><p>就是经过v-1次松弛（初始点固定了，最差的情况也是每一次松弛只松弛一个点，有v-1个），每次去尝试所有的边能否去松弛各个点。松弛过后，如果再进行一次松弛还能被松弛的话，则说明存在负权回路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line"><span class="keyword">int</span> v,e;</span><br><span class="line"><span class="comment">//顶点和边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; tt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bellmanFord</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">dist[src]=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;v; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;e; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> s=tt[j].s;</span><br><span class="line"><span class="keyword">int</span> e=tt[j].e;</span><br><span class="line"><span class="keyword">int</span> w=tt[j].w;</span><br><span class="line"><span class="keyword">if</span>(dist[s]!=INF &amp;&amp; dist[e]&gt;dist[s]+w) &#123;</span><br><span class="line">dist[e]=dist[s]+w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测负权回路</span></span><br><span class="line"><span class="keyword">bool</span> isBack=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;e; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> s=tt[j].s;</span><br><span class="line"><span class="keyword">int</span> e=tt[j].e;</span><br><span class="line"><span class="keyword">int</span> w=tt[j].w;</span><br><span class="line"><span class="keyword">if</span>(dist[s]!=INF &amp;&amp; dist[e]&gt;dist[s]+w) &#123;</span><br><span class="line">isBack=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isBack;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v&gt;&gt;e;</span><br><span class="line"><span class="keyword">int</span> ns,ne,nw;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ns&gt;&gt;ne&gt;&gt;nw;</span><br><span class="line">tt.push_back(edge &#123;ns,ne,nw&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> res=bellmanFord(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(res) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;有负权回路&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;无负权回路&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=v; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4spfa"><a class="markdownIt-Anchor" href="#4spfa"></a> 4.Spfa</h2><p>***算法思想：***SPFA 算法是 Bellman-Ford算法 的队列优化算法的别称，通常用于求含负权边的单源最短路径，以及判负权环。</p><p>用一个先进先出的队列来维护，每次取出队首结点p,然后用该点去松弛和它相连的点to，如果到dist[to]被减小，并且此时队列中没有这个点，那就将其加入队列（因为，队列只是维护的点，假设t已经在队列中，相同的点t存储的dist信息是一样的，这里dist[t]被减小，再将t点加入队列毫无意义），直到队列为空。</p><ul><li><strong>判断负权环</strong>：如果一个点被加入队列次数超过顶点数V，则存在负权环。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dist[maxn];<span class="comment">//距离</span></span><br><span class="line"><span class="keyword">int</span> pushnum[maxn];<span class="comment">//入队次数</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];<span class="comment">//是否入队中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; tt[maxn];</span><br><span class="line"><span class="keyword">int</span> N,M,S;</span><br><span class="line"><span class="comment">//点数，边数，起点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(pushnum,<span class="number">0</span>,<span class="keyword">sizeof</span>(pushnum));</span><br><span class="line">dist[start]=<span class="number">0</span>;</span><br><span class="line">vis[start]=<span class="literal">true</span>;</span><br><span class="line">pushnum[start]++;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(start);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> p=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[p]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)tt[p].size(); ++i) &#123;</span><br><span class="line">edge tmp=tt[p][i];</span><br><span class="line"><span class="keyword">if</span>(dist[tmp.to]&gt;dist[p]+tmp.w) &#123;</span><br><span class="line">dist[tmp.to]=dist[p]+tmp.w;</span><br><span class="line"><span class="keyword">if</span>(vis[tmp.to]==<span class="literal">false</span>) &#123;</span><br><span class="line">q.push(tmp.to);</span><br><span class="line">vis[tmp.to]=<span class="literal">true</span>;</span><br><span class="line">pushnum[tmp.to]++;</span><br><span class="line"><span class="keyword">if</span>(pushnum[tmp.to]&gt;N) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; ++i) &#123;<span class="comment">//有向图建图</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">tt[x].push_back(edge &#123;y,z&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(spfa(S)) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dist[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;有负环&quot;</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D. Edge Deletion</title>
      <link href="2018/11/13/Edge%20Deletion/"/>
      <url>2018/11/13/Edge%20Deletion/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1076/problem/D">传送门</a></p><p>学习来自于：<a href="http://www.cnblogs.com/Lubixiaosi-Zhaocao/p/9951711.html">http://www.cnblogs.com/Lubixiaosi-Zhaocao/p/9951711.html</a></p><p>题目大意：</p><p>一个无向图，各点到点1的最短距离为di，保证满足条件删除m-k条边之后使得到点1的距离仍为di的点数量最多的情况下，输出剩余的k条边的编号（输入顺序即编号）</p><p>思路：<br />因为都是和1的最短距离，是单源最短路，所以应该会用到Dijkstra算法，但是他要输出剩余的k条边，这里可以用一个bfs，贪心从1号开始取和以1号为前驱为最短距离的边，然后再将这条边的另一个节点加入队列。所以在跑Dijkstra时，要保存到点i最短路的前驱father[i], 最后就是在这一颗由最短路构成的树上bfs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll p; <span class="comment">//当前点 </span></span><br><span class="line">ll dis; <span class="comment">//到改点的距离 </span></span><br><span class="line">node(ll np=<span class="number">0</span>,ll ndis=<span class="number">0</span>) &#123;</span><br><span class="line">p=np,dis=ndis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">ll id; </span><br><span class="line">ll to;</span><br><span class="line">ll w;</span><br><span class="line">edge(ll nid=<span class="number">0</span>,ll nto=<span class="number">0</span>,ll nw=<span class="number">0</span>) &#123;</span><br><span class="line">id=nid,to=nto,w=nw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll father[maxn],faedge[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll dist[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">father[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(node(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> np=tmp.p;</span><br><span class="line"><span class="keyword">if</span>(vis[np])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">vis[np]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e[np].size(); ++i) &#123;</span><br><span class="line">edge ne=e[np][i];</span><br><span class="line">ll nto=ne.to;</span><br><span class="line">ll nw=ne.w;</span><br><span class="line">ll nid=ne.id;</span><br><span class="line"><span class="keyword">if</span>(dist[nto]&gt;dist[np]+nw) &#123;</span><br><span class="line">dist[nto]=dist[np]+nw;</span><br><span class="line">father[nto]=np; <span class="comment">//记录nto的前驱 （相当于父亲 </span></span><br><span class="line">faedge[nto]=nid; <span class="comment">//并记录nto的前驱边 </span></span><br><span class="line">q.push(node(nto,dist[nto])); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()&amp;&amp;k&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;son[tmp].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v=son[tmp][i];</span><br><span class="line"><span class="keyword">if</span>(k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">ans.push_back(faedge[v]);</span><br><span class="line">q.push(v);</span><br><span class="line">k--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">ll x,y,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">e[x].push_back(edge(i,y,w));</span><br><span class="line">e[y].push_back(edge(i,x,w));</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">son[father[i]].push_back(i); <span class="comment">//将父亲关系转化成儿子关系 </span></span><br><span class="line">&#125;</span><br><span class="line">bfs();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.size(); ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><s>不写这个我都快把最短路给忘了</s></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lyft Level 5 Challenge 2018 - Final Round (Open Div. 2)A,B,C</title>
      <link href="2018/11/11/Lyft%20Level%205%20Challenge%202018%20-%20Final%20Round%20(Open%20Div.%202)A,B,C/"/>
      <url>2018/11/11/Lyft%20Level%205%20Challenge%202018%20-%20Final%20Round%20(Open%20Div.%202)A,B,C/</url>
      
        <content type="html"><![CDATA[<p>感觉这场的题面都好长，看的脑壳子疼（英语不好，啊我挂了</p><p><a href="http://codeforces.com/contest/1075">http://codeforces.com/contest/1075</a></p><h1 id="a-the-kings-race"><a class="markdownIt-Anchor" href="#a-the-kings-race"></a> A. The King’s Race</h1><p>考虑对角线为分界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>((x+y)&lt;=n+<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;White&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Black&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="b-taxi-drivers-and-lyft"><a class="markdownIt-Anchor" href="#b-taxi-drivers-and-lyft"></a> B. Taxi drivers and Lyft</h1><p>每个0都会选择离他近的1，预处理一下每个0的前后最近的1的位置，然后跑一边就能算出每个0应该会归属哪个1了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll res[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">ll pre;</span><br><span class="line">ll last;</span><br><span class="line">&#125;tt[maxn];</span><br><span class="line">ll x[maxn];</span><br><span class="line">ll type[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,x+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,type+i);</span><br><span class="line">&#125;</span><br><span class="line">ll pp=<span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;<span class="comment">//更新前驱 </span></span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">0</span>)&#123;</span><br><span class="line">tt[i].pre=pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pp=i;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">ll la=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n+m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;<span class="comment">//更新后继 </span></span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">0</span>)&#123;</span><br><span class="line">tt[i].last=la;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">la=i;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m+n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(tt[i].last==<span class="number">1e9</span>+<span class="number">5</span>)&#123;</span><br><span class="line">res[tt[i].pre]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tt[i].pre==(<span class="number">-1e9</span>))&#123;</span><br><span class="line">res[tt[i].last]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ll xx=x[i]-x[tt[i].pre];</span><br><span class="line">ll yy=x[tt[i].last]-x[i];</span><br><span class="line"><span class="keyword">if</span>(xx&lt;=yy)&#123;</span><br><span class="line">res[tt[i].pre]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res[tt[i].last]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(type[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c-the-tower-is-going-home"><a class="markdownIt-Anchor" href="#c-the-tower-is-going-home"></a> C. The Tower is Going Home</h1><p><a href="http://codeforces.com/contest/1075/problem/C">http://codeforces.com/contest/1075/problem/C</a></p><p>去除最少的线使得可以从（1，1）到（x，1e9）由于数据比较大，模拟是不可能的。简单分析这是一道思维题，必须要化繁为简</p><p>（做这种思维题，就脑糊；我不喜欢思维题，不，我喜欢</p><p>竖置的线是贯通的都需要考虑，而横置的线如果不是从1开始，那就不需要考虑（大不了走到最左端穿过</p><p>竖置的线（x轴上的坐标）和有效的横置的线（右端点）都从小到大排序</p><p>竖置的线将整个棋盘分成了n+1个区域，考虑从每个区域到达（x，1e9）的花费，取最少的即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line">ll n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,x+i);</span><br><span class="line">&#125;</span><br><span class="line">sort(x,x+n);</span><br><span class="line"><span class="keyword">int</span> x1,x2,y1,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x1,&amp;x2,&amp;y1);</span><br><span class="line"><span class="keyword">if</span>(x1==<span class="number">1</span>)&#123;</span><br><span class="line">h[num++]=x2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x2==INF)ans++;</span><br><span class="line">&#125;</span><br><span class="line">sort(h,h+num);</span><br><span class="line">ans+=n;<span class="comment">//走到最最右端再向上的情况</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,cnt=num;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;num&amp;&amp;h[j]&lt;x[i])&#123;</span><br><span class="line">cnt--;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">ans=min(ans,cnt+i); </span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1356 The Balance &amp;&amp; POJ2142</title>
      <link href="2018/11/11/(HDU)1356%20The%20Balance%20&amp;&amp;%20POJ2142/"/>
      <url>2018/11/11/(HDU)1356%20The%20Balance%20&amp;&amp;%20POJ2142/</url>
      
        <content type="html"><![CDATA[<p>重新复习了一遍扩展欧几里德（一开始学的都忘了，丧</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1356">http://acm.hdu.edu.cn/showproblem.php?pid=1356</a></p><p>这道题一眼就可以看出来是扩展欧几里德，但是将答案解出来了之后，还要找到符合他条件的答案，这样算出来的答案已经是符合条件1了，条件2是（x+y）最小，条件3是（ax+by）最小</p><p>算出来的x，y有正有负，正即放在天平左边，负即和物品放在天平右边</p><p>因为a|x|=b|y|+c,要求a|x|+b|y|最小，如果a|x|减小，（即|x|减小），因为天平两边一样重，所以|y|也要减小，当a|x|+b|y|最小时，就是|x|+|y|最小时（可能不是很严谨，这也是我脑糊的</p><p>于是题意就变成了求|x|+|y|的最小值了。x 和 y 是不定式 ax+by=c 的解。可由扩展欧几里德算出通式</p><p>x=x1+b/d*t ；</p><p>y=y1-a/d*t ；</p><p>|x|+|y|=|x0+b/d<em>t|+|y0-a/d</em>t|，我们规定 a&gt;b（不行就交换），从这个式子中，我们可以发现：|x0+b/d<em>t|是单调递增的，|y0-a/d</em>t|是单调递减的，而由于我们规定了 a&gt;b，那么减的速度是要大于增的速度，于是整个函数减少的要比增加的快，但是由于绝对值的符号的作用，最终函数还是递增的。也就是说，函数是凹的，先减小，再增大。那么什么时候最小呢？很显然是 y0-a/d<em>t==0 的时候，于是我们的最小值|x|+|y|也一定是在 t=y0</em>d/a附近了，只要在附近枚举几个值就能找到最优解了（我枚举了5个，应该判断一下2个就行了，但是我懒，不想想了。。。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line">ll a1,b1,d1,x,y,r;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">exgcd(b,a%b);</span><br><span class="line">ll k=x;</span><br><span class="line">x=y;</span><br><span class="line">y=k-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r=a;</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;a1,&amp;b1,&amp;d1)&amp;&amp;a1||b1||d1)&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a1&lt;b1)&#123;</span><br><span class="line">swap(a1,b1);</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">exgcd(a1,b1);</span><br><span class="line"><span class="keyword">if</span>(d1%r!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no solution&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ll x1=x*(d1/r),y1=y*(d1/r);</span><br><span class="line"><span class="comment">//通解 x=x1+b1/r*t , y=y1-a1/r*t ，其中 t 为整数</span></span><br><span class="line">ll resx=x1,resy=y1;</span><br><span class="line">ll mid=y1*r/a1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=mid<span class="number">-2</span>;i&lt;=mid+<span class="number">2</span>;++i)&#123;</span><br><span class="line">ll xx=x1+b1/r*i;</span><br><span class="line">ll yy=y1-a1/r*i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(xx)+<span class="built_in">abs</span>(yy)&lt;<span class="built_in">abs</span>(resx)+<span class="built_in">abs</span>(resy))&#123;</span><br><span class="line">resx=xx,resy=yy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(resx)&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="built_in">abs</span>(resy)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(resy)&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="built_in">abs</span>(resx)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上我学习扩展欧几里德的网址https://www.cnblogs.com/hadilo/p/5914302.html</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 扩展欧几里得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人赛 Codeforces Round 411 (Div. 2)A，B，C，D，E，hdu1356</title>
      <link href="2018/11/10/%E4%B8%AA%E4%BA%BA%E8%B5%9B1/"/>
      <url>2018/11/10/%E4%B8%AA%E4%BA%BA%E8%B5%9B1/</url>
      
        <content type="html"><![CDATA[<p>可以说打的非常失败，咕了</p><h1 id="a-a-fake-np"><a class="markdownIt-Anchor" href="#a-a-fake-np"></a> A A. Fake NP</h1><p><a href="http://codeforces.com/problemset/problem/805/A">http://codeforces.com/problemset/problem/805/A</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line">ll le,ri;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri);</span><br><span class="line"><span class="keyword">if</span>(le==ri) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,le);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交了6法不谈了</p><h1 id="b-b-3-palindrome"><a class="markdownIt-Anchor" href="#b-b-3-palindrome"></a> B B. 3-palindrome</h1><p><a href="http://codeforces.com/problemset/problem/805/B">http://codeforces.com/problemset/problem/805/B</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> flaga = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> flagb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line"><span class="keyword">if</span> (flaga) &#123;</span><br><span class="line">arr[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n) arr[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">flaga = <span class="number">0</span>;</span><br><span class="line">flagb = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">arr[i] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n) arr[i] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">flaga = <span class="number">1</span>;</span><br><span class="line">flagb = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始一直re，真的已经心态蹦了</p><h1 id="c-c-find-amir"><a class="markdownIt-Anchor" href="#c-c-find-amir"></a> C C. Find Amir</h1><p><a href="http://codeforces.com/problemset/problem/805/C">http://codeforces.com/problemset/problem/805/C</a></p><p>虽然放在C题，但还是很简单的，随便推一下就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(n/<span class="number">2</span><span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d"><a class="markdownIt-Anchor" href="#d"></a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1356">D</a></h1><p>初步看了一下是扩展欧几里德，但没有做出来，待补</p><p>撸完了题解感觉比E难多了，<a href="https://blog.csdn.net/TDD_Master/article/details/83958544">https://blog.csdn.net/TDD_Master/article/details/83958544</a></p><h1 id="e-d-minimum-number-of-steps"><a class="markdownIt-Anchor" href="#e-d-minimum-number-of-steps"></a> E D. Minimum number of steps</h1><p><a href="http://codeforces.com/problemset/problem/805/D">http://codeforces.com/problemset/problem/805/D</a></p><p>推到出来，但因为没有取模，而wa 确实了，太心急</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">ll mmod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span> </span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">res=res*x%mod;</span><br><span class="line">x=x*x%mod;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">ll numa=<span class="number">0</span>,numb=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.size();) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;b&#x27;</span>&amp;&amp;numa!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i; j&lt;s.size(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]==<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll numb=j-i;</span><br><span class="line">i=j;</span><br><span class="line">ll tmp=(numb*(mod_pow(<span class="number">2</span>,numa,mmod)<span class="number">-1</span>));</span><br><span class="line">res=(res+tmp) %mmod;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">numa++;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res%mmod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e"><a class="markdownIt-Anchor" href="#e"></a> <a href="http://codeforces.com/problemset/problem/805/E">E</a></h1><p>题都没看，待补</p><p>果然没补 💤</p><p>待更新——————————————————总结，个人赛太紧张了，要多打比赛才行，哎</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 44 (Rated for Div. 2) D. Sand Fortress</title>
      <link href="2018/11/07/Educational%20Codeforces%20Round%2044%20(Rated%20for%20Div.%202)%20D.%20Sand%20Fortress/"/>
      <url>2018/11/07/Educational%20Codeforces%20Round%2044%20(Rated%20for%20Div.%202)%20D.%20Sand%20Fortress/</url>
      
        <content type="html"><![CDATA[<p>传送 <a href="http://codeforces.com/contest/985/problem/D">http://codeforces.com/contest/985/problem/D</a></p><p>n堆沙子，最左边的沙子的最大高度不能超过H，让你在一个从1到正无穷的一维平面内放沙子，且要满足相邻两个坐标的沙子的高度不能超过1。问所需要的最小长度。</p><p>题目要求相邻两个坐标的沙子的高度不能超过1，那么左右边的那堆沙子高度肯定是1，所以沙子的摆放方式有两种，一种是从高度为H递减（每次-1），另一种是先增后减，像一个山的形状。可以发现每个部分都是一个d=1的等差数列。分析之后，就可以二分长度了。但要注意的是等差数列求和是x*(x+1)/2，因为数据n最大为1e18，所以右边界必须自己设置一个比如2e9，不然右边界直接用n是肯定会爆long long的。</p><ul><li><p>当枚举长度 x&lt;=H 时：最优的摆放是一个递减的等差数列，这样放的沙包最多（不理解可以画图看看</p></li><li><p>当枚举长度 x&gt;H 时:最优的摆放肯定就是一个山的形状了，但要当心当x-H为奇数的情况，最高点有两个并列的</p></li></ul><p>当H为3时，x=6：H 3 4 4 3 2 1 ，x=7 ：H 3 4 5 4 3 2 1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll cnt=<span class="number">2e9</span>;</span><br><span class="line">ll n,H;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=H) &#123;</span><br><span class="line"><span class="keyword">return</span> x*(x+<span class="number">1</span>)/<span class="number">2</span>&gt;=n;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ll a=(x+H)/<span class="number">2</span>;<span class="comment">//最高点</span></span><br><span class="line"><span class="keyword">if</span>((x-H)%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a*(a+<span class="number">1</span>)/<span class="number">2</span>+(a+H)*(a+<span class="number">1</span>-H)/<span class="number">2</span>&gt;=n;<span class="comment">//奇数</span></span><br><span class="line"><span class="keyword">return</span> a*(a+<span class="number">1</span>)/<span class="number">2</span>+(a<span class="number">-1</span>+H)*(a-H)/<span class="number">2</span>&gt;=n;<span class="comment">//偶数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;H);</span><br><span class="line">ll le=<span class="number">0</span>,ri=min(n+<span class="number">1</span>,cnt);</span><br><span class="line"><span class="keyword">while</span>(ri&gt;le) &#123; <span class="comment">//二分长度</span></span><br><span class="line">ll mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))</span><br><span class="line">ri=mid;</span><br><span class="line"><span class="keyword">else</span> le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;le&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 第十五届浙大宁波理工校赛(A,B,D,E,F,H,I,J,K,L)</title>
      <link href="2018/11/07/(Nowcoder)%20%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%B5%99%E5%A4%A7%E5%AE%81%E6%B3%A2%E7%90%86%E5%B7%A5%E6%A0%A1%E8%B5%9B/"/>
      <url>2018/11/07/(Nowcoder)%20%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%B5%99%E5%A4%A7%E5%AE%81%E6%B3%A2%E7%90%86%E5%B7%A5%E6%A0%A1%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/303#question">传送门</a></p><p>A.<a href="https://ac.nowcoder.com/acm/contest/303/A">StarCraft</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">1998</span>+n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B.<a href="https://ac.nowcoder.com/acm/contest/303/B">Fibonacci and Counting</a></p><p>这道题的答案看样例应该还是挺好猜的。其实就是gcd(F(x),F(x+1))先要变成gcd((F(x+1),F(x))),然后变成gcd(F(x),F(x-1)),因为斐波那契F(x+1)=F(x)+F(x-1),所以F(x+1)是肯定小于2*F(x),  F(x+1)%F(x)=F(x+1)-F(x)=F(x-1),gcd(F(x),F(x-1))变成gcd(2,1)-&gt;gcd(1,0),需要n次，在加一次交换位置，n+1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C.<a href="https://ac.nowcoder.com/acm/contest/303/C">LCPS</a></p><p>菜.jpg；</p><p>D.Campaign</p><p>七层循环暴力枚举就可以了，优雅一点就深搜</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> R[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> step, <span class="keyword">long</span> <span class="keyword">long</span> ll, <span class="keyword">long</span> <span class="keyword">long</span> rr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//现在点   第几步   到该点的总下线  到该点的总上限</span></span><br><span class="line">    ll += L[now];</span><br><span class="line">    rr += R[now];</span><br><span class="line">    <span class="keyword">if</span> (ll &lt;= n &amp;&amp; rr &gt;= n)&#123;</span><br><span class="line">    ans = max(ans, step);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(ll &gt; n)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = now+<span class="number">1</span>; i &lt;= <span class="number">7</span>; ++i) &#123;</span><br><span class="line">        dfs(i, step+<span class="number">1</span>, ll, rr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; L[i] &gt;&gt; R[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; ++i) &#123;</span><br><span class="line">            dfs(i, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E.<a href="https://ac.nowcoder.com/acm/contest/303/E">Build Pylons</a></p><p>排个序,从前往后建造就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll pos[maxn];</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(pos+<span class="number">1</span>, pos+<span class="number">1</span>+n);</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> dis = pos[i] - pos[i<span class="number">-1</span>];</span><br><span class="line">ll tmp = <span class="number">0</span>;</span><br><span class="line">ll tired = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (dis) &#123;</span><br><span class="line">tmp += tired*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">dis--;</span><br><span class="line">tired++;</span><br><span class="line">&#125;</span><br><span class="line">ans += tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans + k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F.Pylon Link</p><p>二分答案半径，用并查集来维护，如果两点距离小于2*R，那就将他们联通，最后检验是不是都被联通了。爆int还wa了好几发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">2e11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">double</span> x[maxn],y[maxn],dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> f[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unity</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=find(x),v=find(y);</span><br><span class="line">f[u]=v;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i][j]&lt;=<span class="number">2</span>*mid) &#123;</span><br><span class="line"><span class="keyword">if</span>(find(i)!=find(j))</span><br><span class="line">unity(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ff=find(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( find(i)!=ff ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> line;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;line;</span><br><span class="line"><span class="keyword">while</span>(line--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">double</span> L=inf,R=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">dis[i][j]=<span class="built_in">sqrt</span>( (x[i]-x[j])*(x[i]-x[j]) +(y[i]-y[j])*(y[i]-y[j]) );</span><br><span class="line">L=min(L,dis[i][j]);</span><br><span class="line">R=max(R,dis[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">ll l=<span class="number">0</span>,r=inf;</span><br><span class="line"><span class="keyword">while</span>(r&gt;l) &#123;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>G.<a href="https://ac.nowcoder.com/acm/contest/303/G">Rubik’s Cube</a></p><p>菜.jpg</p><p>H.<a href="https://ac.nowcoder.com/acm/contest/303/H">Protoss and Zerg</a></p><p>这个还是很好推的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y) &#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) (ans*=x)%=mod;</span><br><span class="line">(x*=x)%=mod;</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> line;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;line);</span><br><span class="line"><span class="keyword">while</span>(line--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--) &#123;</span><br><span class="line">ll a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">res*=((fpow(<span class="number">2</span>,a)<span class="number">-1</span>)+(fpow(<span class="number">2</span>,b)<span class="number">-1</span>));</span><br><span class="line">res%=mod;</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I.Race Sorting</p><p>模拟题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;t;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;z;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;p;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> rank[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">memset</span>(rank, <span class="number">0</span>, <span class="keyword">sizeof</span>(rank));</span><br><span class="line">t.clear();</span><br><span class="line">z.clear();</span><br><span class="line">p.clear();</span><br><span class="line">ans.clear();</span><br><span class="line"><span class="keyword">int</span> n, tmp;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tmp &gt;&gt; s &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="string">&quot;Terran&quot;</span>)</span><br><span class="line">t.push_back(tmp);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">&quot;Zerg&quot;</span>)</span><br><span class="line">z.push_back(tmp);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p.push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> pos1 = s.find(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"><span class="keyword">int</span> pos2 = s.find(<span class="string">&#x27;,&#x27;</span>, pos1+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (s[pos1<span class="number">-1</span>] == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">rank[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[pos1<span class="number">-1</span>] == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">rank[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">rank[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (s[pos2<span class="number">-1</span>] == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">rank[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[pos2<span class="number">-1</span>] == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">rank[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">rank[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (rank[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">ans.insert(ans.end(), p.begin(), p.end());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">ans.insert(ans.end(), t.begin(), t.end());</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">ans.insert(ans.end(), z.begin(), z.end());</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (rank[<span class="number">0</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">ans.insert(ans.end(), p.begin(), p.end());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[<span class="number">1</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">ans.insert(ans.end(), t.begin(), t.end());</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">ans.insert(ans.end(), z.begin(), z.end());</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (rank[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">ans.insert(ans.end(), p.begin(), p.end());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">ans.insert(ans.end(), t.begin(), t.end());</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">ans.insert(ans.end(), z.begin(), z.end());</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>J.<a href="https://ac.nowcoder.com/acm/contest/303/J">Carrier</a></p><p>签到题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="keyword">int</span> a,b,x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">350</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;You have not enough minerals.&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(b&lt;<span class="number">250</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;You require more vespene gas.&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(x+<span class="number">6</span>&gt;y) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;You must construct additional pylons.&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Carrier has arrived.&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>K.Technology Tree</p><p>深搜一下，记录每个点的需要的矿和瓦斯</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,q;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PP</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line">PP m[maxn];</span><br><span class="line">PP res[maxn];</span><br><span class="line"><span class="keyword">int</span> degree[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function">PP <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[s])&#123;</span><br><span class="line"><span class="keyword">return</span> res[s];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[s]==s) &#123;</span><br><span class="line"><span class="keyword">return</span> PP &#123;m[s].k,m[s].w&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PP tmp=dfs(f[s]);</span><br><span class="line">res[s]=PP&#123;tmp.k+m[s].k,tmp.w+m[s].w&#125;;</span><br><span class="line">vis[s]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> res[s];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m[i].k&gt;&gt;m[i].w;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">res[i].k=m[i].k;</span><br><span class="line">res[i].w=m[i].w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span> ,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;f[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">res[i]=dfs(i);</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res[x].k&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;res[x].w&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>L.The Last Stand</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">-0x3f3f3f3f</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll dp[maxn][maxn];</span><br><span class="line"><span class="comment">//到i点  状态为j  的生命值 </span></span><br><span class="line">ll val[maxn];</span><br><span class="line">ll delta[maxn];</span><br><span class="line">ll pos[maxn];</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">ll n, m;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos[i] &gt;&gt; val[i] &gt;&gt; delta[i];</span><br><span class="line">dis[i] = pos[i] - pos[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">dis[n+<span class="number">1</span>] = m-pos[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i<span class="number">-1</span>][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j] + dis[i]*delta[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dp[i][j] &lt; <span class="number">1</span>)</span><br><span class="line">dp[i][j] = inf;</span><br><span class="line"><span class="keyword">if</span> (dp[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">dp[i][i] = max(dp[i][i], dp[i][j] + val[i]);</span><br><span class="line"><span class="keyword">if</span> (dp[i][i] &lt; <span class="number">1</span>)</span><br><span class="line">dp[i][i] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[n][j] &gt; <span class="number">0</span>)</span><br><span class="line">ans = max(ans, dp[n][j] + dis[n+<span class="number">1</span>]*delta[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1659 Frogs&#39; Neighborhood</title>
      <link href="2018/11/06/(POJ)%201659%20Frogs&#39;%20Neighborhood/"/>
      <url>2018/11/06/(POJ)%201659%20Frogs&#39;%20Neighborhood/</url>
      
        <content type="html"><![CDATA[<p>老师说是阿基米定律的题，根据每个点的度数判断这些点能不能构成图。</p><p>实则用起来我认为是一种贪心的思想，举个栗子：（首先不可能有点的度数为负</p><ul><li>（1）各个点的度数 4 3 1 5 4 2 1 （每次都从大到小排序）</li></ul><p>5 4 4 3 2 1 1，先解决度数最多的点他有5个邻居（是邻居，那度数-1），当然是优先考虑他后面的5个，因为是相较而言邻居（度数）比较多的，如果先考虑度数少的，那它的度数很快为负，显然不合理</p><p>3 3 2 1 1 0 -&gt; 2 1 1 0 0 -&gt; 0 0 0 0  最后变成了一个全是0的序列，说明各个点的度数恰好匹配，能构成一个所给序列度数的图。</p><ul><li>（2）各个点的度数 4 3 1 4 2 0</li></ul><p>4 4 3 2 1 0 -&gt; 3 2 1 0 0 -&gt;1 0 -1 0 出现一个点a的度数为负数了，说明这个图肯定构成不了了，因为是从大到小排序的，所以最大的点选择和a或a后面的点当邻居，都会使其度数为负</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;f[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> tt[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(S a,S b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num&gt;b.num; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">sort(f+i,f+<span class="number">1</span>+N,cmp);<span class="comment">//每次去掉一个最大的排序</span></span><br><span class="line"><span class="keyword">int</span> num=f[i].num;<span class="comment">//最大的那个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=i+num;++j)&#123;<span class="comment">//在这个数后面的num位都-1，减去一个度</span></span><br><span class="line">tt[f[i].id][f[j].id]=<span class="number">1</span>;<span class="comment">//标记一下他们是联通的</span></span><br><span class="line">tt[f[j].id][f[i].id]=<span class="number">1</span>;</span><br><span class="line">f[j].num--;<span class="comment">//度数-1</span></span><br><span class="line"><span class="keyword">if</span>(f[j].num&lt;<span class="number">0</span>)&#123;<span class="comment">//如果度数&lt;0了，则说明这个图不能联通了，因为度数不可能为负数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(tt,<span class="number">0</span>,<span class="keyword">sizeof</span>(tt));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;f[i].num;</span><br><span class="line">f[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(solve())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tt[i][j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Luogu) P1434 [SHOI2002]滑雪</title>
      <link href="2018/11/06/(Luogu)%20P1434%20%5BSHOI2002%5D%E6%BB%91%E9%9B%AA/"/>
      <url>2018/11/06/(Luogu)%20P1434%20%5BSHOI2002%5D%E6%BB%91%E9%9B%AA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1434#sub">https://www.luogu.org/problemnew/show/P1434#sub</a></p><p>这个题如果直接bfs或者dfs，因为每个点都要搜，所以必定会T，可以用个数组，类似记忆化搜索，去减少搜索时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> R,C,ans;</span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> Len[maxn][maxn];<span class="comment">//记录(i,j)点的最大深度，即从(i,j)点的为始下滑最长长度 </span></span><br><span class="line"><span class="keyword">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]= &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Len[i][j])<span class="keyword">return</span> Len[i][j];</span><br><span class="line">Len[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">4</span>; ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = i + dx[k];</span><br><span class="line"><span class="keyword">int</span> ny = j + dy[k];</span><br><span class="line"><span class="keyword">if</span> (nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=R&amp;&amp;ny&gt;=<span class="number">1</span>&amp;&amp;ny&lt;=C&amp;&amp;Map[i][j]&gt;Map[nx][ny])</span><br><span class="line">Len[i][j]=max(Len[i][j],<span class="number">1</span>+dfs(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Len[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;R,&amp;C);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Map[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(Len,<span class="number">0</span>,<span class="keyword">sizeof</span>(Len));</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j) &#123;</span><br><span class="line">ans=max(dfs(i,j),ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我一开始是每个点都去bfs一下，bfs的过程去不断更新起始点到到该点的最大长度，居然只T了两个点，其他的点跑的还挺快的</p><p>丧~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> R,C,ans;</span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> Len[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]= &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt; q;</span><br><span class="line">Len[i][j]=<span class="number">1</span>;</span><br><span class="line">T tmp;</span><br><span class="line">tmp.x=i,tmp.y=j;</span><br><span class="line">q.push(tmp);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">T tmp=q.front(),t;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> lle=Len[tmp.x][tmp.y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nx=tmp.x+dx[i];</span><br><span class="line"><span class="keyword">int</span> ny=tmp.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=R&amp;&amp;ny&gt;=<span class="number">1</span>&amp;&amp;ny&lt;=C&amp;&amp;Map[tmp.x][tmp.y]&gt;Map[nx][ny]) &#123;</span><br><span class="line">t.x=nx,t.y=ny;</span><br><span class="line"><span class="keyword">if</span>(Len[nx][ny]==<span class="number">0</span>)&#123;</span><br><span class="line">Len[nx][ny]=max(Len[nx][ny],lle+<span class="number">1</span>);</span><br><span class="line">q.push(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Len[nx][ny]&lt;lle+<span class="number">1</span>)&#123;</span><br><span class="line">Len[nx][ny]=max(Len[nx][ny],lle+<span class="number">1</span>);</span><br><span class="line">q.push(t);</span><br><span class="line">&#125;</span><br><span class="line">ans=max(ans,Len[nx][ny]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;R,&amp;C);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Map[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=C;++j)&#123;</span><br><span class="line"><span class="built_in">memset</span>(Len,<span class="number">0</span>,<span class="keyword">sizeof</span>(Len));</span><br><span class="line">bfs(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Luogu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Div.2) C. Vasya and Robot</title>
      <link href="2018/11/05/Vasya%20and%20Robot/"/>
      <url>2018/11/05/Vasya%20and%20Robot/</url>
      
        <content type="html"><![CDATA[<p>这个题目第一眼看并不是一个二分，仔细思考一下，要枚举长度，然后又要枚举起点，这里已经是O(n^2)的复杂度了，还要判断是否满足条件，如果预处理了，是能在O(1)的复杂度解决的。所以枚举长度这边可以用一个二分，这样复杂度就是O(nlogn)了，可以解决这个题目。</p><p>如何在O(n)的复杂度判断这个长度满不满足要求呢？</p><p>枚举起点就要O(n)了，接下来就是O(1)判断O不OK；预处理到第i个字母时往右往上偏移了几位，那么枚举到一段区间的时候，我们可以将那一段区间的操作全部撤销（反正全改，长度也是len），那么此时的位置移到目标点最少的操作num 就是现在的位置和终点在X轴上的偏移量+Y轴上的偏移量，如果len&gt;num,那么len-num一定要是偶数，这样上下左右才可以抵消。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,ex,ey;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></span><br><span class="line">ll r,u;</span><br><span class="line">&#125;f[maxn]; </span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;++i)&#123;</span><br><span class="line">ll rr=f[i+len<span class="number">-1</span>].r-f[i<span class="number">-1</span>].r,uu=f[i+len<span class="number">-1</span>].u-f[i<span class="number">-1</span>].u;<span class="comment">//区间r和u的偏移量</span></span><br><span class="line">ll num=<span class="built_in">abs</span>(ex-(f[n].r-rr))+<span class="built_in">abs</span>(ey-(f[n].u-uu));<span class="comment">//所需要的最小操作数</span></span><br><span class="line"><span class="keyword">if</span>(len&gt;=num&amp;&amp;(len-num)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="comment">//说明可以走到终点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line">f[<span class="number">0</span>].r=<span class="number">0</span>,f[<span class="number">0</span>].u=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);<span class="comment">//预处理</span></span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;R&#x27;</span>)f[i].r=f[i<span class="number">-1</span>].r+<span class="number">1</span>,f[i].u=f[i<span class="number">-1</span>].u;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;L&#x27;</span>)f[i].r=f[i<span class="number">-1</span>].r<span class="number">-1</span>,f[i].u=f[i<span class="number">-1</span>].u;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;U&#x27;</span>)f[i].u=f[i<span class="number">-1</span>].u+<span class="number">1</span>,f[i].r=f[i<span class="number">-1</span>].r;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">&#x27;D&#x27;</span>)f[i].u=f[i<span class="number">-1</span>].u<span class="number">-1</span>,f[i].r=f[i<span class="number">-1</span>].r;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;ex,&amp;ey);</span><br><span class="line"><span class="keyword">if</span>(f[n].r==ex&amp;&amp;f[n].u==ey)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> le=<span class="number">0</span>,ri=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ri&gt;le)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(le+ri)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(pd(mid))ri=mid;</span><br><span class="line"><span class="keyword">else</span>le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span>&lt;&lt;le&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 2018 Best Cow Fences</title>
      <link href="2018/11/05/(POJ)%202018%20Best%20Cow%20Fences/"/>
      <url>2018/11/05/(POJ)%202018%20Best%20Cow%20Fences/</url>
      
        <content type="html"><![CDATA[<p>是一道经典的二分题（可我一开始并不会做 <a href="http://poj.org/problem?id=2018">http://poj.org/problem?id=2018</a></p><p>从题意来看很快就能分析出这是一道二分题，而且应该是二分答案，但难点就是如何在O（n）的复杂度内判断它是否满足条件，具体的解释我已经注释上了，还是不太清楚的，可以结合画图来看。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> N,F;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">double</span> tmp[maxn],ssum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> mid)</span></span>&#123;<span class="comment">//核心 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">tmp[i]=(<span class="keyword">double</span>)f[i]-mid;<span class="comment">//每个剪掉平均值，即去找有没有一段和&gt;=0且长度&gt;=F </span></span><br><span class="line">ssum[i]=ssum[i<span class="number">-1</span>]+tmp[i];<span class="comment">//前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">-1</span>,mmin=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=F;i&lt;=N;++i)&#123; <span class="comment">//以i为右端点，可取长度&gt;=F的，即左端点可以在1~i-F+1里取 </span></span><br><span class="line"><span class="comment">//不断跟新小于平均值的那一部分(前缀和越小，小于0，说明他达不到mid平均值</span></span><br><span class="line">mmin=min(mmin,ssum[i-F]); <span class="comment">//只会拉低平均值 </span></span><br><span class="line">ans=max(ans,ssum[i]-mmin);<span class="comment">//剪掉拉低平均值的，即得到以i为右端点最大的平均值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;F);</span><br><span class="line"><span class="keyword">int</span> mmax=<span class="number">-1</span>,mmin=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,f+i);</span><br><span class="line">mmax=max(mmax,f[i]);</span><br><span class="line">mmin=min(mmin,f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> le=<span class="keyword">double</span>(mmin),ri=<span class="keyword">double</span>(mmax);</span><br><span class="line"><span class="keyword">while</span>(ri-le&gt;(<span class="keyword">double</span>)<span class="number">1e-6</span>)&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(le+ri)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(cmp(mid))</span><br><span class="line">le=mid;</span><br><span class="line"><span class="keyword">else</span>ri=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)(ri*<span class="number">1000</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) E 诡异数字（数位dp）</title>
      <link href="2018/10/21/(Nowcoder)%20E%20%E8%AF%A1%E5%BC%82%E6%95%B0%E5%AD%97/"/>
      <url>2018/10/21/(Nowcoder)%20E%20%E8%AF%A1%E5%BC%82%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>牛客小白月赛8真的打的自闭了，感觉一点都不小白 T_T (肯定是我太菜了，没错就是这样的)</p><p>题目链接https://www.nowcoder.com/acm/contest/214/E</p><p>题解说这是一个非常简单的数位dp，没接触过，感觉挺难的（大概这就是菜吧）</p><p>先稍微了解了一下数位dp，附上写的非常好的数位dp详解https://blog.csdn.net/wust_zzwh/article/details/52100392</p><p>然后看懂了大佬的代码，敲了一下再附上了我的理解.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">20020219</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line">ll lim[<span class="number">20</span>],len[<span class="number">20</span>];<span class="comment">//lim分别记录每个数的最大重复次数，没有就置大 </span></span><br><span class="line">ll a[<span class="number">100</span>][<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//len将数存入数组，每个位置也代表着上限 </span></span><br><span class="line"><span class="comment">//  pos   pre   num</span></span><br><span class="line"><span class="comment">// 记录着位数为pos(包括前导0，0012也算4位数)，前驱是pre，前驱重复数为num的满足条件的个数</span></span><br><span class="line"><span class="comment">// pos位的每一个位置的范围都是0-9，(就是代表完整的pos位数) </span></span><br><span class="line">ll le,ri,n; </span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">bool</span> limit,<span class="keyword">int</span> pre,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;lim[pre])<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//超过pre允许出现的最大次数，返回0 </span></span><br><span class="line"><span class="keyword">if</span>(pos==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 0位返回1 </span></span><br><span class="line"><span class="keyword">if</span>(!limit &amp;&amp; a[pos][pre][num]!=<span class="number">-1</span>) <span class="keyword">return</span> a[pos][pre][num];<span class="comment">//前驱不是上限，而且被更新过直接用 </span></span><br><span class="line"><span class="comment">//如果前驱是上限，则后面上限也受到限制，不是一个完整的pos位，故不可用 </span></span><br><span class="line"><span class="keyword">int</span> up=limit?len[pos]:<span class="number">9</span>; <span class="comment">//如果前驱达到上限，则这个位置的上限为解决数的上限</span></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;++i) &#123;</span><br><span class="line">sum=(sum+dfs(pos<span class="number">-1</span>,limit&amp;&amp;i==len[pos],i,i==pre?num+<span class="number">1</span>:<span class="number">1</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> limit?sum:a[pos][pre][num]=sum;<span class="comment">//前驱不是上限就更新，否则直接return </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll xx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xx==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ll cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(xx)&#123;</span><br><span class="line">len[++cnt]=xx%<span class="number">10</span>;<span class="comment">//每一位放入数组，cnt代表位数 </span></span><br><span class="line">xx/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len[cnt];++i)&#123;<span class="comment">//最高位从0-len[cnt]枚举 </span></span><br><span class="line">ans=(ans+dfs(cnt<span class="number">-1</span>,i==len[cnt],i,<span class="number">1</span>))%mod;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">fill(lim,lim+<span class="number">11</span>,<span class="number">0xffffffff</span>);</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;le,&amp;ri,&amp;n);</span><br><span class="line">ll xx,max_num;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;xx,&amp;max_num);</span><br><span class="line">lim[xx]=min(lim[xx],max_num);<span class="comment">//更新 xx最大能出现lim[xx]次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(solve(ri)-solve(le<span class="number">-1</span>)+mod)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round</title>
      <link href="2018/10/06/Codeforces%20Round%20#514/"/>
      <url>2018/10/06/Codeforces%20Round%20#514/</url>
      
        <content type="html"><![CDATA[<h2 id="a-cashier"><a class="markdownIt-Anchor" href="#a-cashier"></a> A. Cashier</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll n,L,a; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;L,&amp;a);</span><br><span class="line"><span class="keyword">int</span> le=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s,h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;h);</span><br><span class="line">num+=(s-le)/a;</span><br><span class="line">le=s+h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L&gt;le)&#123;</span><br><span class="line">num+=(L-le)/a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="b-forgery"><a class="markdownIt-Anchor" href="#b-forgery"></a> B. Forgery</h2><p>我是先记录了要填的地方和不能填的地方，然后去把能填的地方全都填起来，最后检查一下 如果还是有的要填的地方还没被填好，那就NO，否则YES</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> M[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> xx[]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> yy[]=&#123;<span class="number">1</span> ,<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">look</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(M[x+xx[i]][y+yy[i]]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">flag2=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(M[x+xx[i]][y+yy[i]]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">flag1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag1&amp;&amp;flag2)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line">M[x+xx[i]][y+yy[i]]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">char</span> tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tt;</span><br><span class="line"><span class="keyword">if</span>(tt==<span class="string">&#x27;#&#x27;</span>)M[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span>M[i][j]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">3</span>||m&lt;<span class="number">3</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m<span class="number">-1</span>;++j)&#123;</span><br><span class="line">look(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(M[i][j]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-sequence-transformation"><a class="markdownIt-Anchor" href="#c-sequence-transformation"></a> C. Sequence Transformation</h2><p>一段连续数的最大公约数是1，所以第一步肯定是要把1先删除，要不然最大公约数不可能超过1，接下来最想让他出现的最大公约数是2（因为是字典序），所有偶数都可以被2整除，而一串奇数的最大公约数就是1了（除了n==3这种情况，特判一下），很明显接下来的就是将奇数全部删除，而剩下的偶数每次将间隔的删去，公约数就会乘2（比如2 4 6 8 10，删除2 6 10）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="comment">//const ll maxn=1e5+5;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,res=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>,res,res,res*<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>+n%<span class="number">2</span>;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,res);</span><br><span class="line">n/=<span class="number">2</span>;</span><br><span class="line">res*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018徐州网络赛F,H,I</title>
      <link href="2018/09/11/2018%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
      <url>2018/09/11/2018%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>只能来划水，只做了3题。</p><p>F：队友切的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> line,k,T,ans,x,y,len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;line);</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=line;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(!mp[<span class="built_in">make_pair</span>(x,y)].empty()&amp;&amp;mp[<span class="built_in">make_pair</span>(x,y)].back() ==i ) <span class="keyword">continue</span>;</span><br><span class="line">mp[<span class="built_in">make_pair</span>(x,y)].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v=it-&gt;second; </span><br><span class="line"><span class="keyword">if</span>(!v.size()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.size(); ++i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (v[i]-v[i - <span class="number">1</span>]==<span class="number">1</span>)len++;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">ans = max(ans, len);</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>H：所求的答案就是从l开始的前缀和，用线段树维护前缀和就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100007  <span class="comment">//元素总个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls l,m,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs m+1,r,rt&lt;&lt;1|1</span></span><br><span class="line">ll Sum[maxn&lt;&lt;<span class="number">2</span>],Add[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//Sum求和，Add为懒惰标记 </span></span><br><span class="line">ll A[maxn];<span class="comment">//存原数组数据下标[1,n] </span></span><br><span class="line">ll X[maxn];</span><br><span class="line">ll n,q;</span><br><span class="line"><span class="comment">//PushUp函数更新节点信息 ，这里是求和</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(ll rt)</span></span>&#123;Sum[rt]=Sum[rt&lt;&lt;<span class="number">1</span>]+Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(ll rt,ll ln,ll rn)</span></span>&#123;</span><br><span class="line"><span class="comment">//ln,rn为左子树，右子树的数字数量。 </span></span><br><span class="line"><span class="keyword">if</span>(Add[rt])&#123;</span><br><span class="line"><span class="comment">//下推标记 </span></span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>]+=Add[rt];</span><br><span class="line">Add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt];</span><br><span class="line"><span class="comment">//修改子节点的Sum使之与对应的Add相对应 </span></span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>]+=Add[rt]*ln;</span><br><span class="line">Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=Add[rt]*rn;</span><br><span class="line"><span class="comment">//清除本节点标记 </span></span><br><span class="line">Add[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Build函数建树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(ll l,ll r,ll rt)</span></span>&#123; <span class="comment">//l,r表示当前节点区间，rt表示当前节点编号</span></span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;<span class="comment">//若到达叶节点 </span></span><br><span class="line">Sum[rt]=A[l];<span class="comment">//储存数组值 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//左右递归 </span></span><br><span class="line">Build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="comment">//更新信息 </span></span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(ll L,ll R,ll C,ll l,ll r,ll rt)</span></span>&#123;<span class="comment">//L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;<span class="comment">//如果本区间完全在操作区间[L,R]以内 </span></span><br><span class="line">Sum[rt]+=C*(r-l+<span class="number">1</span>);<span class="comment">//更新数字和，向上保持正确</span></span><br><span class="line">Add[rt]+=C;<span class="comment">//增加Add标记，表示本区间的Sum正确，子区间的Sum仍需要根据Add的值来调整</span></span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m);<span class="comment">//下推标记</span></span><br><span class="line"><span class="comment">//这里判断左右子树跟[L,R]有无交集，有交集才递归 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) Update(L,R,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) Update(L,R,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line">PushUp(rt);<span class="comment">//更新本节点信息 </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">Query</span><span class="params">(ll L,ll R,ll l,ll r,ll rt)</span></span>&#123;<span class="comment">//L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="comment">//在区间内，直接返回 </span></span><br><span class="line"><span class="keyword">return</span> Sum[rt];</span><br><span class="line">&#125;</span><br><span class="line">ll m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//下推标记，否则Sum可能不正确</span></span><br><span class="line">PushDown(rt,m-l+<span class="number">1</span>,r-m); </span><br><span class="line"></span><br><span class="line"><span class="comment">//累计答案</span></span><br><span class="line">ll ANS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m) ANS+=Query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt;  m) ANS+=Query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ANS;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">ll temp;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,X+i);</span><br><span class="line">A[i]=A[i<span class="number">-1</span>]+X[i];</span><br><span class="line">&#125;</span><br><span class="line">Build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ll x,y,z;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;q;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123;<span class="comment">//查询 </span></span><br><span class="line">ll count=z-y+<span class="number">1</span>;</span><br><span class="line">ll ans=Query(y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=ans-count*(Query(y<span class="number">-1</span>,y<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//修改 </span></span><br><span class="line">ll ago=X[y];</span><br><span class="line">X[y]=z;</span><br><span class="line">ll change=z-ago;</span><br><span class="line">Update(y,n,change,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I:ans是0的时候结果是1，结果导致Wa了12发。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>,&amp;N,&amp;ch);</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>((<span class="keyword">int</span>)(ch-s[i]))!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = (N-i)*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>((<span class="keyword">int</span>)(ch-s[i]))&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans==<span class="number">0</span>?<span class="number">1</span>:ans);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ string字符串截取</title>
      <link href="2018/09/05/C++%20string%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/"/>
      <url>2018/09/05/C++%20string%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>很久没写题连string字符串的截取都忘了；</p><p>附上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;abaacd&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> res=s.substr(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//从第一个位置截取4个字符串</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//输出 baac </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>再附上一题http://codeforces.com/contest/1029/problem/A感觉自己写的挺麻烦的饿。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX; </span><br><span class="line"><span class="keyword">int</span> k,t;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;k&gt;&gt;t&gt;&gt;s)&#123;</span><br><span class="line"><span class="built_in">string</span> res=s;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;s.size();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[<span class="number">0</span>])&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;i: &quot;&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;s.size();++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[num]!=s[j])&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=s.size())&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=s.size())&#123;</span><br><span class="line">temp=s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t<span class="number">-1</span>;++k)&#123;</span><br><span class="line">res+=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">temp=s.substr(num,s.size()-num);</span><br><span class="line"><span class="comment">//cout&lt;&lt;temp&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t<span class="number">-1</span>;++k)&#123;</span><br><span class="line">res+=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">res.clear();</span><br><span class="line">temp.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树prim&amp;&amp;kruscal 和 模板题</title>
      <link href="2018/09/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91&amp;%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
      <url>2018/09/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91&amp;%E6%A8%A1%E6%9D%BF%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这是我原来的prim太不优美了，今天重打一发</p><p>最小生成树两种算法的原理可以看https://www.cnblogs.com/adforce/p/3247437.html写的很好很清楚，我就不班门弄斧了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=INT_MAX;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="keyword">int</span> dir[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;<span class="comment">//存取路径 </span></span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn]=&#123; &#123;INF,<span class="number">7</span>,<span class="number">4</span>,INF,INF,INF&#125;,  <span class="comment">//INF代表两点之间不可达</span></span><br><span class="line">&#123;<span class="number">7</span>,INF,<span class="number">6</span>,<span class="number">2</span>,INF,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">6</span>,INF,INF,<span class="number">9</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;INF,<span class="number">2</span>,INF,INF,INF,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;INF,INF,<span class="number">9</span>,INF,INF,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;INF,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">1</span>,INF&#125;</span><br><span class="line">&#125;;<span class="comment">//连通情况</span></span><br><span class="line"><span class="function">ll <span class="title">prim</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;<span class="comment">//返回最小生成树的路径和 </span></span><br><span class="line">path.clear();</span><br><span class="line">path.push_back(cur);</span><br><span class="line"><span class="comment">//cout&lt;&lt;cur&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> root=cur;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit)); </span><br><span class="line">visit[cur]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">dir[i]=Map[root][i];<span class="comment">//初始化各个点到树的长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;maxn;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=INF;</span><br><span class="line"><span class="keyword">int</span> aid;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;maxn;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visit[j]&amp;&amp;dir[j]&lt;temp)&#123;<span class="comment">//找到到这棵树距离最小奥德点</span></span><br><span class="line">aid=j;</span><br><span class="line">temp=dir[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res+=temp;</span><br><span class="line">visit[aid]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;aid&lt;&lt;endl;</span></span><br><span class="line">path.push_back(aid);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;maxn;++j)&#123;<span class="comment">//更新各个点到这棵树的路径</span></span><br><span class="line"><span class="keyword">if</span>(!visit[j]&amp;&amp;dir[j]&gt;Map[aid][j])&#123;</span><br><span class="line">dir[j]=Map[aid][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;path.size()<span class="number">-1</span>;++i)<span class="comment">//打印路径，或者直接上面的cout就行了 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;path[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;path[path.size()<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//填充Map</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;prim(<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> prim</h1><p>瞟了一手基友的代码，用优先队列优化了，所以比原来的prime效率更高。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">7</span>; </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;a.val;<span class="comment">//优先队列默认从大到小 </span></span><br><span class="line">&#125;<span class="comment">//所以反一下让他从小到大排序 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">1</span>].size();++i)&#123;</span><br><span class="line">q.push(G[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[tmp.to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[tmp.to]=<span class="number">1</span>;</span><br><span class="line">ans+=tmp.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[tmp.to].size();++i)&#123;</span><br><span class="line">q.push(G[tmp.to][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//填邻接表 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;prim()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="kruscal"><a class="markdownIt-Anchor" href="#kruscal"></a> kruscal</h1><p>感觉并查集加不加入按秩合并，对效率的影响并不是很高（欢迎指正</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,father[size],rankk[size]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//边 </span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">node(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)</span></span>&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;edge[size*size/<span class="number">2</span>];<span class="comment">//如果给了边的数量，则用给的，否则会爆 </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">father[i]=i;</span><br><span class="line">rankk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//查找父亲节点顺便路径压缩 </span></span><br><span class="line"><span class="keyword">if</span>(x!=father[x])&#123;</span><br><span class="line">father[x]=find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//合并x,y所在的两个集合：利用Find_Set找到其中两个</span></span><br><span class="line"><span class="comment">//集合的祖先，将一个集合的祖先指向另一个集合的祖先。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//按秩合并</span></span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//不用按秩合并</span></span><br><span class="line">father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">if(rankk[x]&lt;rankk[y])&#123;</span></span><br><span class="line"><span class="comment">father[x]=find(y);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else&#123;</span></span><br><span class="line"><span class="comment">if(rankk[x]==rankk[y])&#123;</span></span><br><span class="line"><span class="comment">rankk[x]++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">father[y]=find(x);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为边的数量 </span></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">make_set();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(find(edge[i].s)!=find(edge[i].e))&#123;</span><br><span class="line">Union(edge[i].s,edge[i].e);</span><br><span class="line">sum+=edge[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//边的数量 </span></span><br><span class="line"><span class="comment">//建边 </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">sort(edge,edge+cnt,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruskal(cnt)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>大佬的总结：</p><p>方法上：Kruskal在所有边中不断寻找最小的边，Prim在U和V两个集合之间寻找权值最小的连接，共同点是构造过程都不能形成环。</p><p>时间上：Prim适合稠密图，复杂度为O(n * n)，因此通常使用邻接矩阵储存，复杂度为O(e * loge)，而Kruskal多用邻接表，稠密图 Prim &gt; Kruskal，稀疏图 Kruskal &gt; Prim。</p><p>空间上： Prim适合点少边多，Kruskal适合边多点少。</p><p>附上几到板子题，供君测试练习</p><p><a href="http://hihocoder.com/problemset/problem/1097">http://hihocoder.com/problemset/problem/1097</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>+<span class="number">7</span>; </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> t,<span class="keyword">int</span> v)&#123;</span><br><span class="line">to=t,val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">to=t,val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;a.val;<span class="comment">//优先队列默认从大到小 </span></span><br><span class="line">&#125;<span class="comment">//所以反一下让他从小到大排序 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">1</span>].size();++i)&#123;</span><br><span class="line">q.push(G[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node tmp=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[tmp.to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[tmp.to]=<span class="number">1</span>;</span><br><span class="line">ans+=tmp.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[tmp.to].size();++i)&#123;</span><br><span class="line">q.push(G[tmp.to][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">G[i].push_back(node(j,v));</span><br><span class="line">G[j].push_back(node(i,v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;prim()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://hihocoder.com/problemset/problem/1098">http://hihocoder.com/problemset/problem/1098</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> father[size],rankk[size]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//边 </span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">node(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> ss,<span class="keyword">int</span> ee)</span></span>&#123;</span><br><span class="line">val=v,s=ss,e=ee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;edge[<span class="number">1000005</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">father[i]=i;</span><br><span class="line">rankk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//查找父亲节点顺便路径压缩 </span></span><br><span class="line"><span class="keyword">if</span>(x!=father[x])&#123;</span><br><span class="line">father[x]=find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//合并x,y所在的两个集合：利用Find_Set找到其中两个</span></span><br><span class="line"><span class="comment">//集合的祖先，将一个集合的祖先指向另一个集合的祖先。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//按秩合并</span></span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//不用按秩合并</span></span><br><span class="line">father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(rankk[x]&lt;rankk[y])&#123;</span></span><br><span class="line"><span class="comment">//father[x]=find(y);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//if(rankk[x]==rankk[y])&#123;</span></span><br><span class="line"><span class="comment">//rankk[x]++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//father[y]=find(x);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为边的数量 </span></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(find(edge[i].s)!=find(edge[i].e))&#123;</span><br><span class="line">Union(edge[i].s,edge[i].e);</span><br><span class="line">sum+=edge[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//边的数量 </span></span><br><span class="line"><span class="comment">//建边 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">make_set(N+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ss,ee,val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;ss,&amp;ee,&amp;val);</span><br><span class="line">edge[i].setall(val,ss,ee);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge,edge+cnt,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruskal(cnt)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>HDU 1232畅通工程http://acm.hdu.edu.cn/showproblem.php?pid=1232</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">node()&#123;</span><br><span class="line">&#125;</span><br><span class="line">node(<span class="keyword">int</span> t,<span class="keyword">int</span> v)&#123;</span><br><span class="line">to=t;</span><br><span class="line">val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">to=t;</span><br><span class="line">val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> val&gt;a.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">1</span>].size();++i)&#123;</span><br><span class="line">q.push(G[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node t=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[t.to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[t.to]=<span class="number">1</span>;</span><br><span class="line">res+=t.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[t.to].size() ;++i)&#123;</span><br><span class="line">q.push(G[t.to][i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;d);</span><br><span class="line">G[x].push_back(node(y,d));</span><br><span class="line">G[y].push_back(node(x,d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;?&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=prim();</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;m)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;?&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>HDU 1879继续畅通工程http://acm.hdu.edu.cn/showproblem.php?pid=1879</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=LONG_LONG_MAX;</span><br><span class="line"><span class="keyword">const</span> ll inf=LONG_LONG_MIN;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">106</span>;</span><br><span class="line"><span class="keyword">int</span> father[maxn],rankk[maxn];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">node() &#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> ns,<span class="keyword">int</span> ne,<span class="keyword">int</span> v) &#123;</span><br><span class="line">s=ns,e=ne,val=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setall</span><span class="params">(<span class="keyword">int</span> ns,<span class="keyword">int</span> ne,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">s=ns,e=ne,val=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125; edge[maxn*maxn&gt;&gt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">father[i]=i;</span><br><span class="line">rankk[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=father[x]) &#123;</span><br><span class="line">father[x]=find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(rankk[x]&lt;rankk[y])&#123;</span><br><span class="line">father[x]=find(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rankk[x]==rankk[y])&#123;</span><br><span class="line">rankk[x]++;</span><br><span class="line">&#125;</span><br><span class="line">father[y]=find(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(find(edge[i].s)!=find(edge[i].e)) &#123;</span><br><span class="line">Union(edge[i].s,edge[i].e);</span><br><span class="line">ans+=edge[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N)!=EOF&amp;&amp;N) &#123;</span><br><span class="line">make_set(<span class="number">105</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N*(N<span class="number">-1</span>)/<span class="number">2</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x,y,v,p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v,&amp;p);</span><br><span class="line">edge[i].setall(x,y,v);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span>) &#123;</span><br><span class="line">father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge,edge+N*(N<span class="number">-1</span>)/<span class="number">2</span>,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;kruskal(N*(N<span class="number">-1</span>)/<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 高效位运算函数 之 __builtin_</title>
      <link href="2018/08/09/builtin%E5%87%BD%E6%95%B0/"/>
      <url>2018/08/09/builtin%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>1.int ffs(ui x){//该函数判断n的二进制末尾最后一个1的位置，从一开始<br />return __builtin_ffs(x);<br />}</p><p>2.int popcount(ui x){//该函数时判断n的二进制中有多少个1<br />return __builtin_popcount(x);<br />}</p><p>3.int ctz(ui x){//该函数判断n的二进制末尾后面0的个数，当x为0时，和x的类型有关<br />return __builtin_ctz(x);<br />}</p><p>4.int clz(ui x){//x前导0的个数。x=0时和x的类型有关<br />return __builtin_clz(x);<br />}</p><p>5.int parity(ui x){//该函数是判断n的二进制中1的个数的奇偶性<br />return __builtin_parity(x);<br />}</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffs</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数判断n的二进制末尾最后一个1的位置，从一开始</span></span><br><span class="line"><span class="keyword">return</span> __builtin_ffs(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popcount</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数时判断n的二进制中有多少个1</span></span><br><span class="line"><span class="keyword">return</span> __builtin_popcount(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ctz</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数判断n的二进制末尾后面0的个数，当n为0时，和n的类型有关</span></span><br><span class="line"><span class="keyword">return</span> __builtin_ctz(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clz</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//x前导0的个数。x=0时结果未定义。</span></span><br><span class="line"><span class="keyword">return</span> __builtin_clz(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parity</span><span class="params">(ui x)</span></span>&#123;<span class="comment">//该函数是判断n的二进制中1的个数的奇偶性</span></span><br><span class="line"><span class="keyword">return</span> __builtin_parity(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_ffs : &quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ffs(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1二进制1   /输出1 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ffs(<span class="number">8</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//8二进制1000   /输出4 </span></span><br><span class="line"><span class="comment">//要是要输出最后一个一的位置应当-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_popcount : &quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;popcount(<span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1111  /输出4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_ctz :&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ctz(<span class="number">8</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1000 /输出3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_clz :&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;clz(<span class="number">8</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//...1000 /输出28 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__builtin_parity :&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;parity(<span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1111 /偶数个，输出0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;parity(<span class="number">7</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//111 /奇数个，输出1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 2018牛课多校第三场A.C.H</title>
      <link href="2018/07/26/(Nowcoder)%E7%89%9B%E8%AF%BE%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
      <url>2018/07/26/(Nowcoder)%E7%89%9B%E8%AF%BE%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>又一次成功的签到了（大哭~~~~~~）只做了2题然后就一直挂机了，会的慢慢补吧。</p><h2 id="a-pacm-team"><a class="markdownIt-Anchor" href="#a-pacm-team"></a> A PACM Team</h2><p>好吧，从一开始就看错了题目，这是一个四维背包问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, P, A, C, M, p[N], a[N], c[N], m[N], g[N], f[N][N][N][N];</span><br><span class="line"><span class="comment">//f数组记录p,a,c,m人数有N，N，N，N人时的最大取值 </span></span><br><span class="line"><span class="keyword">bool</span> h[N][N][N][N][N];<span class="comment">//记录路径 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; a[i] &gt;&gt; c[i] &gt;&gt; m[i] &gt;&gt; g[i];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; P &gt;&gt; A &gt;&gt; C &gt;&gt; M;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> jp = P; jp &gt;= p[i]; jp --)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ja = A; ja &gt;= a[i]; ja --)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> jc = C; jc &gt;= c[i]; jc --)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> jm = M; jm &gt;= m[i]; jm --)</span><br><span class="line">                        <span class="keyword">if</span> (f[jp - p[i]][ja - a[i]][jc - c[i]][jm - m[i]] + g[i] &gt; f[jp][ja][jc][jm])</span><br><span class="line">                        &#123;</span><br><span class="line">                            f[jp][ja][jc][jm] = f[jp - p[i]][ja - a[i]][jc - c[i]][jm - m[i]] + g[i];</span><br><span class="line">                            h[i][jp][ja][jc][jm] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">    <span class="keyword">int</span> ans[N];</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --)<span class="comment">//恢复路径 即取的队伍 </span></span><br><span class="line">        <span class="keyword">if</span> (h[i][P][A][C][M])</span><br><span class="line">        &#123;</span><br><span class="line">            ans[++ ans[<span class="number">0</span>]] = i - <span class="number">1</span>;</span><br><span class="line">            P -= p[i];</span><br><span class="line">            A -= a[i];</span><br><span class="line">            C -= c[i];</span><br><span class="line">            M -= m[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i ++) <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-shuffle-cards"><a class="markdownIt-Anchor" href="#c-shuffle-cards"></a> C Shuffle Cards</h2><p>rope大法好啊，stl大法好啊，不过还是得去学习一下splay啊</p><p>贴一个rope 不了解的可以戳一下https://blog.csdn.net/iamzky/article/details/38348653</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">rope&lt;<span class="keyword">int</span>&gt; R;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) R.push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        R = R.substr(a<span class="number">-1</span>, b) + R.substr(<span class="number">0</span>, a<span class="number">-1</span>) + R.substr(a+b<span class="number">-1</span>, n-a-b+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, R[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>splay代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, root, ch[maxn][<span class="number">2</span>], s[maxn], v[maxn];</span><br><span class="line"><span class="keyword">bool</span> rev[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ch[o][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ch[o][1]</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; </span><br><span class="line">s[o] = s[lc] + s[rc] + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>&amp; o, <span class="keyword">int</span> d)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> k = ch[o][d^<span class="number">1</span>]; ch[o][d^<span class="number">1</span>] = ch[k][d]; ch[k][d] = o; </span><br><span class="line">maintain(o); maintain(k); o = k;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">rev[o] ^= <span class="number">1</span>; </span><br><span class="line">rev[lc] ^= <span class="number">1</span>; </span><br><span class="line">rev[rc] ^= <span class="number">1</span>; </span><br><span class="line">swap(lc, rc); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(s[lc] + <span class="number">1</span> == k) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"><span class="keyword">return</span> k &lt; s[lc] + <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span>&amp; o, <span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[o]) pushdown(o); <span class="comment">//notice</span></span><br><span class="line"><span class="keyword">int</span> d = cmp(o, k);</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">1</span>) k -= s[lc] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p = ch[o][d];</span><br><span class="line"><span class="keyword">if</span>(rev[p]) pushdown(p); <span class="comment">//notice</span></span><br><span class="line"><span class="keyword">int</span> d2 = cmp(p, k);</span><br><span class="line"><span class="keyword">int</span> k2 = (d2 == <span class="number">0</span>) ? k : k-s[ch[p][<span class="number">0</span>]]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(d2 != <span class="number">-1</span>) &#123;</span><br><span class="line">splay(ch[p][d2], k2);</span><br><span class="line"><span class="keyword">if</span>(d == d2) rotate(o, d^<span class="number">1</span>); <span class="keyword">else</span> rotate(ch[o][d], d);</span><br><span class="line">&#125;</span><br><span class="line">rotate(o, d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span>&amp; o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">splay(o, L); </span><br><span class="line">splay(rc, R - s[lc] + <span class="number">1</span>); <span class="comment">//R+2 - (s[lc]+1)</span></span><br><span class="line">rev[ch[rc][<span class="number">0</span>]] ^= <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line"><span class="keyword">if</span>(L == R) cur = L;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cur = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= cur - <span class="number">1</span>) build(L, cur - <span class="number">1</span>, cur, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">if</span>(cur + <span class="number">1</span> &lt;= R) build(cur + <span class="number">1</span>, R, cur, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">maintain(cur);</span><br><span class="line">ch[p][d] = cur;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> o)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[o]) pushdown(o);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lc) print(lc);</span><br><span class="line"><span class="keyword">if</span>(v[o] != INF) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v[o]);</span><br><span class="line"><span class="keyword">if</span>(rc) print(rc);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">v[<span class="number">1</span>] = v[n + <span class="number">2</span>] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) v[i + <span class="number">1</span>] = i;</span><br><span class="line"></span><br><span class="line">build(<span class="number">1</span>, n + <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">root = (n + <span class="number">3</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l, len;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;len);</span><br><span class="line">rever(root, <span class="number">1</span>,l+len<span class="number">-1</span>);</span><br><span class="line">rever(root,<span class="number">1</span>,len);</span><br><span class="line">rever(root,len+<span class="number">1</span>,l+len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用三次区间翻转，解决平移，不懂得画个图，举个栗子就行了。</p><h2 id="h-diff-prime-pairs"><a class="markdownIt-Anchor" href="#h-diff-prime-pairs"></a> H Diff-prime Pairs</h2><p><img src="https://uploadfiles.nowcoder.com/files/20180717/305345_1531803986831_equation?tex=%5Cfrac%7Bi%7D%7Bgcd%28i%2C%20j%29%7D" alt="img" /> =k1(素数)        <img src="https://uploadfiles.nowcoder.com/files/20180717/305345_1531803986872_equation?tex=%5Cfrac%7Bj%7D%7Bgcd%28i%2Cj%29%7D" alt="img" />=k2(素数）</p><p>相除得到 i/j=k1/k2   当i和j同时乘以一个数t时也是满足这个等式，可知ti 与 tj也是满足条件的一个数对</p><p>所以当我们找到两个在1~n 范围内的素数a,b时，他们的倍数也是满足条件的，那么有几对呢，对数的个数当然是由数值较大的决定，就是n/max（a,b)；</p><p>思路：先求出所给1~n的所有素数 存入数组（2，3，5，7…）</p><p>第一个素数2前面时没有和他配对的，那就从3开始。当算到第i个素数temp时，计算出1~n是temp倍数的个数，然后再乘以temp前面素数的个数（比temp小的素数肯定可以找到和temp相同倍数的数的）。最后不要忘记*2，此题就ok了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000005</span></span><br><span class="line"><span class="keyword">int</span> prime[MAX];<span class="comment">//存放素数 </span></span><br><span class="line"><span class="keyword">bool</span> check[MAX];<span class="comment">//判断是不是素数 0为不是素数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check[i])</span><br><span class="line">                prime[count++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i*prime[j] &gt; MAX)</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 过大的时候跳出</span></span><br><span class="line">                check[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> ((i%prime[j]) == <span class="number">0</span>) <span class="comment">// 如果i是一个合数，而且i % prime[j] == 0</span></span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> all=solve(n);<span class="comment">//素数的个数 </span></span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;all;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=n/prime[i];<span class="comment">//计算出1~n是prime[i]倍数的个数 </span></span><br><span class="line">res+=temp*i;<span class="comment">//乘以出现在prime[i]前面素数的个数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res*<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//(x,y)和(y,x)算两种 所以乘以2 </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(一维&amp;二维&amp;三维)树状数组及其模板 整理</title>
      <link href="2018/07/23/(%E4%B8%80%E7%BB%B4&amp;%E4%BA%8C%E7%BB%B4&amp;%E4%B8%89%E7%BB%B4)%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8F%8A%E5%85%B6%E6%A8%A1%E6%9D%BF/"/>
      <url>2018/07/23/(%E4%B8%80%E7%BB%B4&amp;%E4%BA%8C%E7%BB%B4&amp;%E4%B8%89%E7%BB%B4)%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8F%8A%E5%85%B6%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="一维树状数组"><a class="markdownIt-Anchor" href="#一维树状数组"></a> 一维树状数组</h1><blockquote><p>学习来自https://www.bilibili.com/video/av18735440?from=search&amp;seid=12510069409139918776电子科技大学算法讲堂</p></blockquote><blockquote><p><a href="https://www.cnblogs.com/RabbitHu/p/BIT.html%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BE%B5%E5%88%A0%EF%BC%8C%E6%9C%AC%E6%96%87%E6%8E%A8%E7%90%86%E9%83%BD%E6%9D%A5%E8%87%AA%E8%AF%A5%E6%96%87%E3%80%82">https://www.cnblogs.com/RabbitHu/p/BIT.html大佬的文章，侵删，本文推理都来自该文。</a></p></blockquote><p>这里d数组是我的树状数组,a数组就是初始数组了，让你修改查询的。</p><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=760882210,3135546395&amp;fm=26&amp;gp=0.jpg" alt="img0" /></p><p>​      这就是树状数组的存储方式，不难看出它的存储是和二进制有关的（滑稽，好看出个鬼）举个栗子d[6]=a[5]+a[6]; （6的二进制数是110，末尾一个0，那d[6]就是存储2^1个元素的和） 同理我们也可以验证d[8]=a[1]+…a[8] (因为8的二进制数是1000，有3个零，就是存储2^3个) ； 而查询前缀和，就需要用到lowbit这个函数，非常巧妙，视频说的非常清楚。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125; </span><br><span class="line">x-=lowbit(x);</span><br><span class="line"><span class="keyword">or</span> x+=lowbit(x);</span><br></pre></td></tr></table></figure><p>也可以直接使用 x+=x&amp;(-x) or x-=x&amp;(-x)</p><p>比如查询13这个位置的前缀和 13的二进制数为1101，我们将其拆分为（lowbit就是在此起着至关重要的作用，取得最后一个1）</p><p>1101          d[13]        a[13]         //从后往前以1为末尾，后面全是0</p><p>1100          d[12]        a[9]+a[12]</p><p>1000          d[8]         a[1]+…a[8]</p><p>所以前13的前缀和就是 d[13] +d[12] +d[8]</p><p>而修改和查询的顺序是反的。</p><p><em>这里我搬运了大佬的代码</em></p><h2 id="单点修改区间查询"><a class="markdownIt-Anchor" href="#单点修改区间查询"></a> 单点修改+区间查询</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单点修改+区间查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line">ll sum[maxn],n;<span class="comment">//数组从1开始到n </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//给位置p增加x</span></span><br><span class="line">    <span class="keyword">while</span>(p &lt;= n) sum[p] += x, p += p &amp; -p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123; <span class="comment">//求位置p的前缀和</span></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) res += sum[p], p -= p &amp; -p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123; <span class="comment">//区间求和</span></span><br><span class="line">    <span class="keyword">return</span> ask(r) - ask(l - <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而区间修改的话，其实就是用了一个差分的思想了；</p><p>比如 a数组     1 1 1 1 1</p><p>​    b数组     1 0 0 0 0    b[n]=a[n]-a[n-1]</p><p>我想要再a数组的2~3都加上2；</p><p>​    a数组     1 3 3 3 1</p><p>​    b数组     1 2 0 0 -2  我们发现只要修改b数组两个元素就可以来维护a数组了</p><p>a数组就是b数组的前缀和</p><p>所以区间修改 只要修改俩个元素就行了（舒舒服服）。</p><h2 id="区间修改单点查询"><a class="markdownIt-Anchor" href="#区间修改单点查询"></a> 区间修改+单点查询</h2><p>（这里都搬运的大佬的详解）</p><p><img src="https://img-blog.csdn.net/20180723170043290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img1" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间修改+单点查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e7</span>+<span class="number">5</span>;<span class="comment">//这里可以理解成 原数组是sum数组的前缀和 </span></span><br><span class="line">ll sum[maxn],n;<span class="comment">//数组从1开始到n </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//这个函数用来在树状数组中直接修改</span></span><br><span class="line">    <span class="keyword">while</span>(p &lt;= n) sum[p] += x, p += p &amp; -p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//给区间[l, r]加上x</span></span><br><span class="line">    add(l, x), add(r + <span class="number">1</span>, -x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123; <span class="comment">//单点查询</span></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) res += sum[p], p -= p &amp; -p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="区间修改区间查询"><a class="markdownIt-Anchor" href="#区间修改区间查询"></a> 区间修改+区间查询</h2><p><img src="https://img-blog.csdn.net/20180723170056229?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img2" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间修改+区间查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line">ll d[maxn];<span class="comment">//记录原数组的前缀和 </span></span><br><span class="line">ll sum1[maxn];</span><br><span class="line">ll sum2[maxn];</span><br><span class="line">ll n,M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll p, ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p; i &lt;= n; i += i &amp; -i)</span><br><span class="line">        sum1[i] += x, sum2[i] += x * p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(ll l, ll r, ll x)</span></span>&#123;</span><br><span class="line">    add(l, x), add(r + <span class="number">1</span>, -x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p; i; i -= i &amp; -i)</span><br><span class="line">        res += (p + <span class="number">1</span>) * sum1[i] - sum2[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">range_ask</span><span class="params">(ll l, ll r)</span></span>&#123;<span class="comment">//l到r的区间和 </span></span><br><span class="line">    <span class="keyword">return</span> ask(r) - ask(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先不考虑原数组的影响，直接区间修改修改sum1和sum2</span></span><br><span class="line">    <span class="comment">//最后要求[l,r]的区间和的话 </span></span><br><span class="line"><span class="comment">//结果就是range_ask(l,r)+d[r]-d[l-1]</span></span><br><span class="line"><span class="comment">// d[r]-d[l-1]考虑原数组的前缀和</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="二维树状数组"><a class="markdownIt-Anchor" href="#二维树状数组"></a> 二维树状数组</h1><p>如果不是做题，<s>谁会搞二维数组呢</s>。</p><p>在一维树状数组中，tree[x]（树状数组中的那个“数组”）记录的是右端点为x、长度为lowbit(x)的区间的区间和。<br />那么在二维树状数组中，可以类似地定义tree[x] [y]记录的是右下角为(x, y)，高为lowbit(x), 宽为 lowbit(y)的区间的区间和。</p><p>这个还是比较好理解的。</p><h2 id="单点修改-区间查询"><a class="markdownIt-Anchor" href="#单点修改-区间查询"></a> 单点修改 + 区间查询</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;<span class="comment">//将(x,y) +x</span></span><br><span class="line"><span class="keyword">int</span> py=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n+<span class="number">3</span>)sum[x][y]+=z,y+=y&amp;-y;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//求左上(1,1)右下(x,y)的矩阵和</span></span><br><span class="line">ll res=<span class="number">0</span>,py=y;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y)res+=sum[x][y],y-=y&amp;-y;</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间修改-单点查询"><a class="markdownIt-Anchor" href="#区间修改-单点查询"></a> 区间修改 + 单点查询</h2><p><img src="https://img-blog.csdnimg.cn/20190515150934156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img3" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> py=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n+<span class="number">3</span>)sum[x][y]+=z,y+=y&amp;-y;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">int</span> z)</span></span>&#123;<span class="comment">//给左上(xa,ya)右下(xb,yb)矩阵+z </span></span><br><span class="line">add(xa,ya,z),add(xa,yb+<span class="number">1</span>,-z),add(xb+<span class="number">1</span>,ya,-z),add(xb+<span class="number">1</span>,yb+z,z);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//查询(x,y)这点的值</span></span><br><span class="line">ll res=<span class="number">0</span>,py=y;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y)res+=sum[x][y],y-=y&amp;-y;</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="区间修改-区间查询"><a class="markdownIt-Anchor" href="#区间修改-区间查询"></a> 区间修改 + 区间查询</h2><p><img src="https://img-blog.csdnimg.cn/20190515151116992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RERF9NYXN0ZXI=,size_16,color_FFFFFF,t_70" alt="img4" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line">ll t1[maxn][maxn],t2[maxn][maxn],t3[maxn][maxn],t4[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> py=y;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y&lt;=n+<span class="number">3</span>)&#123;</span><br><span class="line">t1[x][y]+=z,t2[x][y]+=z*x,t3[x][y]+=z*y,t4[x][y]+=z*x*y;</span><br><span class="line">y+=y&amp;-y;</span><br><span class="line">&#125;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">add(xa,ya,z),add(xa,yb+<span class="number">1</span>,-z),add(xb+<span class="number">1</span>,ya,-z),add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>,py=y;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">y=py;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line">res+=(x+<span class="number">1</span>)*(y+<span class="number">1</span>)*t1[x][y]-(y+<span class="number">1</span>)*t2[x][y];</span><br><span class="line">res+=-(x+<span class="number">1</span>)*t3[x][y]+t4[x][y];</span><br><span class="line">y-=y&amp;-y;</span><br><span class="line">&#125;</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">r_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ask(xb,yb)-ask(xb,ya<span class="number">-1</span>)-ask(xa<span class="number">-1</span>,yb)+ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="三维树状数组"><a class="markdownIt-Anchor" href="#三维树状数组"></a> 三维树状数组</h1><h2 id="区间修改-单点修改"><a class="markdownIt-Anchor" href="#区间修改-单点修改"></a> 区间修改 + 单点修改</h2><p>原理和二维一样不过就是再多加了一维。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间修改+单点查询 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn][maxn],n;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=n+<span class="number">2</span>; i+=i&amp;-i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;=n+<span class="number">2</span>; j+=j&amp;-j) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=z; k&lt;=n+<span class="number">2</span>; k+=k&amp;-k)</span><br><span class="line">sum[i][j][k]+=w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">r_add</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> z1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> z2,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">add(x1,y1,z1,w);</span><br><span class="line">add(x1,y2+<span class="number">1</span>,z1,-w);</span><br><span class="line">add(x2+<span class="number">1</span>,y1,z1,-w);</span><br><span class="line">add(x2+<span class="number">1</span>,y2+<span class="number">1</span>,z1,w);</span><br><span class="line"> </span><br><span class="line">add(x1,y1,z2+<span class="number">1</span>,-w);</span><br><span class="line">add(x1,y2+<span class="number">1</span>,z2+<span class="number">1</span>,w);</span><br><span class="line">add(x2+<span class="number">1</span>,y1,z2+<span class="number">1</span>,w);</span><br><span class="line">add(x2+<span class="number">1</span>,y2+<span class="number">1</span>,z2+<span class="number">1</span>,-w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;-i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j;j-=j&amp;-j)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=z;k;k-=k&amp;-k)</span><br><span class="line">res+=sum[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的还没遇到//</p><p>最后膜巨佬！Orz</p><p>完结撒花！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树初体会</title>
      <link href="2018/07/23/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%88%9D%E4%BD%93%E4%BC%9A/"/>
      <url>2018/07/23/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%88%9D%E4%BD%93%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p><strong>花了差不多一天的时间，先大致了解了主席树这个黑科技</strong></p><p>给上一个链接，我觉得是我看的最容易理解的主席树了https://www.cnblogs.com/zyf0163/p/4749042.html</p><p>为了更方便你们理解，我对他的代码增加了我的理解这是一道hdu的题目，一道板子题建议做一下http://acm.hdu.edu.cn/showproblem.php?pid=2665</p><p>这里附上代码详解（不对之处望指正）</p><h1 id="hdu2665"><a class="markdownIt-Anchor" href="#hdu2665"></a> HDU2665</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N], b[N], rt[N * <span class="number">20</span>], ls[N * <span class="number">20</span>], rs[N * <span class="number">20</span>], sum[N * <span class="number">20</span>];</span><br><span class="line"><span class="comment">//rt[]是记录着第几个父节点</span></span><br><span class="line"><span class="comment">//ls[]是左分支 存着对应节点的左分支 </span></span><br><span class="line"><span class="comment">//rs[]是右分支 存着对应节点的右分支</span></span><br><span class="line"><span class="comment">//sum[]是出现的次数 </span></span><br><span class="line"><span class="keyword">int</span> n, k, tot, sz, ql, qr, x, q, T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    o = ++ tot;<span class="comment">//tot是解决存储在sum中的位置 </span></span><br><span class="line">    sum[o] = <span class="number">0</span>;<span class="comment">//初值都是0 </span></span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    Build(ls[o], l, m);<span class="comment">//完善左支 </span></span><br><span class="line">    Build(rs[o], m + <span class="number">1</span>, r);<span class="comment">//再完善右支 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> last, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    o = ++ tot;<span class="comment">//last就是前面的一棵树 </span></span><br><span class="line">    ls[o] = ls[last];</span><br><span class="line">    rs[o] = rs[last];</span><br><span class="line">    sum[o] = sum[last] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= m)  update(ls[o], l, m, ls[last], p);<span class="comment">//根据p出现的位置只更新掉一条路 ,ls[o]被tot更新重新分配了在sum中的位置 </span></span><br><span class="line">    <span class="keyword">else</span> update(rs[o], m + <span class="number">1</span>, r, rs[last], p);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ss, <span class="keyword">int</span> tt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;<span class="comment">//最后返回的是他在b数组里出现的位置 </span></span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = sum[ls[tt]] - sum[ls[ss]];<span class="comment">//在所给的范围中，出现在b数组中l~m位置的个数 </span></span><br><span class="line">    <span class="keyword">if</span>(k &lt;= cnt) <span class="keyword">return</span> query(ls[ss], ls[tt], l, m, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rs[ss], rs[tt], m + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ql, &amp;qr, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> ans = query(rt[ql - <span class="number">1</span>], rt[qr], <span class="number">1</span>, sz, x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[ans]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i), b[i] = a[i];</span><br><span class="line">        sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);<span class="comment">//b数组排序 </span></span><br><span class="line">        sz = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);<span class="comment">//不重复的有多少个 </span></span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        Build(rt[<span class="number">0</span>],<span class="number">1</span>, sz);<span class="comment">//总共有sz个不重复的数，所以最下面一层有1~sz个</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt;= 4 * n; i ++)printf(&quot;%d,rt =  %d,ls =  %d, rs = %d, sum = %d\n&quot;, i, rt[i], ls[i], rs[i], sum[i]);</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)a[i] = lower_bound(b + <span class="number">1</span>, b + sz + <span class="number">1</span>, a[i]) - b;<span class="comment">//a[i]变成记录a[i]元素在b数组中的位置 </span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)update(rt[i], <span class="number">1</span>, sz, rt[i - <span class="number">1</span>], a[i]);<span class="comment">//从1更新到n,主席树完成 </span></span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt;= 5 * n; i ++)printf(&quot;%d,rt =  %d,ls =  %d, rs = %d, sum = %d\n&quot;, i, rt[i], ls[i], rs[i], sum[i]);</span></span><br><span class="line">        <span class="keyword">while</span>(q --)work();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="p3919-模板可持久化数组可持久化线段树平衡树"><a class="markdownIt-Anchor" href="#p3919-模板可持久化数组可持久化线段树平衡树"></a> <a href="https://www.luogu.org/problemnew/show/P3919">P3919 【模板】可持久化数组（可持久化线段树/平衡树）</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(_data,v) memset(_data,v,sizeof(_data))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(n) scanf(<span class="meta-string">&quot;%d&quot;</span>,&amp;n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC(n,m) scanf(<span class="meta-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b)for(int i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],rt[N*<span class="number">20</span>],ls[N*<span class="number">20</span>],rs[N*<span class="number">20</span>];</span><br><span class="line">ll sum[N*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tot,sz; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> &amp;o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">o=++ tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[o]=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(ls[o],l,m);</span><br><span class="line">Build(rs[o],m+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> last,<span class="keyword">int</span> p,<span class="keyword">int</span> c,<span class="keyword">bool</span> fg)</span> </span>&#123;</span><br><span class="line">o=++tot;</span><br><span class="line">ls[o]=ls[last];</span><br><span class="line">rs[o]=rs[last];</span><br><span class="line"><span class="keyword">if</span>(fg) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[o]=c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=m)  update(ls[o],l,m,ls[last],p,c,fg);</span><br><span class="line"><span class="keyword">else</span> update(rs[o],m+<span class="number">1</span>,r,rs[last],p,c,fg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)<span class="keyword">return</span> sum[id];</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=m) <span class="keyword">return</span> query(ls[id],l,m,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(rs[id],m+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,c,d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SC(n,m);</span><br><span class="line">rep(i,<span class="number">1</span>,n) sc(a[i]);</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line">Build(rt[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">sc(x),sc(y),sc(c);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span>)&#123;</span><br><span class="line">sc(d);</span><br><span class="line">update(rt[i],<span class="number">1</span>,n,rt[x],c,d,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(rt[x],<span class="number">1</span>,n,c)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">update(rt[i],<span class="number">1</span>,n,rt[x],<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有什么动态主席树，等变化还需一步步学习（来自菜鸡的叹息）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Nowcoder) 2018牛客多校第二场A，D，I</title>
      <link href="2018/07/22/(Nowcoder)%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/"/>
      <url>2018/07/22/(Nowcoder)%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>只会3道签到题 （哭唧唧） A run ，D money ，I car。<s>（发了3次了还保存不了，不发题解就可以保存了，😇）</s></strong></p><h1 id="1a-run"><a class="markdownIt-Anchor" href="#1a-run"></a> 1.A run</h1><p>题解是用dp，我们是联想到了走楼梯问题，将起看成一次走1米或者走k+1米，这样用个记忆化搜索加前缀和就可以解决这个问题了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">20</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> q,k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ssum[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res[i]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;k)&#123;</span><br><span class="line">res[i]=<span class="number">1</span>;</span><br><span class="line">ssum[i]=i;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==k)&#123;</span><br><span class="line">res[i]=<span class="number">2</span>;</span><br><span class="line">ssum[i]=i+<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==k+<span class="number">1</span>)&#123;</span><br><span class="line">res[i]=<span class="number">3</span>;</span><br><span class="line">ssum[i]=i+<span class="number">3</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line">res[i]=func(i<span class="number">-1</span>)+func(i-k<span class="number">-1</span>);</span><br><span class="line">ssum[i]=ssum[i<span class="number">-1</span>]+res[i];</span><br><span class="line"><span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;q,&amp;k)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(res,<span class="number">0</span>,<span class="keyword">sizeof</span>(res));</span><br><span class="line"><span class="built_in">memset</span>(ssum,<span class="number">0</span>,<span class="keyword">sizeof</span>(ssum));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L,R;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;L,&amp;R);</span><br><span class="line"><span class="keyword">if</span>(ssum[R]!=<span class="number">0</span>&amp;&amp;ssum[L<span class="number">-1</span>]!=<span class="number">0</span>&amp;&amp;ssum[R]-ssum[L<span class="number">-1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ssum[R]-ssum[L<span class="number">-1</span>])%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=L;j&lt;=R;j++)</span><br><span class="line">&#123;</span><br><span class="line">ans+=func(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2money"><a class="markdownIt-Anchor" href="#2money"></a> 2.money</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> value=<span class="number">0</span>,count=<span class="number">0</span>,temp=a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>]&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">value+=a[i<span class="number">-1</span>]-temp;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]-temp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">count+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[n<span class="number">-1</span>]&gt;temp)&#123;</span><br><span class="line">value+=a[n<span class="number">-1</span>]-temp;</span><br><span class="line">count+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;value&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3car"><a class="markdownIt-Anchor" href="#3car"></a> 3.car</h1><p>先考虑当方格没有破坏的时候，可以很容易得出n为偶有2<em>n辆，n为奇数时2</em>（n-1）+1辆（可以证明出来，或者找规律），接下来就是考虑被破坏的地方，然后减去相应的车辆，这个是有规律的。要小心的就是奇数时，中心十字架的位置。我写的比较繁琐，求个大佬的简单思路。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line"><span class="keyword">bool</span> h[n+<span class="number">1</span>];<span class="comment">//记录行 </span></span><br><span class="line"><span class="keyword">bool</span> l[n+<span class="number">1</span>];<span class="comment">//记录列 </span></span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> st=<span class="number">2</span>*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">2</span>;</span><br><span class="line">h[x]=<span class="number">1</span>,l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]!=<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]!=<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">h[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> st=<span class="number">2</span>*(n<span class="number">-1</span>);<span class="comment">//先不考虑中间十字线上可能出现的汽车 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(x==(n+<span class="number">1</span>)/<span class="number">2</span>||y==(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(x==(n+<span class="number">1</span>)/<span class="number">2</span>&amp;&amp;y!=(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y==(n+<span class="number">1</span>)/<span class="number">2</span>&amp;&amp;x!=(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h[x]=<span class="number">1</span>,l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">2</span>;</span><br><span class="line">h[x]=<span class="number">1</span>,l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]!=<span class="number">0</span>&amp;&amp;l[y]==<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">l[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h[x]==<span class="number">0</span>&amp;&amp;l[y]!=<span class="number">0</span>)&#123;</span><br><span class="line">st-=<span class="number">1</span>;</span><br><span class="line">h[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l[(n+<span class="number">1</span>)/<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;h[(n+<span class="number">1</span>)/<span class="number">2</span>]==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;st+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>完结，撒花！！！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Nowcoder </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
